<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>srm_print.h File Reference</h1>Provides reusable printing functions for various SRM types.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;stdio.h&gt;</code><br>
<code>#include "<a class="el" href="a00312.htm">srm_types.h</a>"</code><br>

<p>
<a href="a00301.htm">Go to the source code of this file.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>#define&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a0">EXPORT_DLL</a></td></tr>

<tr><td colspan=2><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a1">SRM_GetMinWidth</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL FILE *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a2">SRM_GetOutFilePtr</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a3">SRM_GetPrecision</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a4">SRM_SetMinWidth</a> (<a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> min_width)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL <a class="el" href="a00263.htm#a1100">SRM_Status_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a5">SRM_SetOutFilePtr</a> (FILE *out_file_ptr)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a6">SRM_SetPrecision</a> (<a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> precision)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a7">SRM_PrintAxisDirection</a> (<a class="el" href="a00263.htm#a1121">SRM_Axis_Direction</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a8">SRM_PrintBoolean</a> (<a class="el" href="a00259.htm#a23">SRM_Boolean</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a9">SRM_PrintCD3DCoordinate</a> (const <a class="el" href="a00110.htm">SRM_CD_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a10">SRM_PrintCDSurfaceCoordinate</a> (const <a class="el" href="a00112.htm">SRM_CD_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a11">SRM_PrintCoordinate</a> (const <a class="el" href="a00117.htm">SRM_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a12">SRM_PrintCoordinateValidRegion</a> (<a class="el" href="a00263.htm#a1122">SRM_Coordinate_Valid_Region</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a13">SRM_PrintCoordinateValidRegionArray</a> (const <a class="el" href="a00125.htm">SRM_Coordinate_Valid_Region_Array</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a14">SRM_PrintCSCode</a> (<a class="el" href="a00263.htm#a1080">SRM_CS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a15">SRM_PrintDSSCode</a> (<a class="el" href="a00263.htm#a1081">SRM_DSS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a16">SRM_PrintECParameters</a> (const <a class="el" href="a00130.htm">SRM_EC_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a17">SRM_PrintEI3DCoordinate</a> (const <a class="el" href="a00131.htm">SRM_EI_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a18">SRM_PrintEuclidean2DCoordinate</a> (const <a class="el" href="a00135.htm">SRM_Euclidean_2D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a19">SRM_PrintEuclidean3DCoordinate</a> (const <a class="el" href="a00136.htm">SRM_Euclidean_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a20">SRM_PrintInteger</a> (<a class="el" href="a00259.htm#a14">SRM_Integer</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a21">SRM_PrintIntegerPositive</a> (<a class="el" href="a00259.htm#a16">SRM_Integer_Positive</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a22">SRM_PrintIntegerUnsigned</a> (<a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a23">SRM_PrintIntervalType</a> (<a class="el" href="a00263.htm#a1123">SRM_Interval_Type</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a24">SRM_PrintLCCParameters</a> (const <a class="el" href="a00145.htm">SRM_LCC_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a25">SRM_PrintLCE3DParameters</a> (const <a class="el" href="a00147.htm">SRM_LCE_3D_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a26">SRM_PrintLocalTangentParameters</a> (const <a class="el" href="a00148.htm">SRM_Local_Tangent_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a27">SRM_PrintLongFloat</a> (<a class="el" href="a00259.htm#a17">SRM_Long_Float</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a28">SRM_PrintLSA2DCoordinate</a> (const <a class="el" href="a00157.htm">SRM_LSA_2D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a29">SRM_PrintLSP2DCoordinate</a> (const <a class="el" href="a00159.htm">SRM_LSP_2D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a30">SRM_PrintLSR2DParameters</a> (const <a class="el" href="a00162.htm">SRM_LSR_2D_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a31">SRM_PrintLSR3DParameters</a> (const <a class="el" href="a00164.htm">SRM_LSR_3D_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a32">SRM_PrintLTSAS3DCoordinate</a> (const <a class="el" href="a00165.htm">SRM_LTSAS_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a33">SRM_PrintLTSASSurfaceCoordinate</a> (const <a class="el" href="a00167.htm">SRM_LTSAS_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a34">SRM_PrintLTSC3DCoordinate</a> (const <a class="el" href="a00168.htm">SRM_LTSC_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a35">SRM_PrintLTSCSurfaceCoordinate</a> (const <a class="el" href="a00170.htm">SRM_LTSC_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a36">SRM_PrintLTSE3DCoordinate</a> (const <a class="el" href="a00171.htm">SRM_LTSE_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a37">SRM_PrintLTSEParameters</a> (const <a class="el" href="a00173.htm">SRM_LTSE_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a38">SRM_PrintLTSESurfaceCoordinate</a> (const <a class="el" href="a00174.htm">SRM_LTSE_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a39">SRM_PrintMParameters</a> (const <a class="el" href="a00176.htm">SRM_M_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a40">SRM_PrintMapProjection3DCoordinate</a> (const <a class="el" href="a00177.htm">SRM_Map_Projection_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a41">SRM_PrintMapProjectionSurfaceCoordinate</a> (const <a class="el" href="a00178.htm">SRM_Map_Projection_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a42">SRM_PrintMatrix3x3</a> (const <a class="el" href="a00263.htm#a1083">SRM_Matrix_3x3</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a43">SRM_PrintMatrix4x4</a> (const <a class="el" href="a00263.htm#a1084">SRM_Matrix_4x4</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a44">SRM_PrintObliqueMercatorParameters</a> (const <a class="el" href="a00180.htm">SRM_Oblique_Mercator_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a45">SRM_PrintORMCode</a> (<a class="el" href="a00263.htm#a1085">SRM_ORM_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a46">SRM_PrintORMTransformation2DParameters</a> (const <a class="el" href="a00185.htm">SRM_ORM_Transformation_2D_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a47">SRM_PrintORMTransformation3DParameters</a> (const <a class="el" href="a00186.htm">SRM_ORM_Transformation_3D_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a48">SRM_PrintORMTCode</a> (<a class="el" href="a00263.htm#a1086">SRM_ORMT_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a49">SRM_PrintPD3DCoordinate</a> (const <a class="el" href="a00187.htm">SRM_PD_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a50">SRM_PrintPDSurfaceCoordinate</a> (const <a class="el" href="a00189.htm">SRM_PD_Surface_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a51">SRM_PrintPolarAspect</a> (<a class="el" href="a00263.htm#a1124">SRM_Polar_Aspect</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a52">SRM_PrintPSParameters</a> (const <a class="el" href="a00193.htm">SRM_PS_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a53">SRM_PrintRDCode</a> (<a class="el" href="a00263.htm#a1087">SRM_RD_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a54">SRM_PrintRTCode</a> (<a class="el" href="a00263.htm#a1088">SRM_RT_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a55">SRM_PrintSpatialCoordinateCode</a> (<a class="el" href="a00263.htm#a1078">SRM_Spatial_Coordinate_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a56">SRM_PrintSpherical3DCoordinate</a> (const <a class="el" href="a00202.htm">SRM_Spherical_3D_Coordinate</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a57">SRM_PrintSRFCode</a> (<a class="el" href="a00263.htm#a1089">SRM_SRF_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a58">SRM_PrintSRFParametersInfo</a> (const <a class="el" href="a00203.htm">SRM_SRF_Parameters_Info</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a59">SRM_PrintSRFParametersInfoCode</a> (<a class="el" href="a00263.htm#a1090">SRM_SRF_Parameters_Info_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a60">SRM_PrintSRFReferenceSurfaceInfo</a> (const <a class="el" href="a00205.htm">SRM_SRF_Reference_Surface_Info</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a61">SRM_PrintSRFSCode</a> (<a class="el" href="a00263.htm#a1092">SRM_SRFS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a62">SRM_PrintSRFSCodeInfo</a> (const <a class="el" href="a00206.htm">SRM_SRFS_Code_Info</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a63">SRM_PrintSRFSInfo</a> (const <a class="el" href="a00208.htm">SRM_SRFS_Info</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a64">SRM_PrintSRFSMAlabamaSPCSCode</a> (<a class="el" href="a00263.htm#a1093">SRM_SRFSM_Alabama_SPCS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a65">SRM_PrintSRFSMGTRSGCSCode</a> (<a class="el" href="a00263.htm#a1094">SRM_SRFSM_GTRS_GCS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a66">SRM_PrintSRFSMJapanRectangularPlaneCSCode</a> (<a class="el" href="a00263.htm#a1095">SRM_SRFSM_Japan_Rectangular_Plane_CS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a67">SRM_PrintSRFSMLambertNTFCode</a> (<a class="el" href="a00263.htm#a1096">SRM_SRFSM_Lambert_NTF_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a68">SRM_PrintSRFSMUPSCode</a> (<a class="el" href="a00263.htm#a1097">SRM_SRFSM_UPS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a69">SRM_PrintSRFSMUTMCode</a> (<a class="el" href="a00263.htm#a1098">SRM_SRFSM_UTM_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a70">SRM_PrintSRFSMWisconsinSPCSCode</a> (<a class="el" href="a00263.htm#a1099">SRM_SRFSM_Wisconsin_SPCS_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a71">SRM_PrintSRFTCode</a> (<a class="el" href="a00263.htm#a1091">SRM_SRFT_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a72">SRM_PrintSRFTParameters</a> (const <a class="el" href="a00209.htm">SRM_SRFT_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a73">SRM_PrintStatusCode</a> (<a class="el" href="a00263.htm#a1100">SRM_Status_Code</a> value)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a74">SRM_PrintTMParameters</a> (const <a class="el" href="a00214.htm">SRM_TM_Parameters</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a75">SRM_PrintUnused</a> (const <a class="el" href="a00216.htm">SRM_Unused</a> *value_ptr, const char *name_ptr, <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>EXPORT_DLL const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00252.htm#a76">SRM_PrintVector3D</a> (const <a class="el" href="a00263.htm#a1082">SRM_Vector_3D</a> value)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Provides reusable printing functions for various SRM types. 
<p>
<dl compact><dt><b>Author:</b></dt><dd>Automatically generated file </dd></dl>

<p>
Definition in file <a class="el" href="a00301.htm">srm_print.h</a>.<hr><h2>Define Documentation</h2>
<a name="a0" doxytag="srm_print.h::EXPORT_DLL"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> #define EXPORT_DLL
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>

<p>
Definition at line <a class="el" href="a00301.htm#l00095">95</a> of file <a class="el" href="a00301.htm">srm_print.h</a>.    </td>
  </tr>
</table>
<hr><h2>Function Documentation</h2>
<a name="a1" doxytag="srm_print.h::SRM_GetMinWidth"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> SRM_GetMinWidth </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieves the minimum width used when printing floating-point numbers. <dl compact><dt><b>Returns:</b></dt><dd>min_width -- minimum field width. If the converted argument is smaller than min_width, it will be padded on the left with spaces to make up the field width. </dd></dl>
    </td>
  </tr>
</table>
<a name="a2" doxytag="srm_print.h::SRM_GetOutFilePtr"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL FILE* SRM_GetOutFilePtr </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the FILE pointer to which output is directed. <dl compact><dt><b>Returns:</b></dt><dd>FILE pointer to stream to which output is to be directed </dd></dl>
    </td>
  </tr>
</table>
<a name="a3" doxytag="srm_print.h::SRM_GetPrecision"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL <a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a> SRM_GetPrecision </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieves the precision used when printing floating-point numbers.<p>
<dl compact><dt><b>Returns:</b></dt><dd>precision -- number of digits to be printed after the decimal point, when printing an SRM_Long_Float </dd></dl>
    </td>
  </tr>
</table>
<a name="a7" doxytag="srm_print.h::SRM_PrintAxisDirection"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintAxisDirection </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1121">SRM_Axis_Direction</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Axis_Direction into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Axis_Direction to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a8" doxytag="srm_print.h::SRM_PrintBoolean"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintBoolean </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a23">SRM_Boolean</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Boolean into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Boolean to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a9" doxytag="srm_print.h::SRM_PrintCD3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintCD3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00110.htm">SRM_CD_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00110.htm">SRM_CD_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00110.htm">SRM_CD_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a10" doxytag="srm_print.h::SRM_PrintCDSurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintCDSurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00112.htm">SRM_CD_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00112.htm">SRM_CD_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00112.htm">SRM_CD_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a11" doxytag="srm_print.h::SRM_PrintCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00117.htm">SRM_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00117.htm">SRM_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00117.htm">SRM_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a12" doxytag="srm_print.h::SRM_PrintCoordinateValidRegion"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintCoordinateValidRegion </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1122">SRM_Coordinate_Valid_Region</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Coordinate_Valid_Region into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Coordinate_Valid_Region to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a13" doxytag="srm_print.h::SRM_PrintCoordinateValidRegionArray"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintCoordinateValidRegionArray </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00125.htm">SRM_Coordinate_Valid_Region_Array</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00125.htm">SRM_Coordinate_Valid_Region_Array</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00125.htm">SRM_Coordinate_Valid_Region_Array</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a14" doxytag="srm_print.h::SRM_PrintCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1080">SRM_CS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_CS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_CS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a15" doxytag="srm_print.h::SRM_PrintDSSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintDSSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1081">SRM_DSS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_DSS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_DSS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a16" doxytag="srm_print.h::SRM_PrintECParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintECParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00130.htm">SRM_EC_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00130.htm">SRM_EC_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00130.htm">SRM_EC_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a17" doxytag="srm_print.h::SRM_PrintEI3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintEI3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00131.htm">SRM_EI_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00131.htm">SRM_EI_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00131.htm">SRM_EI_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a18" doxytag="srm_print.h::SRM_PrintEuclidean2DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintEuclidean2DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00135.htm">SRM_Euclidean_2D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00135.htm">SRM_Euclidean_2D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00135.htm">SRM_Euclidean_2D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a19" doxytag="srm_print.h::SRM_PrintEuclidean3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintEuclidean3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00136.htm">SRM_Euclidean_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00136.htm">SRM_Euclidean_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00136.htm">SRM_Euclidean_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a20" doxytag="srm_print.h::SRM_PrintInteger"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintInteger </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a14">SRM_Integer</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Integer into a buffer that is <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Integer to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a21" doxytag="srm_print.h::SRM_PrintIntegerPositive"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintIntegerPositive </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a16">SRM_Integer_Positive</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Integer_Positive into a buffer <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Integer_Positive to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a22" doxytag="srm_print.h::SRM_PrintIntegerUnsigned"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintIntegerUnsigned </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Integer_Unsigned into a buffer <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Integer_Unsigned to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a23" doxytag="srm_print.h::SRM_PrintIntervalType"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintIntervalType </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1123">SRM_Interval_Type</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Interval_Type into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Interval_Type to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a24" doxytag="srm_print.h::SRM_PrintLCCParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLCCParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00145.htm">SRM_LCC_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00145.htm">SRM_LCC_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00145.htm">SRM_LCC_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a25" doxytag="srm_print.h::SRM_PrintLCE3DParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLCE3DParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00147.htm">SRM_LCE_3D_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00147.htm">SRM_LCE_3D_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00147.htm">SRM_LCE_3D_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a26" doxytag="srm_print.h::SRM_PrintLocalTangentParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLocalTangentParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00148.htm">SRM_Local_Tangent_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00148.htm">SRM_Local_Tangent_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00148.htm">SRM_Local_Tangent_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a27" doxytag="srm_print.h::SRM_PrintLongFloat"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintLongFloat </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a17">SRM_Long_Float</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Long_Float into a buffer that is suitable for printing. The precision and minimum field width to be <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Long_Float to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a28" doxytag="srm_print.h::SRM_PrintLSA2DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLSA2DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00157.htm">SRM_LSA_2D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00157.htm">SRM_LSA_2D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00157.htm">SRM_LSA_2D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a29" doxytag="srm_print.h::SRM_PrintLSP2DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLSP2DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00159.htm">SRM_LSP_2D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00159.htm">SRM_LSP_2D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00159.htm">SRM_LSP_2D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a30" doxytag="srm_print.h::SRM_PrintLSR2DParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLSR2DParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00162.htm">SRM_LSR_2D_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00162.htm">SRM_LSR_2D_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00162.htm">SRM_LSR_2D_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a31" doxytag="srm_print.h::SRM_PrintLSR3DParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLSR3DParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00164.htm">SRM_LSR_3D_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00164.htm">SRM_LSR_3D_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00164.htm">SRM_LSR_3D_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a32" doxytag="srm_print.h::SRM_PrintLTSAS3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSAS3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00165.htm">SRM_LTSAS_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00165.htm">SRM_LTSAS_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00165.htm">SRM_LTSAS_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a33" doxytag="srm_print.h::SRM_PrintLTSASSurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSASSurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00167.htm">SRM_LTSAS_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00167.htm">SRM_LTSAS_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00167.htm">SRM_LTSAS_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a34" doxytag="srm_print.h::SRM_PrintLTSC3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSC3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00168.htm">SRM_LTSC_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00168.htm">SRM_LTSC_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00168.htm">SRM_LTSC_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a35" doxytag="srm_print.h::SRM_PrintLTSCSurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSCSurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00170.htm">SRM_LTSC_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00170.htm">SRM_LTSC_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00170.htm">SRM_LTSC_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a36" doxytag="srm_print.h::SRM_PrintLTSE3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSE3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00171.htm">SRM_LTSE_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00171.htm">SRM_LTSE_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00171.htm">SRM_LTSE_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a37" doxytag="srm_print.h::SRM_PrintLTSEParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSEParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00173.htm">SRM_LTSE_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00173.htm">SRM_LTSE_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00173.htm">SRM_LTSE_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a38" doxytag="srm_print.h::SRM_PrintLTSESurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintLTSESurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00174.htm">SRM_LTSE_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00174.htm">SRM_LTSE_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00174.htm">SRM_LTSE_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a40" doxytag="srm_print.h::SRM_PrintMapProjection3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintMapProjection3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00177.htm">SRM_Map_Projection_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00177.htm">SRM_Map_Projection_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00177.htm">SRM_Map_Projection_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a41" doxytag="srm_print.h::SRM_PrintMapProjectionSurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintMapProjectionSurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00178.htm">SRM_Map_Projection_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00178.htm">SRM_Map_Projection_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00178.htm">SRM_Map_Projection_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a42" doxytag="srm_print.h::SRM_PrintMatrix3x3"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintMatrix3x3 </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00263.htm#a1083">SRM_Matrix_3x3</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Matrix_3x3 into a buffer that <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Matrix_3x3 to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a43" doxytag="srm_print.h::SRM_PrintMatrix4x4"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintMatrix4x4 </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00263.htm#a1084">SRM_Matrix_4x4</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Matrix_4x4 into a buffer that <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Matrix_4x4 to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a39" doxytag="srm_print.h::SRM_PrintMParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintMParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00176.htm">SRM_M_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00176.htm">SRM_M_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00176.htm">SRM_M_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a44" doxytag="srm_print.h::SRM_PrintObliqueMercatorParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintObliqueMercatorParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00180.htm">SRM_Oblique_Mercator_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00180.htm">SRM_Oblique_Mercator_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00180.htm">SRM_Oblique_Mercator_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a45" doxytag="srm_print.h::SRM_PrintORMCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintORMCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1085">SRM_ORM_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_ORM_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_ORM_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a48" doxytag="srm_print.h::SRM_PrintORMTCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintORMTCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1086">SRM_ORMT_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_ORMT_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_ORMT_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a46" doxytag="srm_print.h::SRM_PrintORMTransformation2DParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintORMTransformation2DParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00185.htm">SRM_ORM_Transformation_2D_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00185.htm">SRM_ORM_Transformation_2D_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00185.htm">SRM_ORM_Transformation_2D_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a47" doxytag="srm_print.h::SRM_PrintORMTransformation3DParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintORMTransformation3DParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00186.htm">SRM_ORM_Transformation_3D_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00186.htm">SRM_ORM_Transformation_3D_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00186.htm">SRM_ORM_Transformation_3D_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a49" doxytag="srm_print.h::SRM_PrintPD3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintPD3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00187.htm">SRM_PD_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00187.htm">SRM_PD_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00187.htm">SRM_PD_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a50" doxytag="srm_print.h::SRM_PrintPDSurfaceCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintPDSurfaceCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00189.htm">SRM_PD_Surface_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00189.htm">SRM_PD_Surface_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00189.htm">SRM_PD_Surface_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a51" doxytag="srm_print.h::SRM_PrintPolarAspect"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintPolarAspect </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1124">SRM_Polar_Aspect</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Polar_Aspect into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Polar_Aspect to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a52" doxytag="srm_print.h::SRM_PrintPSParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintPSParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00193.htm">SRM_PS_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00193.htm">SRM_PS_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00193.htm">SRM_PS_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a53" doxytag="srm_print.h::SRM_PrintRDCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintRDCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1087">SRM_RD_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_RD_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_RD_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a54" doxytag="srm_print.h::SRM_PrintRTCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintRTCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1088">SRM_RT_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_RT_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_RT_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a55" doxytag="srm_print.h::SRM_PrintSpatialCoordinateCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSpatialCoordinateCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1078">SRM_Spatial_Coordinate_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Spatial_Coordinate_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Spatial_Coordinate_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a56" doxytag="srm_print.h::SRM_PrintSpherical3DCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSpherical3DCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00202.htm">SRM_Spherical_3D_Coordinate</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00202.htm">SRM_Spherical_3D_Coordinate</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00202.htm">SRM_Spherical_3D_Coordinate</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a57" doxytag="srm_print.h::SRM_PrintSRFCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1089">SRM_SRF_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRF_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRF_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a58" doxytag="srm_print.h::SRM_PrintSRFParametersInfo"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSRFParametersInfo </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00203.htm">SRM_SRF_Parameters_Info</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00203.htm">SRM_SRF_Parameters_Info</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00203.htm">SRM_SRF_Parameters_Info</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a59" doxytag="srm_print.h::SRM_PrintSRFParametersInfoCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFParametersInfoCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1090">SRM_SRF_Parameters_Info_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRF_Parameters_Info_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRF_Parameters_Info_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a60" doxytag="srm_print.h::SRM_PrintSRFReferenceSurfaceInfo"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSRFReferenceSurfaceInfo </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00205.htm">SRM_SRF_Reference_Surface_Info</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00205.htm">SRM_SRF_Reference_Surface_Info</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00205.htm">SRM_SRF_Reference_Surface_Info</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a61" doxytag="srm_print.h::SRM_PrintSRFSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1092">SRM_SRFS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a62" doxytag="srm_print.h::SRM_PrintSRFSCodeInfo"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSRFSCodeInfo </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00206.htm">SRM_SRFS_Code_Info</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00206.htm">SRM_SRFS_Code_Info</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00206.htm">SRM_SRFS_Code_Info</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a63" doxytag="srm_print.h::SRM_PrintSRFSInfo"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSRFSInfo </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00208.htm">SRM_SRFS_Info</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00208.htm">SRM_SRFS_Info</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00208.htm">SRM_SRFS_Info</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a64" doxytag="srm_print.h::SRM_PrintSRFSMAlabamaSPCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMAlabamaSPCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1093">SRM_SRFSM_Alabama_SPCS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_Alabama_SPCS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_Alabama_SPCS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a65" doxytag="srm_print.h::SRM_PrintSRFSMGTRSGCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMGTRSGCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1094">SRM_SRFSM_GTRS_GCS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_SRFSM_GTRS_GCS_Code into a <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_GTRS_GCS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a66" doxytag="srm_print.h::SRM_PrintSRFSMJapanRectangularPlaneCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMJapanRectangularPlaneCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1095">SRM_SRFSM_Japan_Rectangular_Plane_CS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_Japan_Rectangular_Plane_CS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_Japan_Rectangular_Plane_CS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a67" doxytag="srm_print.h::SRM_PrintSRFSMLambertNTFCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMLambertNTFCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1096">SRM_SRFSM_Lambert_NTF_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_Lambert_NTF_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_Lambert_NTF_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a68" doxytag="srm_print.h::SRM_PrintSRFSMUPSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMUPSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1097">SRM_SRFSM_UPS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_UPS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_UPS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a69" doxytag="srm_print.h::SRM_PrintSRFSMUTMCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMUTMCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1098">SRM_SRFSM_UTM_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_UTM_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_UTM_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a70" doxytag="srm_print.h::SRM_PrintSRFSMWisconsinSPCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFSMWisconsinSPCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1099">SRM_SRFSM_Wisconsin_SPCS_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFSM_Wisconsin_SPCS_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFSM_Wisconsin_SPCS_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a71" doxytag="srm_print.h::SRM_PrintSRFTCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintSRFTCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1091">SRM_SRFT_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_SRFT_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_SRFT_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a72" doxytag="srm_print.h::SRM_PrintSRFTParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintSRFTParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00209.htm">SRM_SRFT_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00209.htm">SRM_SRFT_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00209.htm">SRM_SRFT_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a73" doxytag="srm_print.h::SRM_PrintStatusCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintStatusCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00263.htm#a1100">SRM_Status_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the given SRM_Status_Code into a buffer that is suitable for printing.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Status_Code to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing error message if value is out of range; otherwise, buffer is set to the string name equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a74" doxytag="srm_print.h::SRM_PrintTMParameters"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintTMParameters </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00214.htm">SRM_TM_Parameters</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00214.htm">SRM_TM_Parameters</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00214.htm">SRM_TM_Parameters</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a75" doxytag="srm_print.h::SRM_PrintUnused"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_PrintUnused </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00216.htm">SRM_Unused</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>value_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name_ptr</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>level</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints the information in the given <a class="el" href="a00216.htm">SRM_Unused</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value_ptr</em>&nbsp;</td><td>-- pointer to <a class="el" href="a00216.htm">SRM_Unused</a> whose contents are to be printed; if NULL, prints error message and returns to caller</td></tr>
    <tr><td valign=top><em>name_ptr</em>&nbsp;</td><td>-- optional; name of value_ptr field at the caller's level</td></tr>
    <tr><td valign=top><em>level</em>&nbsp;</td><td>-- current indentation level. For each level, the output is indented 4 spaces; e.g., level = 0 means no indentation; level = 1 causes an indent of 4 spaces; level = 2 indents 8 spaces, level = 3 indents 12 spaces, etc. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a76" doxytag="srm_print.h::SRM_PrintVector3D"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL const char* SRM_PrintVector3D </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00263.htm#a1082">SRM_Vector_3D</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Translates the information in the given SRM_Vector_3D into a buffer that <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>value</em>&nbsp;</td><td>-- SRM_Vector_3D to be processed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>static buffer, containing an error message if value is invalid; otherwise, contains the string label equivalent to value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Note that if you want to keep the results of this function, you must copy them out of the pointer that is returned, because the contents of the buffer will be overwritten the next time this function is called. </dd></dl>
    </td>
  </tr>
</table>
<a name="a4" doxytag="srm_print.h::SRM_SetMinWidth"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_SetMinWidth </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>min_width</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the minimum width used when printing floating-point numbers. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>min_width</em>&nbsp;</td><td>-- minimum field width. If the converted argument is smaller than min_width, it will be padded on the left with spaces to make up the field width. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a5" doxytag="srm_print.h::SRM_SetOutFilePtr"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL <a class="el" href="a00263.htm#a1100">SRM_Status_Code</a> SRM_SetOutFilePtr </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>out_file_ptr</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the FILE pointer to which output is directed. <dl compact><dt><b>Warning:</b></dt><dd>If you close this file after calling this function, remember that the SE_xxx functions will still try to use it.</dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>out_file_ptr</em>&nbsp;</td><td>-- stream to which output is to be directed</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>SRM_STATCOD_INACTIONABLE - and nothing is changed, if err_file_ptr is NULL <p>
SRM_STATCOD_SUCCESS - otherwise </dd></dl>
    </td>
  </tr>
</table>
<a name="a6" doxytag="srm_print.h::SRM_SetPrecision"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> EXPORT_DLL void SRM_SetPrecision </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00259.htm#a15">SRM_Integer_Unsigned</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>precision</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the precision used when printing floating-point numbers. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>precision</em>&nbsp;</td><td>-- number of digits to be printed after the decimal point, when when printing an SRM_Float or SRM_Long_Float </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C API</strong></td>
<td align="right"><strong>
Version: 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
