<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Celestiocentric.h</h1><a href="a00246.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: Celestiocentric.h,v 1.18 2008-10-21 16:00:54-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _Celestiocentric_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _Celestiocentric_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00173.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_Celestiocentric: <span class="keyword">public</span> <a class="code" href="a00125.htm">BaseSRF_3D</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_Celestiocentric* create( <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                         <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt );
00098 
<a name="l00102"></a><a class="code" href="a00173.htm#e1">00102</a>     <span class="keyword">static</span> SRF_Celestiocentric* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00103     {
00104         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code, srf_params.<a class="code" href="a00235.htm#o1">rt_code</a> );
00105     }
00106 
00109     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00110                                 SRM_Long_Float coord_comp2,
00111                                 SRM_Long_Float coord_comp3 );
00112 
00115     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00116 
<a name="l00119"></a><a class="code" href="a00173.htm#a2">00119</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00120 <span class="keyword">    </span>{
00121         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_CC;
00122     }
00123 
00127     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_Celestiocentric &amp;srf ) <span class="keyword">const</span>;
00128 
00132     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_Celestiocentric &amp;rhs ) <span class="keyword">const</span>;
00133 
00137     SRF_Celestiocentric* makeCopy() <span class="keyword">const</span>;
00138 
00146     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF( <span class="keyword">const</span> Coord3D &amp;src_coord,
00147                                                                Coord3D &amp;des_coord );
00148 
00152     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00153 
00154 <span class="keyword">protected</span>:
00155     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00156     SRF_Celestiocentric( <span class="keywordtype">void</span> *impl ); 
<a name="l00157"></a><a class="code" href="a00173.htm#b1">00157</a>     SRF_Celestiocentric &amp;operator =( <span class="keyword">const</span> SRF_Celestiocentric &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00158     <span class="keyword">virtual</span> ~SRF_Celestiocentric(); 
00159 };
00160 
00161 
<a name="l00162"></a><a class="code" href="a00173.htm#a1">00162</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_Celestiocentric::isA( SRF_ClassType type )<span class="keyword"> const</span>
00163 <span class="keyword"></span>{
00164     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_CC)
00165         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00166     <span class="keywordflow">else</span>
00167         <span class="keywordflow">return</span> BaseSRF_3D::isA(type);
00168 };
00169 
00170 
00172 <span class="keyword">typedef</span> SRF_Celestiocentric <a class="code" href="a00173.htm">SRF_CC</a>;
00173 
00174 
<a name="l00179"></a><a class="code" href="a00135.htm">00179</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_Celestiocentric: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00180 {
00181 <span class="keyword">public</span>:
<a name="l00184"></a><a class="code" href="a00135.htm#a0">00184</a>     Coord3D_Celestiocentric( SRF_Celestiocentric *srf,
00185                              SRM_Long_Float u = 0.0,
00186                              SRM_Long_Float v = 0.0,
00187                              SRM_Long_Float w = 0.0 )
00188     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00189     {
00190         setComponentValues(u, v, w);
00191     }
00192 
<a name="l00195"></a><a class="code" href="a00135.htm#a1">00195</a>     Coord3D_Celestiocentric( <span class="keyword">const</span> Coord3D_Celestiocentric &amp;coord )
00196     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00197     {
00198         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00199     }
00200 
<a name="l00206"></a><a class="code" href="a00135.htm#a2">00206</a>     <span class="keywordtype">void</span> copyTo( Coord3D_Celestiocentric &amp;coord )<span class="keyword"> const</span>
00207 <span class="keyword">    </span>{
00208         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00209             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00210 
00211           coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00212           coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00213           coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00214     }
00215 
<a name="l00219"></a><a class="code" href="a00135.htm#a3">00219</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_Celestiocentric &amp;coord )<span class="keyword"> const</span>
00220 <span class="keyword">    </span>{
00221         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00222                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00223                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00224                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00225     }
00226 
<a name="l00229"></a><a class="code" href="a00135.htm#a4">00229</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float u, SRM_Long_Float v, SRM_Long_Float w )
00230     {
00231         _values[0] = u;
00232         _values[1] = v;
00233         _values[2] = w;
00234     }
00235 
<a name="l00238"></a><a class="code" href="a00135.htm#a5">00238</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_u()<span class="keyword"> const</span>
00239 <span class="keyword">    </span>{
00240         <span class="keywordflow">return</span> _values[0];
00241     }
00242 
<a name="l00245"></a><a class="code" href="a00135.htm#a6">00245</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_v()<span class="keyword"> const</span>
00246 <span class="keyword">    </span>{
00247         <span class="keywordflow">return</span> _values[1];
00248     }
00249 
<a name="l00252"></a><a class="code" href="a00135.htm#a7">00252</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_w()<span class="keyword"> const</span>
00253 <span class="keyword">    </span>{
00254         <span class="keywordflow">return</span> _values[2];
00255     }
00256 
<a name="l00259"></a><a class="code" href="a00135.htm#a8">00259</a>     <span class="keywordtype">void</span> set_u( SRM_Long_Float value )
00260     {
00261         _values[0] = value;
00262     }
00263 
<a name="l00266"></a><a class="code" href="a00135.htm#a9">00266</a>     <span class="keywordtype">void</span> set_v( SRM_Long_Float value )
00267     {
00268         _values[1] = value;
00269     }
00270 
<a name="l00273"></a><a class="code" href="a00135.htm#a10">00273</a>     <span class="keywordtype">void</span> set_w( SRM_Long_Float value )
00274     {
00275         _values[2] = value;
00276     }
00277 
00280     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00281 
<a name="l00284"></a><a class="code" href="a00135.htm#a12">00284</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00285 <span class="keyword">    </span>{
00286         <span class="keywordflow">return</span> Coord::COORD_TYP_CC;
00287     }
00288 
00291     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_Celestiocentric &amp;rhs ) <span class="keyword">const</span>;
00292 
<a name="l00298"></a><a class="code" href="a00135.htm#a14">00298</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_Celestiocentric &amp;rhs )<span class="keyword"> const</span>
00299 <span class="keyword">    </span>{
00300         <span class="keywordflow">return</span> ((*(SRF_Celestiocentric*)(this-&gt;_srf)) == (*(SRF_Celestiocentric*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00301     }
00302 
<a name="l00307"></a><a class="code" href="a00135.htm#a15">00307</a>     Coord3D_Celestiocentric &amp;operator= ( <span class="keyword">const</span> Coord3D_Celestiocentric &amp;rhs )
00308     {
00309         <span class="keywordflow">if</span>((*(SRF_Celestiocentric*)(this-&gt;_srf)) == (*(SRF_Celestiocentric*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00310         {
00311             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00312             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00313             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00314         }
00315         <span class="keywordflow">else</span>
00316             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00317                             <span class="stringliteral">"Coord3D_Celestiocentric op=: incompatible rhs coordinate"</span>);
00318 
00319         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00320     }
00321 };
00322 
00323 
<a name="l00324"></a><a class="code" href="a00135.htm#a11">00324</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_Celestiocentric::isA( Coord_ClassType type )<span class="keyword"> const</span>
00325 <span class="keyword"></span>{
00326     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_CC)
00327         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00328     <span class="keywordflow">else</span>
00329         <span class="keywordflow">return</span> Coord3D::isA(type);
00330 };
00331 
00332 
00334 <span class="keyword">typedef</span> Coord3D_Celestiocentric <a class="code" href="a00135.htm">Coord3D_CC</a>;
00335 
00336 } <span class="comment">// namespace srm</span>
00337 
00338 <span class="preprocessor">#endif // _Celestiocentric_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
