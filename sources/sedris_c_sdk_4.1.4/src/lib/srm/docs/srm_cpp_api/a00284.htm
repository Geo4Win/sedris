<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Coord.h</h1><a href="a00249.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: Coord.h,v 1.23 2009-08-13 11:48:02-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _Coord_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _Coord_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#if !defined(_WIN32)</span>
00079 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00080 <span class="preprocessor"></span><span class="preprocessor">#elif defined(BUILD_SRM_CPP) </span><span class="comment">/* SRM CPP Case */</span>
00081 <span class="preprocessor">#if !defined(EXPORT_SRM_CPP_DLL)</span>
00082 <span class="preprocessor"></span><span class="preprocessor">#if defined(_LIB)</span>
00083 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00084 <span class="preprocessor"></span><span class="preprocessor">#elif defined(_USRDLL)</span>
00085 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL __declspec(dllexport)</span>
00086 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00087 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL __declspec(dllimport)</span>
00088 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00089 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00090 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* SRM C Case */</span>
00091 <span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00092 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* _WIN32 &amp;&amp; EXPORT_DLL */</span>
00093 
00094 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span> 
00095 
00096 <span class="keyword">namespace </span>srm
00097 {
00098 
<a name="l00107"></a><a class="code" href="a00129.htm">00107</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord
00108 {
00109 <span class="keyword">public</span>:
<a name="l00112"></a><a class="code" href="a00129.htm#w40">00112</a>     <span class="keyword">enum</span> Coord_ClassType
00113     {
00114         COORD_TYP_TWO_D,
00115         COORD_TYP_SURFACE,
00116         COORD_TYP_THREE_D,
00117         COORD_TYP_LSA,
00118         COORD_TYP_CC,
00119         COORD_TYP_CD,
00120         COORD_TYP_SURF_CD,
00121         COORD_TYP_CM,
00122         COORD_TYP_EC,
00123         COORD_TYP_SURF_EC,
00124         COORD_TYP_EI,
00125         COORD_TYP_HAEC,
00126         COORD_TYP_HEEC,
00127         COORD_TYP_HEEQ,
00128         COORD_TYP_LCC,
00129         COORD_TYP_SURF_LCC,
00130         COORD_TYP_LCE_3D,
00131         COORD_TYP_LSR_3D,
00132         COORD_TYP_LSR_2D,
00133         COORD_TYP_LTSAS,
00134         COORD_TYP_SURF_LTSAS,
00135         COORD_TYP_LTSC,
00136         COORD_TYP_SURF_LTSC,
00137         COORD_TYP_LTSE,
00138         COORD_TYP_SURF_LTSE,
00139         COORD_TYP_M,
00140         COORD_TYP_SURF_M,
00141         COORD_TYP_OMS,
00142         COORD_TYP_SURF_OMS,
00143         COORD_TYP_LSP,
00144         COORD_TYP_PS,
00145         COORD_TYP_SURF_PS,
00146         COORD_TYP_PD,
00147         COORD_TYP_SURF_PD,
00148         COORD_TYP_SEC,
00149         COORD_TYP_SEQ,
00150         COORD_TYP_SME,
00151         COORD_TYP_SMD,
00152         COORD_TYP_TM,
00153         COORD_TYP_SURF_TM
00154     };
00155 
<a name="l00158"></a><a class="code" href="a00129.htm#a0">00158</a>     <a class="code" href="a00123.htm">BaseSRF</a> *getSRF()<span class="keyword"> const</span>
00159 <span class="keyword">    </span>{
00160       <span class="keywordflow">return</span> _srf;
00161     }
00162 
00165     <span class="keyword">virtual</span> Coord_ClassType getClassType() <span class="keyword">const</span> = 0;
00166 
00169     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00170 
00173     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *toString() = 0;
00174 
00175 <span class="keyword">protected</span>:
<a name="l00178"></a><a class="code" href="a00129.htm#b0">00178</a>     Coord( <a class="code" href="a00123.htm">BaseSRF</a> *srf )
00179     {
00180         _srf = srf-&gt;<a class="code" href="a00123.htm#a18">clone</a>();
00181     }
00182 
<a name="l00187"></a><a class="code" href="a00129.htm#b1">00187</a>     Coord &amp;operator =( <span class="keyword">const</span> Coord &amp;coord )
00188     {
00189         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00190     }
00191 
<a name="l00194"></a><a class="code" href="a00129.htm#b2">00194</a>     <span class="keyword">virtual</span> ~Coord()
00195     {
00196         _srf-&gt;release();
00197     }
00198 
<a name="l00201"></a><a class="code" href="a00129.htm#p0">00201</a>     <a class="code" href="a00123.htm">BaseSRF</a> *_srf;
00202 };
00203 
<a name="l00204"></a><a class="code" href="a00129.htm#a2">00204</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord::isA( Coord_ClassType type )<span class="keyword"> const</span>
00205 <span class="keyword"></span>{
00206     <span class="keywordflow">return</span> <span class="keyword">false</span>;
00207 }
00208 
<a name="l00212"></a><a class="code" href="a00130.htm">00212</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord2D: <span class="keyword">public</span> Coord
00213 {
00214 <span class="keyword">public</span>:
00217     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00218 
<a name="l00221"></a><a class="code" href="a00130.htm#a1">00221</a>     <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> *getValues()<span class="keyword"> const</span>
00222 <span class="keyword">    </span>{
00223         <span class="keywordflow">return</span> _values;
00224     }
00225 
<a name="l00228"></a><a class="code" href="a00130.htm#a2">00228</a>     <span class="keywordtype">void</span> setValues( <span class="keyword">const</span> SRM_Long_Float values[2])
00229     {
00230         _values[0] = values[0];
00231         _values[1] = values[1];
00232     }
00233 
00236     <span class="keyword">const</span> <span class="keywordtype">char</span> *toString();
00237 
00238 <span class="keyword">protected</span>:
<a name="l00241"></a><a class="code" href="a00130.htm#b0">00241</a>     Coord2D( <a class="code" href="a00123.htm">BaseSRF</a> *srf )
00242       : Coord(srf)
00243     {
00244     }
00245 
<a name="l00248"></a><a class="code" href="a00130.htm#p0">00248</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> _values[2];
00249 };
00250 
00251 
<a name="l00254"></a><a class="code" href="a00130.htm#a0">00254</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord2D::isA( Coord_ClassType type )<span class="keyword"> const</span>
00255 <span class="keyword"></span>{
00256     <span class="keywordflow">if</span> ( type == Coord::COORD_TYP_TWO_D )
00257         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00258     <span class="keywordflow">else</span>
00259         <span class="keywordflow">return</span> Coord::isA(type);
00260 }
00261 
00262 
<a name="l00266"></a><a class="code" href="a00158.htm">00266</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf: <span class="keyword">public</span> Coord
00267 {
00268 <span class="keyword">public</span>:
00271     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00272 
<a name="l00275"></a><a class="code" href="a00158.htm#a1">00275</a>     <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> *getValues()<span class="keyword"> const</span>
00276 <span class="keyword">    </span>{
00277         <span class="keywordflow">return</span> _values;
00278     }
00279 
<a name="l00282"></a><a class="code" href="a00158.htm#a2">00282</a>     <span class="keywordtype">void</span> setValues( <span class="keyword">const</span> SRM_Long_Float values[2] )
00283     {
00284         _values[0] = values[0];
00285         _values[1] = values[1];
00286     }
00287 
00290     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *toString();
00291 
00292 <span class="keyword">protected</span>:
<a name="l00295"></a><a class="code" href="a00158.htm#b0">00295</a>     CoordSurf( <a class="code" href="a00123.htm">BaseSRF</a> *srf )
00296       : Coord(srf)
00297     {
00298     }
00299 
<a name="l00302"></a><a class="code" href="a00158.htm#p0">00302</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> _values[2];
00303 };
00304 
<a name="l00305"></a><a class="code" href="a00158.htm#a0">00305</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf::isA( Coord_ClassType type )<span class="keyword"> const</span>
00306 <span class="keyword"></span>{
00307     <span class="keywordflow">if</span> ( type == Coord::COORD_TYP_SURFACE )
00308         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00309     <span class="keywordflow">else</span>
00310         <span class="keywordflow">return</span> Coord::isA(type);
00311 }
00312 
<a name="l00316"></a><a class="code" href="a00134.htm">00316</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D: <span class="keyword">public</span> Coord
00317 {
00318 <span class="keyword">public</span>:
00321     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00322 
<a name="l00325"></a><a class="code" href="a00134.htm#a1">00325</a>     <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> *getValues()<span class="keyword"> const</span>
00326 <span class="keyword">    </span>{
00327         <span class="keywordflow">return</span> _values;
00328     }
00329 
<a name="l00332"></a><a class="code" href="a00134.htm#a2">00332</a>     <span class="keywordtype">void</span> setValues( <span class="keyword">const</span> SRM_Long_Float values[3])
00333     {
00334         _values[0] = values[0];
00335         _values[1] = values[1];
00336         _values[2] = values[2];
00337     }
00338 
00341     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00342 
00353     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* getMGRS( SRM_Integer precision );
00354 
00365     <span class="keyword">virtual</span> <span class="keywordtype">void</span> setCoord( <span class="keyword">const</span> <span class="keywordtype">char</span>* mgrs );
00366 
00367 <span class="keyword">protected</span>:
<a name="l00370"></a><a class="code" href="a00134.htm#b0">00370</a>     Coord3D( <a class="code" href="a00123.htm">BaseSRF</a> *srf )
00371       : Coord(srf)
00372     {
00373     }
00374 
<a name="l00377"></a><a class="code" href="a00134.htm#p0">00377</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> _values[3];
00378 };
00379 
<a name="l00380"></a><a class="code" href="a00134.htm#a0">00380</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D::isA( Coord_ClassType type )<span class="keyword"> const</span>
00381 <span class="keyword"></span>{
00382     <span class="keywordflow">if</span> ( type == Coord::COORD_TYP_THREE_D )
00383         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00384     <span class="keywordflow">else</span>
00385         <span class="keywordflow">return</span> Coord::isA(type);
00386 }
00387 
00388 } <span class="comment">// namespace srm</span>
00389 
00390 <span class="preprocessor">#endif // _Coord_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
