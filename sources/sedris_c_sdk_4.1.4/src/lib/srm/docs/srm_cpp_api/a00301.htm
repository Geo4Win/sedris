<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Mercator.h</h1><a href="a00266.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: Mercator.h,v 1.18 2009-10-12 16:13:05-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _Mercator_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _Mercator_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00190.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_Mercator: <span class="keyword">public</span> <a class="code" href="a00126.htm">BaseSRF_MapProjection</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_Mercator* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                       <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00098                                 <span class="keyword">const</span> <a class="code" href="a00225.htm">SRM_M_Parameters</a> &amp;params);
00099 
00103     <span class="keyword">static</span> SRF_Mercator* create(
00104                                 <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a>   orm,
00105                                 <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>    rt,
00106                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> origin_longitude,
00107                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> central_scale,
00108                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_easting,
00109                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_northing
00110                                 );
00111 
<a name="l00115"></a><a class="code" href="a00190.htm#e2">00115</a>     <span class="keyword">static</span> SRF_Mercator* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00116     {
00117         <span class="keywordflow">return</span> create(srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00118                       srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00119                       srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.m_srf_parameters);
00120     }
00121 
00124     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00125                                 SRM_Long_Float coord_comp2,
00126                                 SRM_Long_Float coord_comp3);
00127 
00130     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00131                                        SRM_Long_Float coord_surf_comp2);
00132 
00136     <span class="keyword">const</span> <a class="code" href="a00225.htm">SRM_M_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00137 
00141     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_origin_longitude() <span class="keyword">const</span>;
00142 
00146     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_central_scale() <span class="keyword">const</span>;
00147 
00151     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_easting() <span class="keyword">const</span>;
00152 
00156     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_northing() <span class="keyword">const</span>;
00157 
00160     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00161 
<a name="l00164"></a><a class="code" href="a00190.htm#a8">00164</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00165 <span class="keyword">    </span>{
00166         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_M;
00167     }
00168 
00172     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_Mercator &amp;srf ) <span class="keyword">const</span>;
00173 
00177     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_Mercator &amp;rhs ) <span class="keyword">const</span>;
00178 
00182     SRF_Mercator* makeCopy() <span class="keyword">const</span>;
00183 
00191     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF(<span class="keyword">const</span> Coord3D &amp;src_coord,
00192                                                                     Coord3D &amp;des_coord);
00193 
00197     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00198 
00199 <span class="keyword">protected</span>:
00200     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00201     SRF_Mercator( <span class="keywordtype">void</span> *impl ); 
<a name="l00202"></a><a class="code" href="a00190.htm#b1">00202</a>     SRF_Mercator &amp;operator =( <span class="keyword">const</span> SRF_Mercator &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00203     <span class="keyword">virtual</span> ~SRF_Mercator(); 
00204 };
00205 
00206 
<a name="l00207"></a><a class="code" href="a00190.htm#a7">00207</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_Mercator::isA( SRF_ClassType type )<span class="keyword"> const</span>
00208 <span class="keyword"></span>{
00209     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_M)
00210         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00211     <span class="keywordflow">else</span>
00212         <span class="keywordflow">return</span> BaseSRF_MapProjection::isA(type);
00213 };
00214 
00215 
00217 <span class="keyword">typedef</span> SRF_Mercator <a class="code" href="a00190.htm">SRF_M</a>;
00218 
00219 
<a name="l00224"></a><a class="code" href="a00149.htm">00224</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_Mercator: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00225 {
00226 <span class="keyword">public</span>:
<a name="l00229"></a><a class="code" href="a00149.htm#a0">00229</a>     Coord3D_Mercator(SRF_Mercator *srf,
00230                      SRM_Long_Float easting = 0.0,
00231                      SRM_Long_Float northing = 0.0,
00232                      SRM_Long_Float ellipsoidal_height = 0.0)
00233     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00234     {
00235         setComponentValues(easting, northing, ellipsoidal_height);
00236     }
00237 
<a name="l00240"></a><a class="code" href="a00149.htm#a1">00240</a>     Coord3D_Mercator( <span class="keyword">const</span> Coord3D_Mercator &amp;coord )
00241     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00242     {
00243         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00244     }
00245 
<a name="l00251"></a><a class="code" href="a00149.htm#a2">00251</a>     <span class="keywordtype">void</span> copyTo( Coord3D_Mercator &amp;coord )<span class="keyword"> const</span>
00252 <span class="keyword">    </span>{
00253         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00254             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00255 
00256         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00257         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00258         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00259     }
00260 
<a name="l00264"></a><a class="code" href="a00149.htm#a3">00264</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_Mercator &amp;coord )<span class="keyword"> const</span>
00265 <span class="keyword">    </span>{
00266         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00267                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00268                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00269                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2]);
00270     }
00271 
<a name="l00274"></a><a class="code" href="a00149.htm#a4">00274</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing, SRM_Long_Float ellipsoidal_height )
00275     {
00276         _values[0] = easting;
00277         _values[1] = northing;
00278         _values[2] = ellipsoidal_height;
00279     }
00280 
<a name="l00283"></a><a class="code" href="a00149.htm#a5">00283</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00284 <span class="keyword">    </span>{
00285         <span class="keywordflow">return</span> _values[0];
00286     }
00287 
<a name="l00290"></a><a class="code" href="a00149.htm#a6">00290</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00291 <span class="keyword">    </span>{
00292         <span class="keywordflow">return</span> _values[1];
00293     }
00294 
<a name="l00297"></a><a class="code" href="a00149.htm#a7">00297</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_ellipsoidal_height()<span class="keyword"> const</span>
00298 <span class="keyword">    </span>{
00299         <span class="keywordflow">return</span> _values[2];
00300     }
00301 
<a name="l00304"></a><a class="code" href="a00149.htm#a8">00304</a>     <span class="keywordtype">void</span> set_easting( SRM_Long_Float value )
00305     {
00306         _values[0] = value;
00307     }
00308 
<a name="l00311"></a><a class="code" href="a00149.htm#a9">00311</a>     <span class="keywordtype">void</span> set_northing( SRM_Long_Float value )
00312     {
00313         _values[1] = value;
00314     }
00315 
<a name="l00318"></a><a class="code" href="a00149.htm#a10">00318</a>     <span class="keywordtype">void</span> set_ellipsoidal_height( SRM_Long_Float value )
00319     {
00320         _values[2] = value;
00321     }
00322 
00325     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00326 
<a name="l00329"></a><a class="code" href="a00149.htm#a12">00329</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00330 <span class="keyword">    </span>{
00331         <span class="keywordflow">return</span> Coord::COORD_TYP_M;
00332     }
00333 
00336     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_Mercator &amp;rhs ) <span class="keyword">const</span>;
00337 
<a name="l00343"></a><a class="code" href="a00149.htm#a14">00343</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_Mercator &amp;rhs )<span class="keyword"> const</span>
00344 <span class="keyword">    </span>{
00345         <span class="keywordflow">return</span> ((*(SRF_Mercator*)(this-&gt;_srf)) == (*(SRF_Mercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00346     }
00347 
<a name="l00352"></a><a class="code" href="a00149.htm#a15">00352</a>     Coord3D_Mercator &amp;operator= ( <span class="keyword">const</span> Coord3D_Mercator &amp;rhs )
00353     {
00354         <span class="keywordflow">if</span>((*(SRF_Mercator*)(this-&gt;_srf)) == (*(SRF_Mercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00355         {
00356             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00357             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00358             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00359         }
00360         <span class="keywordflow">else</span>
00361             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00362                             <span class="stringliteral">"Coord3D_Mercator op=: incompatible rhs coordinate"</span>);
00363 
00364         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00365     }
00366 };
00367 
00368 
<a name="l00369"></a><a class="code" href="a00149.htm#a11">00369</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_Mercator::isA( Coord_ClassType type )<span class="keyword"> const</span>
00370 <span class="keyword"></span>{
00371     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_M)
00372         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00373     <span class="keywordflow">else</span>
00374         <span class="keywordflow">return</span> Coord3D::isA(type);
00375 };
00376 
00377 
00379 <span class="keyword">typedef</span> Coord3D_Mercator <a class="code" href="a00149.htm">Coord3D_M</a>;
00380 
00381 
<a name="l00386"></a><a class="code" href="a00165.htm">00386</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_Mercator: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00387 {
00388 <span class="keyword">public</span>:
<a name="l00391"></a><a class="code" href="a00165.htm#a0">00391</a>     CoordSurf_Mercator( SRF_Mercator *srf,
00392                         SRM_Long_Float easting = 0.0,
00393                         SRM_Long_Float northing = 0.0 )
00394     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00395     {
00396         setComponentValues(easting, northing);
00397     }
00398 
<a name="l00401"></a><a class="code" href="a00165.htm#a1">00401</a>     CoordSurf_Mercator( <span class="keyword">const</span> CoordSurf_Mercator &amp;coord )
00402     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00403     {
00404         setComponentValues( coord._values[0], coord._values[1] );
00405     }
00406 
<a name="l00412"></a><a class="code" href="a00165.htm#a2">00412</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_Mercator &amp;coord )<span class="keyword"> const</span>
00413 <span class="keyword">    </span>{
00414         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00415             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00416 
00417         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00418         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00419     }
00420 
<a name="l00424"></a><a class="code" href="a00165.htm#a3">00424</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_Mercator &amp;coord )<span class="keyword"> const</span>
00425 <span class="keyword">    </span>{
00426         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00427                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00428                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00429     }
00430 
<a name="l00433"></a><a class="code" href="a00165.htm#a4">00433</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing )
00434     {
00435         _values[0] = easting;
00436         _values[1] = northing;
00437     }
00438 
<a name="l00441"></a><a class="code" href="a00165.htm#a5">00441</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00442 <span class="keyword">    </span>{
00443         <span class="keywordflow">return</span> _values[0];
00444     }
00445 
<a name="l00448"></a><a class="code" href="a00165.htm#a6">00448</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00449 <span class="keyword">    </span>{
00450         <span class="keywordflow">return</span> _values[1];
00451     }
00452 
<a name="l00455"></a><a class="code" href="a00165.htm#a7">00455</a>     <span class="keywordtype">void</span> set_easting( SRM_Long_Float value )
00456     {
00457         _values[0] = value;
00458     }
00459 
<a name="l00462"></a><a class="code" href="a00165.htm#a8">00462</a>     <span class="keywordtype">void</span> set_northing( SRM_Long_Float value )
00463     {
00464         _values[1] = value;
00465     }
00466 
00469     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00470 
<a name="l00473"></a><a class="code" href="a00165.htm#a10">00473</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00474 <span class="keyword">    </span>{
00475         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_M;
00476     }
00477 
00480     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_Mercator &amp;rhs ) <span class="keyword">const</span>;
00481 
<a name="l00487"></a><a class="code" href="a00165.htm#a12">00487</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_Mercator &amp;rhs )<span class="keyword"> const</span>
00488 <span class="keyword">    </span>{
00489         <span class="keywordflow">return</span> ((*(SRF_Mercator*)(this-&gt;_srf)) == (*(SRF_Mercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00490     }
00491 
<a name="l00497"></a><a class="code" href="a00165.htm#a13">00497</a>     CoordSurf_Mercator &amp;operator= ( <span class="keyword">const</span> CoordSurf_Mercator &amp;rhs )
00498     {
00499         <span class="keywordflow">if</span>((*(SRF_Mercator*)(this-&gt;_srf)) == (*(SRF_Mercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00500         {
00501             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00502             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00503         }
00504         <span class="keywordflow">else</span>
00505             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00506                             <span class="stringliteral">"CoordSurf_Mercator op=: incompatible rhs coordinate"</span>);
00507 
00508         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00509     }
00510 };
00511 
00512 
<a name="l00513"></a><a class="code" href="a00165.htm#a9">00513</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_Mercator::isA( Coord_ClassType type )<span class="keyword"> const</span>
00514 <span class="keyword"></span>{
00515     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_M)
00516         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00517     <span class="keywordflow">else</span>
00518         <span class="keywordflow">return</span> CoordSurf::isA(type);
00519 };
00520 
00521 
00523 <span class="keyword">typedef</span> CoordSurf_Mercator <a class="code" href="a00165.htm">CoordSurf_M</a>;
00524 
00525 } <span class="comment">// namespace srm</span>
00526 
00527 <span class="preprocessor">#endif // _Mercator_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
