<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>SolarMagneticDipole.h</h1><a href="a00273.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: SolarMagneticDipole.h,v 1.17 2008-10-21 14:14:20-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _SolarMagneticDipole_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _SolarMagneticDipole_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00196.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_SolarMagneticDipole: <span class="keyword">public</span> <a class="code" href="a00125.htm">BaseSRF_3D</a>
00091 {
00092 <span class="keyword">public</span>:
00096       <span class="keyword">static</span> SRF_SolarMagneticDipole* create( <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                               <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt );
00098 
<a name="l00102"></a><a class="code" href="a00196.htm#e1">00102</a>       <span class="keyword">static</span> SRF_SolarMagneticDipole* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00103       {
00104           <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code, srf_params.<a class="code" href="a00235.htm#o1">rt_code</a> );
00105       }
00106 
00109       Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00110                                   SRM_Long_Float coord_comp2,
00111                                   SRM_Long_Float coord_comp3 );
00112 
00115       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00116 
<a name="l00119"></a><a class="code" href="a00196.htm#a2">00119</a>       <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00120 <span class="keyword">      </span>{
00121           <span class="keywordflow">return</span> BaseSRF::SRF_TYP_SMD;
00122       }
00123 
00127       <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_SolarMagneticDipole &amp;srf ) <span class="keyword">const</span>;
00128 
00132       <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_SolarMagneticDipole &amp;rhs ) <span class="keyword">const</span>;
00133 
00137       SRF_SolarMagneticDipole* makeCopy() <span class="keyword">const</span>;
00138 
00142       <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00143 
00144 <span class="keyword">protected</span>:
<a name="l00145"></a><a class="code" href="a00196.htm#b0">00145</a>       SRF_SolarMagneticDipole( <span class="keywordtype">void</span> *impl ) : <a class="code" href="a00125.htm">BaseSRF_3D</a>(impl) {} 
<a name="l00146"></a><a class="code" href="a00196.htm#b1">00146</a>       SRF_SolarMagneticDipole &amp;operator =( <span class="keyword">const</span> SRF_SolarMagneticDipole &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00147"></a><a class="code" href="a00196.htm#b2">00147</a>       <span class="keyword">virtual</span> ~SRF_SolarMagneticDipole() {} 
00148 };
00149 
00150 
<a name="l00151"></a><a class="code" href="a00196.htm#a1">00151</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_SolarMagneticDipole::isA( SRF_ClassType type )<span class="keyword"> const</span>
00152 <span class="keyword"></span>{
00153     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_SMD)
00154         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00155     <span class="keywordflow">else</span>
00156         <span class="keywordflow">return</span> BaseSRF_3D::isA(type);
00157 };
00158 
00159 
00161 <span class="keyword">typedef</span> SRF_SolarMagneticDipole <a class="code" href="a00196.htm">SRF_SMD</a>;
00162 
00163 
<a name="l00168"></a><a class="code" href="a00155.htm">00168</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_SolarMagneticDipole: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00169 {
00170 <span class="keyword">public</span>:
<a name="l00173"></a><a class="code" href="a00155.htm#a0">00173</a>     Coord3D_SolarMagneticDipole(SRF_SolarMagneticDipole *srf,
00174                                 SRM_Long_Float longitude = 0.0,
00175                                 SRM_Long_Float latitude = 0.0,
00176                                 SRM_Long_Float radius = 0.0 )
00177     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00178     {
00179         setComponentValues(longitude, latitude, radius);
00180     }
00181 
<a name="l00183"></a><a class="code" href="a00155.htm#a1">00183</a>     Coord3D_SolarMagneticDipole( <span class="keyword">const</span> Coord3D_SolarMagneticDipole &amp;coord )
00184     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00185     {
00186         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00187     }
00188 
<a name="l00194"></a><a class="code" href="a00155.htm#a2">00194</a>     <span class="keywordtype">void</span> copyTo( Coord3D_SolarMagneticDipole &amp;coord )<span class="keyword"> const</span>
00195 <span class="keyword">    </span>{
00196         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00197             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00198 
00199         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00200         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00201         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00202     }
00203 
<a name="l00207"></a><a class="code" href="a00155.htm#a3">00207</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_SolarMagneticDipole &amp;coord )<span class="keyword"> const</span>
00208 <span class="keyword">    </span>{
00209         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00210                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00211                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00212                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00213     }
00214 
<a name="l00217"></a><a class="code" href="a00155.htm#a4">00217</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float longitude, SRM_Long_Float latitude, SRM_Long_Float radius )
00218     {
00219         _values[0] = longitude;
00220         _values[1] = latitude;
00221         _values[2] = radius;
00222     }
00223 
<a name="l00226"></a><a class="code" href="a00155.htm#a5">00226</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_longitude()<span class="keyword"> const</span>
00227 <span class="keyword">    </span>{
00228         <span class="keywordflow">return</span> _values[0];
00229     }
00230 
<a name="l00233"></a><a class="code" href="a00155.htm#a6">00233</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude()<span class="keyword"> const</span>
00234 <span class="keyword">    </span>{
00235         <span class="keywordflow">return</span> _values[1];
00236     }
00237 
<a name="l00240"></a><a class="code" href="a00155.htm#a7">00240</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_radius()<span class="keyword"> const</span>
00241 <span class="keyword">    </span>{
00242         <span class="keywordflow">return</span> _values[2];
00243     }
00244 
<a name="l00247"></a><a class="code" href="a00155.htm#a8">00247</a>     <span class="keywordtype">void</span> set_longitude( SRM_Long_Float value )
00248     {
00249         _values[0] = value;
00250     }
00251 
<a name="l00254"></a><a class="code" href="a00155.htm#a9">00254</a>     <span class="keywordtype">void</span> set_latitude( SRM_Long_Float value )
00255     {
00256         _values[1] = value;
00257     }
00258 
<a name="l00261"></a><a class="code" href="a00155.htm#a10">00261</a>     <span class="keywordtype">void</span> set_radius( SRM_Long_Float value )
00262     {
00263         _values[2] = value;
00264     }
00265 
00268     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00269 
<a name="l00272"></a><a class="code" href="a00155.htm#a12">00272</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00273 <span class="keyword">    </span>{
00274         <span class="keywordflow">return</span> Coord::COORD_TYP_SMD;
00275     }
00276 
00279     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_SolarMagneticDipole &amp;rhs ) <span class="keyword">const</span>;
00280 
<a name="l00286"></a><a class="code" href="a00155.htm#a14">00286</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_SolarMagneticDipole &amp;rhs )<span class="keyword"> const</span>
00287 <span class="keyword">    </span>{
00288         <span class="keywordflow">return</span> ((*(SRF_SolarMagneticDipole*)(this-&gt;_srf)) == (*(SRF_SolarMagneticDipole*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00289     }
00290 
<a name="l00295"></a><a class="code" href="a00155.htm#a15">00295</a>     Coord3D_SolarMagneticDipole &amp;operator= ( <span class="keyword">const</span> Coord3D_SolarMagneticDipole &amp;rhs )
00296     {
00297         <span class="keywordflow">if</span>((*(SRF_SolarMagneticDipole*)(this-&gt;_srf)) == (*(SRF_SolarMagneticDipole*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00298         {
00299             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00300             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00301             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00302         }
00303         <span class="keywordflow">else</span>
00304             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00305                             <span class="stringliteral">"Coord3D_SolarMagneticDipole op=: incompatible rhs coordinate"</span>);
00306 
00307         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00308     }
00309 };
00310 
00311 
<a name="l00312"></a><a class="code" href="a00155.htm#a11">00312</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_SolarMagneticDipole::isA( Coord_ClassType type )<span class="keyword"> const</span>
00313 <span class="keyword"></span>{
00314     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SMD)
00315         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00316     <span class="keywordflow">else</span>
00317         <span class="keywordflow">return</span> Coord3D::isA(type);
00318 };
00319 
00320 
00322 <span class="keyword">typedef</span> Coord3D_SolarMagneticDipole <a class="code" href="a00155.htm">Coord3D_SMD</a>;
00323 
00324 } <span class="comment">// namespace srm</span>
00325 
00326 <span class="preprocessor">#endif // _SolarMagneticDipole_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
