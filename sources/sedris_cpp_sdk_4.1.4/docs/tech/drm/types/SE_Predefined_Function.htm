<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML lang="en">
<head>
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SE_Predefined_Function</title>
<link rel="stylesheet" href="../../../styles/SDK_SEDRIS.css" type="text/css">
</head>
<body>

<a name="Top"></a>

<div class="CenterDiv">
<table border="2" class="doc_set_header">
<tr><th>
<big><big>The SEDRIS Data Representation Model</big></big>
<br>
<!-- DRM spec. 4.1 -->
<font color="#ffffff">
APPENDIX C - Types
</font>
<br>
<font color="#ffffff">
SE_Predefined_Function
</font>
</th></tr>
</table></div>

<!-- SEDRIS C++ SDK Release 4.1.4 - July 1, 2011 -->

<PRE>
/*
 * REGISTERABLE ENUM: SE_Predefined_Function
 *
 *   Definitions for individual functions signify argument usage by
 *   labelling the argument with capital letters, such that
 *   A = first argument, B = second argument, and so on.
 */
</PRE><span class="Code">
typedef <a href="SE_Short_Integer.htm">SE_Short_Integer</a> SE_Predefined_Function;
</span>
<table>
<tr><th>Enumerant</th> <th>Definition</th> <th>Value</th></tr>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ADD">SE_PREDEFFN_ADD</a></td>
<td class="CFunction"><PRE>
 Definition: A + B

 This is a binary operator, for which the first of the ordered
 arguments is &quot;left&quot; of the operator and the second is &quot;right&quot;.
</PRE></td>
<td class="CFunction">1</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_DIVIDE">SE_PREDEFFN_DIVIDE</a></td>
<td class="CFunction"><PRE>
 Definition: A / B

 This is a binary operator, for which the first of the ordered
 arguments is &quot;left&quot; of the operator and the second is &quot;right&quot;.
</PRE></td>
<td class="CFunction">2</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_MODULO">SE_PREDEFFN_MODULO</a></td>
<td class="CFunction"><PRE>
 Definition: A % B

 This is a binary operator, for which the first of the ordered
 arguments is &quot;left&quot; of the operator and the second is &quot;right&quot;.
</PRE></td>
<td class="CFunction">3</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_MULTIPLY">SE_PREDEFFN_MULTIPLY</a></td>
<td class="CFunction"><PRE>
 Definition: A * B

 This is a binary operator, for which the first of the ordered
 arguments is &quot;left&quot; of the operator and the second is &quot;right&quot;.
</PRE></td>
<td class="CFunction">4</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_SUBTRACT">SE_PREDEFFN_SUBTRACT</a></td>
<td class="CFunction"><PRE>
 Definition: A - B

 This is a binary operator, for which the first of the ordered
 arguments is &quot;left&quot; of the operator and the second is &quot;right&quot;.
</PRE></td>
<td class="CFunction">5</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_COSINE">SE_PREDEFFN_COSINE</a></td>
<td class="CFunction"><PRE>
 Definition: cosine(A)
</PRE></td>
<td class="CFunction">6</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_SINE">SE_PREDEFFN_SINE</a></td>
<td class="CFunction"><PRE>
 Definition: sine(A)
</PRE></td>
<td class="CFunction">7</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_TANGENT">SE_PREDEFFN_TANGENT</a></td>
<td class="CFunction"><PRE>
 Definition: tangent(A)
</PRE></td>
<td class="CFunction">8</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ARCCOSINE">SE_PREDEFFN_ARCCOSINE</a></td>
<td class="CFunction"><PRE>
 Definition: arccosine(A)
</PRE></td>
<td class="CFunction">9</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ARCSINE">SE_PREDEFFN_ARCSINE</a></td>
<td class="CFunction"><PRE>
 Definition: arcsine(A)
</PRE></td>
<td class="CFunction">10</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ARCTANGENT">SE_PREDEFFN_ARCTANGENT</a></td>
<td class="CFunction"><PRE>
 Definition: arctangent(A)
</PRE></td>
<td class="CFunction">11</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ARCTANGENT2">SE_PREDEFFN_ARCTANGENT2</a></td>
<td class="CFunction"><PRE>
 Definition: The square of arctangent(A)
</PRE></td>
<td class="CFunction">12</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_HYPOTENUSE">SE_PREDEFFN_HYPOTENUSE</a></td>
<td class="CFunction"><PRE>
 Definition: hypotenuse(A, B)
</PRE></td>
<td class="CFunction">13</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_ABSOLUTE">SE_PREDEFFN_ABSOLUTE</a></td>
<td class="CFunction"><PRE>
 Definition: /A/ : absolute value of &quot;A&quot;
</PRE></td>
<td class="CFunction">14</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_EXPONENT">SE_PREDEFFN_EXPONENT</a></td>
<td class="CFunction"><PRE>
 e^A
</PRE></td>
<td class="CFunction">15</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_LN">SE_PREDEFFN_LN</a></td>
<td class="CFunction"><PRE>
 ln(A) : natural logarithm of &quot;A&quot;
</PRE></td>
<td class="CFunction">16</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_LOG">SE_PREDEFFN_LOG</a></td>
<td class="CFunction"><PRE>
 log(A, B) : log, base &quot;B&quot; of &quot;A&quot;
</PRE></td>
<td class="CFunction">17</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_POWER">SE_PREDEFFN_POWER</a></td>
<td class="CFunction"><PRE>
 Definition: A^B : &quot;A&quot; raised to the &quot;Bth&quot; power
</PRE></td>
<td class="CFunction">18</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_SQRT">SE_PREDEFFN_SQRT</a></td>
<td class="CFunction"><PRE>
 sqrt(A)
</PRE></td>
<td class="CFunction">19</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_MAXIMUM">SE_PREDEFFN_MAXIMUM</a></td>
<td class="CFunction"><PRE>
 if (A &gt; B) return A; else return B;
</PRE></td>
<td class="CFunction">20</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_MINIMUM">SE_PREDEFFN_MINIMUM</a></td>
<td class="CFunction"><PRE>
 if (A &lt; B) return A; else return B;
</PRE></td>
<td class="CFunction">21</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_NOT">SE_PREDEFFN_NOT</a></td>
<td class="CFunction"><PRE>
 Definition: Not (the logical operator)

 Symbol: !A, where A is the operand

 Return Type: Boolean

 This unary logical operator treats an operand with a value
 of zero (0) as FALSE, while an operand with a non-zero
 value is treated as TRUE.
</PRE></td>
<td class="CFunction">22</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_AND">SE_PREDEFFN_AND</a></td>
<td class="CFunction"><PRE>
 Definition: And (the logical operator)

 Symbol: A &amp;&amp; B, for operands A, B

 This binary logical operator treats its first ordered argument
 (A) as &quot;left&quot; of the operator, while the second (B) is &quot;right&quot;.
 An operand with a value of zero (0) is treated as FALSE, while
 an operand with a non-zero value is treated as TRUE.
</PRE></td>
<td class="CFunction">23</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_EQUAL">SE_PREDEFFN_EQUAL</a></td>
<td class="CFunction"><PRE>
 A == B
</PRE></td>
<td class="CFunction">24</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_GREATER_THAN">SE_PREDEFFN_GREATER_THAN</a></td>
<td class="CFunction"><PRE>
 A &gt; B
</PRE></td>
<td class="CFunction">25</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_GREATER_THAN_OR_EQUAL">SE_PREDEFFN_GREATER_THAN_OR_EQUAL</a></td>
<td class="CFunction"><PRE>
 A &gt;= B
</PRE></td>
<td class="CFunction">26</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_LESS_THAN">SE_PREDEFFN_LESS_THAN</a></td>
<td class="CFunction"><PRE>
 A &lt; B
</PRE></td>
<td class="CFunction">27</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_LESS_THAN_OR_EQUAL">SE_PREDEFFN_LESS_THAN_OR_EQUAL</a></td>
<td class="CFunction"><PRE>
 A &lt;= B
</PRE></td>
<td class="CFunction">28</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_NOT_EQUAL">SE_PREDEFFN_NOT_EQUAL</a></td>
<td class="CFunction"><PRE>
 A != B
</PRE></td>
<td class="CFunction">29</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_OR">SE_PREDEFFN_OR</a></td>
<td class="CFunction"><PRE>
 Definition: Or (the logical operator)

 Symbol: A || B, for operands A, B

 This binary logical operator treats its first ordered argument
 (A) as &quot;left&quot; of the operator, while the second (B) is &quot;right&quot;.
 An operand with a value of zero (0) is treated as FALSE, while
 an operand with a non-zero value is treated as TRUE.
</PRE></td>
<td class="CFunction">30</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_EXCLUSIVE_OR">SE_PREDEFFN_EXCLUSIVE_OR</a></td>
<td class="CFunction"><PRE>
 Definition: Exclusive Or (the logical operator)

 Symbol: A ?? B, for operands A, B

 This binary logical operator treats its first ordered argument
 (A) as &quot;left&quot; of the operator, while the second (B) is &quot;right&quot;.
 An operand with a value of zero (0) is treated as FALSE, while
 an operand with a non-zero value is treated as TRUE.
</PRE></td>
<td class="CFunction">31</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_IF">SE_PREDEFFN_IF</a></td>
<td class="CFunction"><PRE>
 Definition: if (A) return B; else return C

 Accepts exactly 3 arguments: A, B, and C.
</PRE></td>
<td class="CFunction">32</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_PI">SE_PREDEFFN_PI</a></td>
<td class="CFunction"><PRE>
 The mathematical constant PI
</PRE></td>
<td class="CFunction">33</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_SIMULATION_TIME">SE_PREDEFFN_SIMULATION_TIME</a></td>
<td class="CFunction"><PRE>
 Returns time, in floating point seconds, since simulation start.
</PRE></td>
<td class="CFunction">34</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_SIMULATION_UTIME">SE_PREDEFFN_SIMULATION_UTIME</a></td>
<td class="CFunction"><PRE>
 Returns time, in unsigned microseconds, since simulation start.
 The value is allowed to overflow and roll back to zero.
</PRE></td>
<td class="CFunction">35</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_REFERENCE_SURFACE_ELEVATION">SE_PREDEFFN_REFERENCE_SURFACE_ELEVATION</a></td>
<td class="CFunction"><PRE>
 Returns the height of the terrain at the point specified by the
 arguments.  Arguments are interpreted as coordinates within the currently
 scoped SRF defined by the current transmittal.
 Argument order should match the field order defined by &lt;Location 3D&gt;.
</PRE></td>
<td class="CFunction">36</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_CYCLE_TIME">SE_PREDEFFN_CYCLE_TIME</a></td>
<td class="CFunction"><PRE>
 Returns a cycling time value in seconds of the kind specified by the
 arguments. These arguments are:
 A - a trigger boolean to start the cycle(s)
 B - cycle length in seconds
 C - an &lt;Expression&gt; instance that returns time in seconds
 D - number of cycles to do before stopping
 E - cycle time at which to start
 F - cycle time at which to end
 G - Boolean specifying whether the cycle runs one way
     (start &gt; end, start &gt; end) or whether it reverses at the end
     (start &gt; end &gt; start)
</PRE></td>
<td class="CFunction">37</td>
</TR>
<tr><td class="CFunction"><a name="SE_PREDEFFN_TABLE_VALUE">SE_PREDEFFN_TABLE_VALUE</a></td>
<td class="CFunction"><PRE>
 The given &lt;Predefined Function&gt; instance PF in this case exists to
 provide a mechanism for a &lt;Property Table&gt; instance T to drive the
 &lt;Control Link&gt; instance that contains PF. This mechanism operates
 in the following manner.

 PF has a &lt;Property Table Reference&gt; instance PTR as a component,
 where PTR references the &lt;Property Table&gt; instance T that is to
 drive the target &lt;Control Link&gt; instance. The values shall be
 stored in cells with a &lt;Table Property Description&gt;, the meaning
 and value_type of which are appropriate for the target &lt;Control Link&gt;
 instance that is to be driven.

 PF returns the value referenced from T as the value that drives
 the target &lt;Control Link&gt; instance. PTR can itself be controlled
 using a &lt;Property Table Reference Control Link&gt; instance, allowing
 different values to be referenced from T.
</PRE></td>
<td class="CFunction">38</td>
</TR>
</table>

<br>
<hr>
<br>
<strong>Prev:</strong> <a href="SE_Predef_Func_Structure.htm">SE_Predef_Func_Structure</a>.
<strong>Next:</strong> <a href="SE_Present_In.htm">SE_Present_In</a>.
<br>
<hr>
<br>
<font color="#FF0000">Return to:</font>
<strong><a href="#Top">Top of this Page</a>,
<a href="index.htm">Type Index</a></strong>
<br><br>
<table border="2" class="doc_set_header">
<tr><td>
<table border="0" class="doc_set_header">
<tr>
<td align="left" class="doc_set_footer">
Last updated: July 1, 2011
</td>
<td align="right" class="doc_set_footer">
Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;

</td></tr>
</table>
</td></tr>
</table>
</body>
</html>
