<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>SEDRIS Transmittal Access C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#FFFFFF">

<!-- Generated by Doxygen 1.4.7-20061004 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.htm"><span>Modules</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.htm"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="a00635.htm">sedris</a>::<a class="el" href="a00313.htm">seObject</a></div>
<h1>sedris::seObject Class Reference</h1><!-- doxytag: class="sedris::seObject" --><a class="el" href="a00313.htm">seObject</a> is the generalized instanced DRM object.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;seObject.h&gt;</code>
<p>
Inherited by <a class="el" href="a00014.htm">sedris::seDRMBase</a>.
<p>
Inheritance diagram for sedris::seObject:<p><center><img src="a01582.png" border="0" usemap="#a01583" alt="Inheritance graph"></center>
<map name="a01583">
<area href="a00014.htm" shape="rect" coords="8,82,146,109" alt="">
</map>
<center><font size="2">[<a target="top" href="graph_legend.htm">legend</a>]</font></center><a href="a01584.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="20336a5174f5057ddfa9429ea811d75f"></a><!-- doxytag: member="sedris::seObject::seObject" ref="20336a5174f5057ddfa9429ea811d75f" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#20336a5174f5057ddfa9429ea811d75f">seObject</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor, low overhead. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#1a03a3f3f8587a872be64df4e632553d">seObject</a> (const <a class="el" href="a00313.htm">seObject</a> &amp;other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor, same as <a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a>.  <a href="#1a03a3f3f8587a872be64df4e632553d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7d639d617d348f4deeed92eb5eceee99"></a><!-- doxytag: member="sedris::seObject::~seObject" ref="7d639d617d348f4deeed92eb5eceee99" args="()" -->
virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#7d639d617d348f4deeed92eb5eceee99">~seObject</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor, releases the DRM object handle. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#3f15d1e284c81a44f76f7c1e183e821c">operator=</a> (const <a class="el" href="a00313.htm">seObject</a> &amp;other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy operator, same as <a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a>.  <a href="#3f15d1e284c81a44f76f7c1e183e821c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">isValid</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if this object handle is valid.  <a href="#0ee3c5261c56864e0ae9a93bee79035b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA</a> (<a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> type) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if this object is of the given type.  <a href="#b5a021bbac2925f8cf6dbe31f343011a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b890af95c12ace2196d2b2f7c0e45eef"></a><!-- doxytag: member="sedris::seObject::isModified" ref="b890af95c12ace2196d2b2f7c0e45eef" args="() const " -->
virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#b890af95c12ace2196d2b2f7c0e45eef">isModified</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has been modified (fields changed or components/associates added). <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#a671bd19db756b2f9fefd30edd9330c2">isShared</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has more than 1 parent.  <a href="#a671bd19db756b2f9fefd30edd9330c2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#30d1f7164737cfd00fd6c02b88a192f5">print</a> (unsigned short level=0, FILE *file=NULL)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Prints an object's data.  <a href="#30d1f7164737cfd00fd6c02b88a192f5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the DRM class type of this object Note that comparing for equality with <a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass()</a> is not the same as using <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a>, since <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a> takes the DRM object class hierarchy into account.  <a href="#256b847c72e944db1101a06246581594"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#015a8482336704012a36557ddaccc1cb">getDRMClassName</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the DRM class in short string underscore format.  <a href="#015a8482336704012a36557ddaccc1cb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#43a33f605de53a73da342d666d22b13c">getFields</a> (const <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> **flds) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the fields using the DRM fields structure.  <a href="#43a33f605de53a73da342d666d22b13c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#82eafef6022dcdc6b9d99ba2e728a0ba">setFields</a> (const <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> *flds)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the fields using the DRM fields structure.  <a href="#82eafef6022dcdc6b9d99ba2e728a0ba"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#c6f350de9364ea7693fb18035e235aa8">hasComponentsOrAssociates</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has any component or associate objects.  <a href="#c6f350de9364ea7693fb18035e235aa8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#3e7e14d31ba044ce311b3c67639f91ce">hasComponents</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has any components.  <a href="#3e7e14d31ba044ce311b3c67639f91ce"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#de3d5ce2b737995d67002bcf8482c2cc">hasAssociates</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has any associates.  <a href="#de3d5ce2b737995d67002bcf8482c2cc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#65ad20c1981427ad50681a5100c48719">hasAggregates</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object has any aggregates.  <a href="#65ad20c1981427ad50681a5100c48719"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#744bcaa72c896f0e71d1192150334164">getRelationCounts</a> (unsigned int *comp_count, unsigned int *aggr_count=NULL, unsigned int *assoc_count=NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the counts for the number of components, number of aggregates, and number of associates.  <a href="#744bcaa72c896f0e71d1192150334164"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator</a> (<a class="el" href="a00312.htm">seIterator</a> &amp;iter, <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> filter=SE_CLS_DRM_NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns an initialized component iterator.  <a href="#f7562705b4fc45bf2a638b60291d3c01"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#29b5241e587563c862b3182e6ca9c3ee">getAssociateIterator</a> (<a class="el" href="a00312.htm">seIterator</a> &amp;iter, <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> filter=SE_CLS_DRM_NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns an initialized associate iterator.  <a href="#29b5241e587563c862b3182e6ca9c3ee"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#c45a6659b07b7dd86da36c54385303c4">getAggregateIterator</a> (<a class="el" href="a00312.htm">seIterator</a> &amp;iter, <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> filter=SE_CLS_DRM_NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns an initialized aggregate iterator.  <a href="#c45a6659b07b7dd86da36c54385303c4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#e09d86f4fb5ebd50c28571f98d545062">getComponent</a> (<a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> type, <a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first component and link objects of a specific class.  <a href="#e09d86f4fb5ebd50c28571f98d545062"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#cc082b9ac0f67d7731448105800a517c">getComponent</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first component and link objects based on derived class type.  <a href="#cc082b9ac0f67d7731448105800a517c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#7604bf3502cf321e7c7a846828714bd5">getAssociate</a> (<a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> type, <a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first associate and link objects of a specific class.  <a href="#7604bf3502cf321e7c7a846828714bd5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#962a722b7ad3204fcbce437196473f18">getAssociate</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first associate and link objects based on derived class type.  <a href="#962a722b7ad3204fcbce437196473f18"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#9ce1b07c736e2d68d720204aaec2b18d">getAggregate</a> (<a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> type, <a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first aggregate and link objects of a specific class.  <a href="#9ce1b07c736e2d68d720204aaec2b18d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#9bfb936e1e153c0266b770ad5a2a956e">getAggregate</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the first aggregate and link objects based on derived class type.  <a href="#9bfb936e1e153c0266b770ad5a2a956e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#f8d5b2cc8d75a601146ba15f8e052f46">addComponent</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add a component and optional link objects.  <a href="#f8d5b2cc8d75a601146ba15f8e052f46"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#c1bbcf3d03dd83915ca296f75be57283">addAssociate</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add an associate relationship with optional link object.  <a href="#c1bbcf3d03dd83915ca296f75be57283"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#84b9b3cb661a7483824dc7a6fbf406af">removeComponent</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes a component relationship.  <a href="#84b9b3cb661a7483824dc7a6fbf406af"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#eca5df8447d56da4c4dc1d57495ec9d9">removeAssociate</a> (<a class="el" href="a00313.htm">seObject</a> &amp;obj, <a class="el" href="a00313.htm">seObject</a> &amp;link_obj=<a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes an associate relationship.  <a href="#eca5df8447d56da4c4dc1d57495ec9d9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#a3eefb98306ddc9dee3630ab8d90e591">getID</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the object identifier as a string.  <a href="#a3eefb98306ddc9dee3630ab8d90e591"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object is published.  <a href="#33fe646460c174526b02ab85731a79d0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#4ab4f8fb03e7849e83fa3ddab0c8c5f3">publish</a> (const char *label)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Publishes the object for ITR referencing from other transmittals.  <a href="#4ab4f8fb03e7849e83fa3ddab0c8c5f3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#b0c0edbc028c60d5e542a097e62b6bb4">unpublish</a> (const char *label=NULL)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes the object from being published under the given label.  <a href="#b0c0edbc028c60d5e542a097e62b6bb4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#6bec9e7627a64209c82a37546aeacf18">getPublishedLabelCount</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If this object is published (see <a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a>), returns the number of labels that were used to publish it.  <a href="#6bec9e7627a64209c82a37546aeacf18"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#0938dc41e1ee29d5c3d851b2612369eb">getPublishedLabel</a> (unsigned int index=0) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If this object is published (see <a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a>), returns the indexed label that was used to publish it.  <a href="#0938dc41e1ee29d5c3d851b2612369eb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#dc1067c47bd91bff1830c5782eed48f2">resolve</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If this object is unresolved, attempt to resolve it.  <a href="#dc1067c47bd91bff1830c5782eed48f2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if this object is resolved, or false if it is unresolved.  <a href="#fb8d8d28e3887352fddc3bd22f943fe0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#46b80073b7b20da7a1b1964f3795d772">getUnresolvedTransmittalURN</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If this object is an unresolved object, returns the URN of the transmittal being referenced.  <a href="#46b80073b7b20da7a1b1964f3795d772"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#bb520224dd92784d93da5358f4ba0538">getUnresolvedObjectLabel</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If this object is an unresolved object, returns the label of the published object being referenced in the referenced transmittal.  <a href="#bb520224dd92784d93da5358f4ba0538"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#a1f0a193b817504a9405291a4855dbb8">setUserData</a> (void *data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a pointer to user data.  <a href="#a1f0a193b817504a9405291a4855dbb8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#2084c7501b7d8bdb639982278f630af2">getUserData</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current value of the user data pointer for the given object.  <a href="#2084c7501b7d8bdb639982278f630af2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo</a> (<a class="el" href="a00313.htm">seObject</a> &amp;other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clones the DRM object handle into another object.  <a href="#e6040b1ff3f758aac731e95e724f82c8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#7d9349c169f5eccef83edcadeb97c8e1">isSameAs</a> (const <a class="el" href="a00313.htm">seObject</a> &amp;other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if the object passed in is a clone of this one (i.e.  <a href="#7d9349c169f5eccef83edcadeb97c8e1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#d94296aed1233a59864d077ccc134aef">release</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Releases the handle to the transmittal DRM object.  <a href="#d94296aed1233a59864d077ccc134aef"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cb801042b097ad45a5bbb951047a492b"></a><!-- doxytag: member="sedris::seObject::isInTransmittal" ref="cb801042b097ad45a5bbb951047a492b" args="(const seTransmittal &amp;xmtal) const " -->
virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#cb801042b097ad45a5bbb951047a492b">isInTransmittal</a> (const <a class="el" href="a00315.htm">seTransmittal</a> &amp;xmtal) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if this object is in the transmittal passed in. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5caf74a656ba201d0dbac814501d2d7d"></a><!-- doxytag: member="sedris::seObject::getTransmittal" ref="5caf74a656ba201d0dbac814501d2d7d" args="(seTransmittal &amp;xmtal) const " -->
virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#5caf74a656ba201d0dbac814501d2d7d">getTransmittal</a> (<a class="el" href="a00315.htm">seTransmittal</a> &amp;xmtal) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the transmittal this object belongs to. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#7da1d79d8a66656ffe652e4fa3923ffc">getClassType</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the DRM class type this object can reference.  <a href="#7da1d79d8a66656ffe652e4fa3923ffc"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="db4d6576c2e75f62859d04693ae6fe81"></a><!-- doxytag: member="sedris::seObject::seObjectNull" ref="db4d6576c2e75f62859d04693ae6fe81" args="" -->
static <a class="el" href="a00313.htm">seObject</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Null <a class="el" href="a00313.htm">seObject</a> to be used as default NULL parameter. <br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00313.htm#d77b0cbddf575966992bff95e245f36b">getWritableFields</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a pointer to fields that can be used to update the fields data, used in seDRMBase-derived classes.  <a href="#d77b0cbddf575966992bff95e245f36b"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="a00313.htm">seObject</a> is the generalized instanced DRM object. 
<p>
<a class="el" href="a00313.htm">seObject</a> encapsulates access to transmittal DRM objects. Note that more than one <a class="el" href="a00313.htm">seObject</a> instance may point to the same transmittal DRM object.<p>
Access to an object's related objects (such as components, associates, and aggregates) is through methods that return iterators (see for example the <a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator()</a> method and the <a class="el" href="a00312.htm">seIterator</a> class), or through direct methods that can return related objects of a specific DRM class.<p>
Object fields can be accessed through the the seDRMBase-derived classes which provide methods matching the actual field names and signatures (the preferred method), or through the general <a class="el" href="a00313.htm#43a33f605de53a73da342d666d22b13c">getFields()</a> method which returns a pointer to a C-style fields structure.<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>All of the methods in this class that depend on a valid object throw an <a class="el" href="a00307.htm">seException</a> if the object being accessed is invalid, or other error occurs (e.g. memory, file access, invalid DRM field, etc.). <p>
An instance of this class can refer to a resolved or an unresolved object (see <a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved()</a> and <a class="el" href="a00313.htm#dc1067c47bd91bff1830c5782eed48f2">resolve()</a>). However, you can only retrieve fields and object relations from resolved objects, so unresolved <a class="el" href="a00313.htm">seObject</a> instances will throw an exception if one of these operations is attempted. <p>
This class and its derived classes are safe for use in STL containers. </dd></dl>
<dl class="author" compact><dt><b>Author:</b></dt><dd>Warren Macchi (Accent Geographic) </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00312.htm">seIterator</a>, <a class="el" href="a00315.htm">seTransmittal</a> </dd></dl>

<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="1a03a3f3f8587a872be64df4e632553d"></a><!-- doxytag: member="sedris::seObject::seObject" ref="1a03a3f3f8587a872be64df4e632553d" args="(const seObject &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sedris::seObject::seObject           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor, same as <a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a>. 
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a> </dd></dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="3f15d1e284c81a44f76f7c1e183e821c"></a><!-- doxytag: member="sedris::seObject::operator=" ref="3f15d1e284c81a44f76f7c1e183e821c" args="(const seObject &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="a00313.htm">seObject</a>&amp; sedris::seObject::operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy operator, same as <a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a>. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>This operator only makes one <a class="el" href="a00313.htm">seObject</a> handle point to the same transmittal object as another handle. This method is NOT used to copy field data. See <a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a> for more details. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#e6040b1ff3f758aac731e95e724f82c8">cloneTo()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="0ee3c5261c56864e0ae9a93bee79035b"></a><!-- doxytag: member="sedris::seObject::isValid" ref="0ee3c5261c56864e0ae9a93bee79035b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isValid           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if this object handle is valid. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>Object handles can remain valid even after the transmittal they belong to is closed. However, minimal operations can be performed when the transmittal is closed. </dd></dl>

</div>
</div><p>
<a class="anchor" name="b5a021bbac2925f8cf6dbe31f343011a"></a><!-- doxytag: member="sedris::seObject::isA" ref="b5a021bbac2925f8cf6dbe31f343011a" args="(SE_DRM_Class type) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isA           </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if this object is of the given type. 
<p>
This method checks for super-classes. That is, if this object is a &lt;Vertex&gt; object, then isA(SE_CLS_DRM_BASE_VERTEX) will return true. Also, if you are holding a handle to an abstract class, you can use this method to see if it is of a concrete class. For example: <div class="fragment"><pre class="fragment">            <span class="keywordflow">if</span> (baseVertex.isA(SE_CLS_DRM_VERTEX))
            {
                ... process vertex object
            }
</pre></div> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>in: the DRM class type to check against </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a671bd19db756b2f9fefd30edd9330c2"></a><!-- doxytag: member="sedris::seObject::isShared" ref="a671bd19db756b2f9fefd30edd9330c2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isShared           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object has more than 1 parent. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>An object can also be shared by association, but since associations can be one-way this method is unable to perform this check. </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if object is being shared </dd></dl>

</div>
</div><p>
<a class="anchor" name="30d1f7164737cfd00fd6c02b88a192f5"></a><!-- doxytag: member="sedris::seObject::print" ref="30d1f7164737cfd00fd6c02b88a192f5" args="(unsigned short level=0, FILE *file=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::print           </td>
          <td>(</td>
          <td class="paramtype">unsigned short&nbsp;</td>
          <td class="paramname"> <em>level</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&nbsp;</td>
          <td class="paramname"> <em>file</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prints an object's data. 
<p>
Use this method to print the type and fields of an object to the screen or a file. <div class="fragment"><pre class="fragment">            <a class="code" href="a00313.htm#20336a5174f5057ddfa9429ea811d75f">seObject</a> obj;
            ...
            obj.print();
</pre></div> <dl class="note" compact><dt><b>Note:</b></dt><dd>See the DRM functions SE_PrintDRMClass() and SE_PrintFields() for more information on customizing your own printing. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>level</em>&nbsp;</td><td>in (optional): indentation level, 2 spaces per level </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>file</em>&nbsp;</td><td>in (optional): output file pointer </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="256b847c72e944db1101a06246581594"></a><!-- doxytag: member="sedris::seObject::getDRMClass" ref="256b847c72e944db1101a06246581594" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> sedris::seObject::getDRMClass           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the DRM class type of this object Note that comparing for equality with <a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass()</a> is not the same as using <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a>, since <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a> takes the DRM object class hierarchy into account. 
<p>
For example, if this object is a &lt;Union Of Geometry Hierarchy&gt;, then isA(SE_CLS_DRM_UNION_OF_GEOMETRY) will return true, but the comparison <a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass()</a> == SE_CLS_DRM_UNION_OF_GEOMETRY will return false. 
</div>
</div><p>
<a class="anchor" name="015a8482336704012a36557ddaccc1cb"></a><!-- doxytag: member="sedris::seObject::getDRMClassName" ref="015a8482336704012a36557ddaccc1cb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* sedris::seObject::getDRMClassName           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the DRM class in short string underscore format. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Pointers to string memory are temporary, and should not be stored by the user. If you need to store the pointed-to string, copy the string data to your own memory space (for example into a std::string). </dd></dl>

</div>
</div><p>
<a class="anchor" name="43a33f605de53a73da342d666d22b13c"></a><!-- doxytag: member="sedris::seObject::getFields" ref="43a33f605de53a73da342d666d22b13c" args="(const SE_DRM_Class_Fields **flds) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::getFields           </td>
          <td>(</td>
          <td class="paramtype">const <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> **&nbsp;</td>
          <td class="paramname"> <em>flds</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the fields using the DRM fields structure. 
<p>
Retrieves a pointer to the field data of an object. The C-style fields data structure is a union of all the different field structures from all the different classes. This all-inclusive union and the structures that compose it are defined in the "sedris.h" file.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>The pointer returned by the API is only valid for the life time of this class instance. <p>
Because some of the fields contained in the union portion of the <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> structure are pointers to dynamically allocated memory, it is HIGHLY INADVISABLE to use a member-wise structure copy in order to duplicate the <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> structure. In order to reliably duplicate this data, developers should use the SE_CloneFields() DRM function. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>flds</em>&nbsp;</td><td>in/out: the fields of the object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="82eafef6022dcdc6b9d99ba2e728a0ba"></a><!-- doxytag: member="sedris::seObject::setFields" ref="82eafef6022dcdc6b9d99ba2e728a0ba" args="(const SE_DRM_Class_Fields *flds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::setFields           </td>
          <td>(</td>
          <td class="paramtype">const <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a> *&nbsp;</td>
          <td class="paramname"> <em>flds</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the fields using the DRM fields structure. 
<p>
Used to modify the fields of a given object. <dl class="note" compact><dt><b>Note:</b></dt><dd>The pointed-to data passed in to this method is copied by the API. Hence, after this method returns, the user can free or change the data as needed. </dd></dl>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Updating fields may have implications on the efficiency of the underlying implementation if overall size of the field data (and the separately allocated sub-structures) is larger than the previous values. For example, if the fields include an <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_String.htm">SE_String</a> type, and the length of the string changes, there may be implications on the efficiency of the underlying API implementation. Hence, it is recommended that this method be called at most once for each object. <p>
The transmittal this object belongs to must be editable for this operation to succeed. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#43a33f605de53a73da342d666d22b13c">getFields()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>flds</em>&nbsp;</td><td>in: the new fields of the object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="c6f350de9364ea7693fb18035e235aa8"></a><!-- doxytag: member="sedris::seObject::hasComponentsOrAssociates" ref="c6f350de9364ea7693fb18035e235aa8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::hasComponentsOrAssociates           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object has any component or associate objects. 
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#3e7e14d31ba044ce311b3c67639f91ce">hasComponents()</a>, <a class="el" href="a00313.htm#de3d5ce2b737995d67002bcf8482c2cc">hasAssociates()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="3e7e14d31ba044ce311b3c67639f91ce"></a><!-- doxytag: member="sedris::seObject::hasComponents" ref="3e7e14d31ba044ce311b3c67639f91ce" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::hasComponents           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object has any components. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>This method does not consider DRM inheritance. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#c6f350de9364ea7693fb18035e235aa8">hasComponentsOrAssociates()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="de3d5ce2b737995d67002bcf8482c2cc"></a><!-- doxytag: member="sedris::seObject::hasAssociates" ref="de3d5ce2b737995d67002bcf8482c2cc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::hasAssociates           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object has any associates. 
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#c6f350de9364ea7693fb18035e235aa8">hasComponentsOrAssociates()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="65ad20c1981427ad50681a5100c48719"></a><!-- doxytag: member="sedris::seObject::hasAggregates" ref="65ad20c1981427ad50681a5100c48719" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::hasAggregates           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object has any aggregates. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>This method can only check for DRM objects for which the aggregates can be found (that is, there is a two-way relationship between the component and its aggregate). </dd></dl>

</div>
</div><p>
<a class="anchor" name="744bcaa72c896f0e71d1192150334164"></a><!-- doxytag: member="sedris::seObject::getRelationCounts" ref="744bcaa72c896f0e71d1192150334164" args="(unsigned int *comp_count, unsigned int *aggr_count=NULL, unsigned int *assoc_count=NULL) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::getRelationCounts           </td>
          <td>(</td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>comp_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>aggr_count</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>assoc_count</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the counts for the number of components, number of aggregates, and number of associates. 
<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>Any parameter can be NULL if its count is not needed. <p>
ITR references are always included in the counts. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>comp_count</em>&nbsp;</td><td>in/out: a pointer to a variable in the user's memory space where the component count will be stored </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>aggr_count</em>&nbsp;</td><td>in/out (optional): a pointer to a variable in the user's memory space where the aggregate count will be stored </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>assoc_count</em>&nbsp;</td><td>in/out (optional): a pointer to a variable in the user's memory space where the associate count will be stored </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="f7562705b4fc45bf2a638b60291d3c01"></a><!-- doxytag: member="sedris::seObject::getComponentIterator" ref="f7562705b4fc45bf2a638b60291d3c01" args="(seIterator &amp;iter, SE_DRM_Class filter=SE_CLS_DRM_NULL) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::getComponentIterator           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00312.htm">seIterator</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>iter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>filter</em> = <code>SE_CLS_DRM_NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns an initialized component iterator. 
<p>
An iterator allows you to efficiently traverse the DRM object hierarchy in a transmittal. The optional <em>filter</em> parameter restricts the returned set to a specific DRM class (or base class).<p>
The following code sample illustrates the use of an iterator to cycle through all the components of an object. Note that the code is valid even if the object doesn't have any components. <div class="fragment"><pre class="fragment">            seIterator iter;
            <a class="code" href="a00313.htm#20336a5174f5057ddfa9429ea811d75f">seObject</a> comp_obj, link_obj;

            some_obj.getComponentIterator( iter );
            <span class="keywordflow">while</span> ( iter.getNext( comp_obj, link_obj ) )
            {
                ... use comp_obj and link_obj as needed
            }
</pre></div><p>
The following code sample illustrates the use of an iterator to cycle through all the components of an object for components of a specific type. Note that the code is valid even if the object doesn't have any components. <div class="fragment"><pre class="fragment">            seIterator iter;
            seDRMClassificationRelatedGeometry classif_geom;
            seseDRMClassificationData link_classif;

            some_obj.getComponentIterator( iter,
                                SE_CLS_DRM_CLASSIFICATION_RELATED_GEOMETRY );
            <span class="keywordflow">while</span> ( iter.getNext( classif_geom, link_classif ) )
            {
                ... process as needed, <span class="keywordflow">for</span> example
                <span class="keywordflow">if</span> ( link_classif.get_tag() == ECC_TREE )
                {
                   ...
                } ....
            }
</pre></div><p>
The component iterator initialized by this method traverses over the list of component objects that match the specified filter condition. If the filter specified is not SE_CLS_DRM_NULL, then all objects returned by the iterator will pass an <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">seObject::isA()</a> test with that filter type. <dl class="note" compact><dt><b>Note:</b></dt><dd>The returned iterator is always valid, even when no objects will be returned (a valid empty iterator). Hence, the code samples shown above will always behave correctly. <p>
The returned iterator only returns direct components. For an example of creating an infinite depth iterator see <a class="el" href="a00314.htm">seSearchIterator</a>. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#e09d86f4fb5ebd50c28571f98d545062">getComponent()</a>, <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a>, <a class="el" href="a00312.htm">seIterator</a>, <a class="el" href="a00312.htm#6cba602f18db5316be62c25a295eb080">seIterator::getNext()</a>, <a class="el" href="a00312.htm#f5655b2223144bf8d7c61c4017e8d1e6">seIterator::getCount()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>iter</em>&nbsp;</td><td>in/out: a handle to store the iterator </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>filter</em>&nbsp;</td><td>in (optional): a DRM class to filter the result set </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="29b5241e587563c862b3182e6ca9c3ee"></a><!-- doxytag: member="sedris::seObject::getAssociateIterator" ref="29b5241e587563c862b3182e6ca9c3ee" args="(seIterator &amp;iter, SE_DRM_Class filter=SE_CLS_DRM_NULL) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::getAssociateIterator           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00312.htm">seIterator</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>iter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>filter</em> = <code>SE_CLS_DRM_NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns an initialized associate iterator. 
<p>
See <a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator()</a> for more details on using the iterator. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator()</a>, <a class="el" href="a00313.htm#7604bf3502cf321e7c7a846828714bd5">getAssociate()</a>, <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a>, <a class="el" href="a00312.htm">seIterator</a>, <a class="el" href="a00312.htm#6cba602f18db5316be62c25a295eb080">seIterator::getNext()</a>, <a class="el" href="a00312.htm#f5655b2223144bf8d7c61c4017e8d1e6">seIterator::getCount()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="c45a6659b07b7dd86da36c54385303c4"></a><!-- doxytag: member="sedris::seObject::getAggregateIterator" ref="c45a6659b07b7dd86da36c54385303c4" args="(seIterator &amp;iter, SE_DRM_Class filter=SE_CLS_DRM_NULL) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::getAggregateIterator           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00312.htm">seIterator</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>iter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>filter</em> = <code>SE_CLS_DRM_NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns an initialized aggregate iterator. 
<p>
See <a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator()</a> for more details on using the iterator. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#f7562705b4fc45bf2a638b60291d3c01">getComponentIterator()</a>, <a class="el" href="a00313.htm#9ce1b07c736e2d68d720204aaec2b18d">getAggregate()</a>, <a class="el" href="a00313.htm#b5a021bbac2925f8cf6dbe31f343011a">isA()</a>, <a class="el" href="a00312.htm">seIterator</a>, <a class="el" href="a00312.htm#6cba602f18db5316be62c25a295eb080">seIterator::getNext()</a>, <a class="el" href="a00312.htm#f5655b2223144bf8d7c61c4017e8d1e6">seIterator::getCount()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="e09d86f4fb5ebd50c28571f98d545062"></a><!-- doxytag: member="sedris::seObject::getComponent" ref="e09d86f4fb5ebd50c28571f98d545062" args="(SE_DRM_Class type, seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getComponent           </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first component and link objects of a specific class. 
<p>
This is a 'short form, 1-shot' version that does not require the allocation of an iterator. If you don't require retrieval of a large number of objects, this method is typically more efficient than creating an iterator. <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several components, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>in: component type wanted (can be SE_CLS_DRM_NULL to get the first object no matter its type) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the component object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the component type was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="cc082b9ac0f67d7731448105800a517c"></a><!-- doxytag: member="sedris::seObject::getComponent" ref="cc082b9ac0f67d7731448105800a517c" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getComponent           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first component and link objects based on derived class type. 
<p>
This is a 'short form, 1-shot' version that does not require the allocation of an iterator. If you don't require retrieval of a large number of objects, this method is typically more efficient than creating an iterator.<p>
This convenience method can be used to obtain a component of a specific type when using the seDRMBase-derived classes, since each class knows its own type. For example, it is simpler to write: <div class="fragment"><pre class="fragment">            seDRMArc arc;

            <span class="keywordflow">if</span> (some_obj.getComponent(arc)) {
                ... Arc object found
            }
</pre></div> instead of: <div class="fragment"><pre class="fragment">            seDRMArc arc;

            <span class="keywordflow">if</span> (some_obj.getComponent(SE_CLS_DRM_ARC, arc)) {
                ... Arc object found
            }
</pre></div> <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several components, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the component object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the component type was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="7604bf3502cf321e7c7a846828714bd5"></a><!-- doxytag: member="sedris::seObject::getAssociate" ref="7604bf3502cf321e7c7a846828714bd5" args="(SE_DRM_Class type, seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getAssociate           </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first associate and link objects of a specific class. 
<p>
See getComponent(SE_DRM_Class, seObject, seObject) for more details. <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several associates, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
Only objects at the 'to' end of a one-way association, or at either end of a two-way association, will be returned by this function. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>in: associate type wanted (can be SE_CLS_DRM_NULL to get the first object no matter its type) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the associate object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the associate type was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="962a722b7ad3204fcbce437196473f18"></a><!-- doxytag: member="sedris::seObject::getAssociate" ref="962a722b7ad3204fcbce437196473f18" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getAssociate           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first associate and link objects based on derived class type. 
<p>
See getComponent(seObject, seObject) for more details. <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several associates, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
Only objects at the 'to' end of a one-way association, or at either end of a two-way association, will be returned by this function. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the associate object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the associate type was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="9ce1b07c736e2d68d720204aaec2b18d"></a><!-- doxytag: member="sedris::seObject::getAggregate" ref="9ce1b07c736e2d68d720204aaec2b18d" args="(SE_DRM_Class type, seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getAggregate           </td>
          <td>(</td>
          <td class="paramtype"><a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a>&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first aggregate and link objects of a specific class. 
<p>
See getComponent(SE_DRM_Class, seObject, seObject) for more details. <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several aggregates, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
Only aggregates that include the object via a two-way aggregation will be returned by this function. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>in: aggregate type wanted (can be SE_CLS_DRM_NULL to get the first object no matter its type) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the aggregate object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if an aggregate was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="9bfb936e1e153c0266b770ad5a2a956e"></a><!-- doxytag: member="sedris::seObject::getAggregate" ref="9bfb936e1e153c0266b770ad5a2a956e" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::getAggregate           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the first aggregate and link objects based on derived class type. 
<p>
See getComponent(seObject, seObject) for more details. <dl class="note" compact><dt><b>Note:</b></dt><dd>To get several aggregates, an <a class="el" href="a00312.htm">seIterator</a> may be more efficient. <p>
Only aggregates that include the object via a two-way aggregation will be returned by this function. <p>
If there is no link object associated with the object returned, the <em>link_obj</em> parameter is set to an invalid object handle (i.e. you can use <a class="el" href="a00313.htm#0ee3c5261c56864e0ae9a93bee79035b">seObject::isValid()</a> to check for its validity). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if an error occurs, but not if the object type was not found </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>out: the aggregate object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>out (optional): the link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if an aggregate was found </dd></dl>

</div>
</div><p>
<a class="anchor" name="f8d5b2cc8d75a601146ba15f8e052f46"></a><!-- doxytag: member="sedris::seObject::addComponent" ref="f8d5b2cc8d75a601146ba15f8e052f46" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::addComponent           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a component and optional link objects. 
<p>
Adding components to an object creates an object hierarchy in the transmittal. The relationship is executed provided that the following criteria are met: <ol>
<li>
either this object or <em>obj</em> shall be a resolved object, or both shall be resolved objects. If both objects are resolved, then <em>link_obj</em> (if provided) shall be a resolved object; otherwise, <em>link_obj</em> may be unresolved. An unresolved object is a reference to an object in another transmittal (see <a class="el" href="a00316.htm#0fe0f6e5c7cf00baa237293598e5b2c4">seWorkspace::createUnresolvedObject()</a>). </li>
<li>
the transmittal this object belongs to has been explicitly opened either in create or update mode (see <a class="el" href="a00316.htm#b636e86386404715cd6b56f226fd87aa">seWorkspace::openTransmittalByFile()</a>). </li>
</ol>
<p>
If the relationship is defined as bidirectional, this method adds the inverse relationship.<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>Relationships between objects in different transmittals are NOT implicitly bidirectional so, to make the corresponding relationship from the object in the other transmittal, you will have to perform the parallel operations in the other transmittal.</dd></dl>
<div class="fragment"><pre class="fragment">            ...
            seDRMVertex vertex;

            xmtal.createObject(vertex);
            polygon.addComponent(vertex);
</pre></div> <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#c1bbcf3d03dd83915ca296f75be57283">addAssociate()</a>, <a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>in: a component object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>in (optional): a link object </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if succesful </dd></dl>

</div>
</div><p>
<a class="anchor" name="c1bbcf3d03dd83915ca296f75be57283"></a><!-- doxytag: member="sedris::seObject::addAssociate" ref="c1bbcf3d03dd83915ca296f75be57283" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::addAssociate           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add an associate relationship with optional link object. 
<p>
The relationship is executed provided that the following criteria are met: <ol>
<li>
either this object or <em>obj</em> shall be a resolved object, or both shall be resolved objects. If both objects are resolved, then <em>link_obj</em> (if provided) shall be a resolved object; otherwise, <em>link_obj</em> may be unresolved. An unresolved object is a reference to an object in another transmittal (see seTransmittal::createUnresolvedObject()). </li>
<li>
the transmittal this object belongs to has been explicitly opened either in create or update mode (see <a class="el" href="a00316.htm#b636e86386404715cd6b56f226fd87aa">seWorkspace::openTransmittalByFile()</a>). </li>
</ol>
<p>
If the relationship is defined as bidirectional, this method adds the inverse relationship.<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>Relationships between objects in different transmittals are NOT implicitly bidirectional so, to make the corresponding relationship from the object in the other transmittal, you will have to perform the parallel operations in the other transmittal.</dd></dl>
<div class="fragment"><pre class="fragment">            geom_model_instance.addAssociate(geom_model);
</pre></div> <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#f8d5b2cc8d75a601146ba15f8e052f46">addComponent()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>in: an associate object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>in (optional): a link object to add </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successful </dd></dl>

</div>
</div><p>
<a class="anchor" name="84b9b3cb661a7483824dc7a6fbf406af"></a><!-- doxytag: member="sedris::seObject::removeComponent" ref="84b9b3cb661a7483824dc7a6fbf406af" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::removeComponent           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes a component relationship. 
<p>
Breaks the relationship between this object and the component object passed in (and the link object, if given).<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>This method does not delete the removed object from the transmittal (since it could have relationships to other objects in the transmittal). See <a class="el" href="a00315.htm#9722e68bd8f69c929ecd6a18673f4cb6">seTransmittal::deleteObject()</a> for more information. </dd></dl>
<dl class="note" compact><dt><b>Note:</b></dt><dd>If the relationship being removed is a 2-way relationship, both connections are removed, unless the component object is unresolved. <p>
The transmittal must be editable for this operation to succeed. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#f8d5b2cc8d75a601146ba15f8e052f46">addComponent()</a>, <a class="el" href="a00315.htm#9722e68bd8f69c929ecd6a18673f4cb6">seTransmittal::deleteObject()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>in: a component object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>in (optional): a link object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="eca5df8447d56da4c4dc1d57495ec9d9"></a><!-- doxytag: member="sedris::seObject::removeAssociate" ref="eca5df8447d56da4c4dc1d57495ec9d9" args="(seObject &amp;obj, seObject &amp;link_obj=seObjectNull)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::removeAssociate           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>link_obj</em> = <code><a class="el" href="a00313.htm#db4d6576c2e75f62859d04693ae6fe81">seObjectNull</a></code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes an associate relationship. 
<p>
Breaks the relationship between this object and the component object passed in (and the link object, if given).<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>This method does not delete the removed object from the transmittal (since it could have relationships to other objects in the transmittal). See <a class="el" href="a00315.htm#9722e68bd8f69c929ecd6a18673f4cb6">seTransmittal::deleteObject()</a> for more information. </dd></dl>
<dl class="note" compact><dt><b>Note:</b></dt><dd>If the relationship being removed is a 2-way relationship, both connections are removed, unless the associate object is unresolved. <p>
The transmittal must be editable for this operation to succeed. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#f8d5b2cc8d75a601146ba15f8e052f46">addComponent()</a>, <a class="el" href="a00315.htm#9722e68bd8f69c929ecd6a18673f4cb6">seTransmittal::deleteObject()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>in: a component object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>link_obj</em>&nbsp;</td><td>in (optional): a link object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a3eefb98306ddc9dee3630ab8d90e591"></a><!-- doxytag: member="sedris::seObject::getID" ref="a3eefb98306ddc9dee3630ab8d90e591" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* sedris::seObject::getID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the object identifier as a string. 
<p>
Object identifiers can be used to uniquely identify objects in a transmittal. For example, you could store the returned string by this method and, at a later time, re-open the transmittal, call the transmittal's seTransmittal::getObjectByID() method, and continue work on the object.<p>
A typical object ID may look like "urn:sedris:stf:stf_belle.stf:1:0,220,169". <dl class="warning" compact><dt><b>Warning:</b></dt><dd>Pointers to string memory are temporary, and should not be stored by the user. If you need to store the pointed-to string, copy the string data to your own memory space (for example into a std::string). </dd></dl>

</div>
</div><p>
<a class="anchor" name="33fe646460c174526b02ab85731a79d0"></a><!-- doxytag: member="sedris::seObject::isPublished" ref="33fe646460c174526b02ab85731a79d0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isPublished           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object is published. 
<p>
Publishing an object makes that object available for ITR referencing from other transmittals. Only published objects can be accessed using ITR references. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#4ab4f8fb03e7849e83fa3ddab0c8c5f3">publish()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="4ab4f8fb03e7849e83fa3ddab0c8c5f3"></a><!-- doxytag: member="sedris::seObject::publish" ref="4ab4f8fb03e7849e83fa3ddab0c8c5f3" args="(const char *label)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::publish           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>label</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Publishes the object for ITR referencing from other transmittals. 
<p>
Publishing an object makes that object available for ITR referencing from other transmittals. Only published objects can be accessed using ITR references.<p>
If the object has already been published under a different label, then the new label is added to the list of labels for the object. If the object was already published using the given label, no error is reported. <dl class="note" compact><dt><b>Note:</b></dt><dd>The label must pass SE_ValidObjectLabel(), which checks that the label adheres to the same lexical conventions as variables in ANSI C. . </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>on error, if the object is unresolved, or if the transmittal is not editable. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#b0c0edbc028c60d5e542a097e62b6bb4">unpublish()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>label</em>&nbsp;</td><td>in: the label to be used to publish the object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="b0c0edbc028c60d5e542a097e62b6bb4"></a><!-- doxytag: member="sedris::seObject::unpublish" ref="b0c0edbc028c60d5e542a097e62b6bb4" args="(const char *label=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::unpublish           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>label</em> = <code>NULL</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes the object from being published under the given label. 
<p>
Unpublishing an object makes that object unavailable for ITR referencing from other transmittals. <dl class="warning" compact><dt><b>Warning:</b></dt><dd>Unpublishing objects MAY result in a need to change the transmittal name portion of the URN assigned to a transmittal. Using the same transmittal name guarantees that all labels ever published will remain available in future "versions" of the transmittal. Removing a label using this function will require a transmittal name change if another object is not published under the same label before the transmittal is made publicly available or "released".</dd></dl>
. <dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>on error, if the object was not previously published, if the object is unresolved, or if the transmittal is not editable. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#4ab4f8fb03e7849e83fa3ddab0c8c5f3">publish()</a>, <a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>label</em>&nbsp;</td><td>in (optional): the label under which the object was previously published (may be NULL to remove all publishings for object) </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="6bec9e7627a64209c82a37546aeacf18"></a><!-- doxytag: member="sedris::seObject::getPublishedLabelCount" ref="6bec9e7627a64209c82a37546aeacf18" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int sedris::seObject::getPublishedLabelCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If this object is published (see <a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a>), returns the number of labels that were used to publish it. 
<p>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if the object is not published. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a>, <a class="el" href="a00313.htm#0938dc41e1ee29d5c3d851b2612369eb">getPublishedLabel()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="0938dc41e1ee29d5c3d851b2612369eb"></a><!-- doxytag: member="sedris::seObject::getPublishedLabel" ref="0938dc41e1ee29d5c3d851b2612369eb" args="(unsigned int index=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* sedris::seObject::getPublishedLabel           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>index</em> = <code>0</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If this object is published (see <a class="el" href="a00313.htm#33fe646460c174526b02ab85731a79d0">isPublished()</a>), returns the indexed label that was used to publish it. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Pointers to string memory are temporary, and should not be stored by the user. If you need to store the pointed-to string, copy the string data to your own memory space (for example into a std::string). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if the object is not published. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#6bec9e7627a64209c82a37546aeacf18">getPublishedLabelCount()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>in: the indexed label </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="dc1067c47bd91bff1830c5782eed48f2"></a><!-- doxytag: member="sedris::seObject::resolve" ref="dc1067c47bd91bff1830c5782eed48f2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::resolve           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If this object is unresolved, attempt to resolve it. 
<p>
The resolution process does the following: <ol>
<li>
An attempt is made to open the transmittal the ITR reference URN refers to (see <a class="el" href="a00313.htm#46b80073b7b20da7a1b1964f3795d772">getUnresolvedTransmittalURN()</a> and <a class="el" href="a00316.htm#5c6b2486f236698ad8ddb417739e1330">seWorkspace::openTransmittalByURN()</a>). </li>
<li>
An attempt is then made to retrieve the specific published object from the transmittal (see <a class="el" href="a00315.htm#f9ad51fcadfaf6af103f4eab1e36bfae">seTransmittal::getPublishedObject()</a>). </li>
</ol>
<dl class="note" compact><dt><b>Note:</b></dt><dd>If this object is already resolved, no error is reported. <p>
If the transmittal the unresolved object points to is not already opened, the transmittal is opened READ_ONLY. Otherwise, the transmittal retains the previously opened mode. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved()</a>, <a class="el" href="a00313.htm#bb520224dd92784d93da5358f4ba0538">getUnresolvedObjectLabel()</a>, <a class="el" href="a00313.htm#46b80073b7b20da7a1b1964f3795d772">getUnresolvedTransmittalURN()</a> </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if the object could not be resolved </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="fb8d8d28e3887352fddc3bd22f943fe0"></a><!-- doxytag: member="sedris::seObject::isResolved" ref="fb8d8d28e3887352fddc3bd22f943fe0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isResolved           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if this object is resolved, or false if it is unresolved. 
<p>
An unresolved object (a.k.a. ITR reference) points to a transmittal and a published label in that transmittal. Unresolved objects are used to "hook" transmittals together. <dl class="note" compact><dt><b>Note:</b></dt><dd>The only way an unresolved object can be resolved is by calling the <a class="el" href="a00313.htm#dc1067c47bd91bff1830c5782eed48f2">resolve()</a> method. <p>
If an object is unresolved, then all operations that depend on the object being resolved (e.g. <a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass()</a>) will fail with an exception. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#46b80073b7b20da7a1b1964f3795d772">getUnresolvedTransmittalURN()</a>, <a class="el" href="a00313.htm#bb520224dd92784d93da5358f4ba0538">getUnresolvedObjectLabel()</a>, <a class="el" href="a00313.htm#dc1067c47bd91bff1830c5782eed48f2">resolve()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="46b80073b7b20da7a1b1964f3795d772"></a><!-- doxytag: member="sedris::seObject::getUnresolvedTransmittalURN" ref="46b80073b7b20da7a1b1964f3795d772" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* sedris::seObject::getUnresolvedTransmittalURN           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If this object is an unresolved object, returns the URN of the transmittal being referenced. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Pointers to string memory are temporary, and should not be stored by the user. If you need to store the pointed-to string, copy the string data to your own memory space (for example into a std::string). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if object is not unresolved. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="bb520224dd92784d93da5358f4ba0538"></a><!-- doxytag: member="sedris::seObject::getUnresolvedObjectLabel" ref="bb520224dd92784d93da5358f4ba0538" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* sedris::seObject::getUnresolvedObjectLabel           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If this object is an unresolved object, returns the label of the published object being referenced in the referenced transmittal. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Pointers to string memory are temporary, and should not be stored by the user. If you need to store the pointed-to string, copy the string data to your own memory space (for example into a std::string). </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if object is not unresolved. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#fb8d8d28e3887352fddc3bd22f943fe0">isResolved()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="a1f0a193b817504a9405291a4855dbb8"></a><!-- doxytag: member="sedris::seObject::setUserData" ref="a1f0a193b817504a9405291a4855dbb8" args="(void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::setUserData           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set a pointer to user data. 
<p>
You can use this method to store data that your application can refer to when this object is re-encountered. Note that for this to work, you MUST keep at least 1 handle to the object somewhere in your application. After all handles have been released, the pointer data will be set to NULL the next time the object is retrieved from the API. <dl class="note" compact><dt><b>Note:</b></dt><dd>The pointer data is set to NULL the first time an object is encountered. <p>
The pointer and any data pointed by it is not stored in the transmittal. </dd></dl>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>Memory management of memory pointed to by the user data is the sole responsibility of the user. If the user_data points to memory that should eventually be freed, then the user should free that memory before releasing all the handles to a given object. The API will never access or free or interfere with in any way the memory pointed to by an object's user data. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#2084c7501b7d8bdb639982278f630af2">getUserData()</a> </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>in: a pointer to user data (can be NULL) </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="2084c7501b7d8bdb639982278f630af2"></a><!-- doxytag: member="sedris::seObject::getUserData" ref="2084c7501b7d8bdb639982278f630af2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void* sedris::seObject::getUserData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the current value of the user data pointer for the given object. 
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="a00313.htm#a1f0a193b817504a9405291a4855dbb8">setUserData()</a> </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the previously set value for the pointer </dd></dl>

</div>
</div><p>
<a class="anchor" name="e6040b1ff3f758aac731e95e724f82c8"></a><!-- doxytag: member="sedris::seObject::cloneTo" ref="e6040b1ff3f758aac731e95e724f82c8" args="(seObject &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::cloneTo           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clones the DRM object handle into another object. 
<p>
Used to make another <a class="el" href="a00313.htm">seObject</a> refer to the same transmittal DRM object this object refers to. Generally used to access this generic object with a more specific type. For example: <div class="fragment"><pre class="fragment">            seDRMArc arc;

            <span class="comment">// obj is an seObject obtained somewhere else</span>
            <span class="keywordflow">if</span> (obj.isA(SE_CLS_DRM_ARC))
            {
                obj.cloneTo(arc);
                cout &lt;&lt; <span class="stringliteral">"Suppress Last = "</span> &lt;&lt; arc.get_suppress_last() &lt;&lt; endl;
            }
</pre></div> You can also use the copy constructor to achieve the same effect: <div class="fragment"><pre class="fragment">            <span class="comment">// obj is an seObject obtained somewhere else</span>
            <span class="keywordflow">if</span> (obj.isA(SE_CLS_DRM_ARC))
            {
                seDRMArc arc(obj);

                cout &lt;&lt; <span class="stringliteral">"Suppress Last = "</span> &lt;&lt; arc.get_suppress_last() &lt;&lt; endl;
            }
</pre></div> or the assignment operator: <div class="fragment"><pre class="fragment">            seDRMArc arc;

            <span class="comment">// obj is an seObject obtained somewhere else</span>
            <span class="keywordflow">if</span> (obj.isA(SE_CLS_DRM_ARC))
            {
                arc = obj;
                cout &lt;&lt; <span class="stringliteral">"Suppress Last = "</span> &lt;&lt; arc.get_suppress_last() &lt;&lt; endl;
            }
</pre></div><p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>The object to clone to does not need to be released, it is done automatically. </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if the "cloned to" object is not of the same class (or a base class, which includes <a class="el" href="a00313.htm">seObject</a>) of the object being cloned. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>other</em>&nbsp;</td><td>in: object to clone the handle to </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="7d9349c169f5eccef83edcadeb97c8e1"></a><!-- doxytag: member="sedris::seObject::isSameAs" ref="7d9349c169f5eccef83edcadeb97c8e1" args="(const seObject &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool sedris::seObject::isSameAs           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00313.htm">seObject</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if the object passed in is a clone of this one (i.e. 
<p>
both handles reference the same object). 
</div>
</div><p>
<a class="anchor" name="d94296aed1233a59864d077ccc134aef"></a><!-- doxytag: member="sedris::seObject::release" ref="d94296aed1233a59864d077ccc134aef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sedris::seObject::release           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Releases the handle to the transmittal DRM object. 
<p>
Generally there is no need to call this method, since <a class="el" href="a00313.htm#d94296aed1233a59864d077ccc134aef">release()</a> is called by any change of handle or when the object goes out of scope. Note that other seObject's having a handle pointing to the same transmittal DRM object will remain valid. 
</div>
</div><p>
<a class="anchor" name="7da1d79d8a66656ffe652e4fa3923ffc"></a><!-- doxytag: member="sedris::seObject::getClassType" ref="7da1d79d8a66656ffe652e4fa3923ffc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class.htm">SE_DRM_Class</a> sedris::seObject::getClassType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the DRM class type this object can reference. 
<p>
For <a class="el" href="a00313.htm">seObject</a>, this method returns the NULL class since it can point to any of the derived classes. The derived classes return their specific DRM class. <dl class="warning" compact><dt><b>Warning:</b></dt><dd>Don't confuse with <a class="el" href="a00313.htm#256b847c72e944db1101a06246581594">getDRMClass()</a>, which is dependent on the actual type held by an <a class="el" href="a00313.htm">seObject</a>. </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the class type of this object </dd></dl>

<p>
Reimplemented in <a class="el" href="a00001.htm#d52df298dac991ba096d430e422e347e">sedris::seDRMAbsoluteTime</a>, <a class="el" href="a00002.htm#606c6ffb5021a1c3223e115d7709a51c">sedris::seDRMAbsoluteTimeInterval</a>, <a class="el" href="a00003.htm#4da6b4c30836a87af302e7b793dd5e84">sedris::seDRMAggregateFeature</a>, <a class="el" href="a00004.htm#4a86b71e34f72551b368d34bdae9b6fc">sedris::seDRMAggregateGeometry</a>, <a class="el" href="a00005.htm#b45b4e18a466a3d6f1d984fe3da1b9dc">sedris::seDRMAlternateHierarchyRelatedFeatures</a>, <a class="el" href="a00006.htm#f1dba2e624ba7229a95c79454875cd3b">sedris::seDRMAlternateHierarchyRelatedGeometry</a>, <a class="el" href="a00007.htm#fee3e7dab065270e0336052d06a516fb">sedris::seDRMAmbientColour</a>, <a class="el" href="a00008.htm#8f4ebcbf4870ccf71211203329f26359">sedris::seDRMAnimationBehaviour</a>, <a class="el" href="a00009.htm#9d332b3bf7b47e1a253204c9361f3a8f">sedris::seDRMAnimationRelatedGeometry</a>, <a class="el" href="a00010.htm#932c4803be0148c6558918411bd8ceeb">sedris::seDRMArc</a>, <a class="el" href="a00011.htm#a59acf287cb263fe25f5b540eee34869">sedris::seDRMArealFeature</a>, <a class="el" href="a00012.htm#79c95631ef8fe28c9b081892a09443ed">sedris::seDRMAttachmentPoint</a>, <a class="el" href="a00013.htm#148c2dcf6284ec60637f50ea9af5906a">sedris::seDRMAxis</a>, <a class="el" href="a00015.htm#1c224515a70df39f2e3d662c5375a1ba">sedris::seDRMBaseAssociationData</a>, <a class="el" href="a00016.htm#a628861a078293f59b098e1f62005fee">sedris::seDRMBaseLODData</a>, <a class="el" href="a00017.htm#629a7cd3274b570ff47fa167d6535d8e">sedris::seDRMBasePositionalLight</a>, <a class="el" href="a00018.htm#7d2efff94905a9bbd8678a17d19e5499">sedris::seDRMBaseSpatialAssociationData</a>, <a class="el" href="a00019.htm#fb32d05ec74d205c7e826dc8963159e1">sedris::seDRMBaseSummaryItem</a>, <a class="el" href="a00020.htm#fda18b1ccbf7a68013b741acfd23d4df">sedris::seDRMBaseTimeData</a>, <a class="el" href="a00021.htm#361be27a360c81100085b313326a04f8">sedris::seDRMBlendDirectionalLight</a>, <a class="el" href="a00022.htm#ea835683802af813acbea9754dcc173b">sedris::seDRMBoundingVolume</a>, <a class="el" href="a00023.htm#f040993d3bbb2467f08220846a3e2b1e">sedris::seDRMBrowseMedia</a>, <a class="el" href="a00024.htm#38b8d83e35bc97820ee5756f201330b5">sedris::seDRMCameraPoint</a>, <a class="el" href="a00025.htm#33f20b794f485e5c8f0dce5f95164123">sedris::seDRMCC3DLocation</a>, <a class="el" href="a00026.htm#a0752f90a4b80c78bf314b2624afdd62">sedris::seDRMCD3DLocation</a>, <a class="el" href="a00027.htm#80fc1862aff5a64d488ea80b86861918">sedris::seDRMCDSurfaceLocation</a>, <a class="el" href="a00028.htm#93602ab705580b8ec7ddb604ecb1b12a">sedris::seDRMCitation</a>, <a class="el" href="a00029.htm#9f99496f48165a7350e6859d132849dd">sedris::seDRMClassificationData</a>, <a class="el" href="a00030.htm#84c5280de275aa86a7353499a2eb1c25">sedris::seDRMClassificationRelatedFeatures</a>, <a class="el" href="a00031.htm#22cbfbce45ebd5f73763e6b52a589a8e">sedris::seDRMClassificationRelatedGeometry</a>, <a class="el" href="a00032.htm#f7a032e7ea0734e18f695f71a06747f7">sedris::seDRMCM3DLocation</a>, <a class="el" href="a00033.htm#52a74b710e469c76ca5f0095b26c4370">sedris::seDRMCMYColour</a>, <a class="el" href="a00034.htm#fa09a645541cf8e17f7495604a36e183">sedris::seDRMCMYColourControlLink</a>, <a class="el" href="a00035.htm#627c6b5291e55799e57bbfd615508964">sedris::seDRMCollisionVolume</a>, <a class="el" href="a00036.htm#6330c27141f7571a5f2369cb77b314f2">sedris::seDRMColour</a>, <a class="el" href="a00037.htm#6b2a3823255c563890baebbb5b7b0d49">sedris::seDRMColourData</a>, <a class="el" href="a00038.htm#b834e0fce32fe20041a59e1af24178e9">sedris::seDRMColourIndex</a>, <a class="el" href="a00039.htm#c0423267c7551fc7e046600e91e3ba82">sedris::seDRMColourIndexControlLink</a>, <a class="el" href="a00040.htm#30f3ad621067a57a1408ec7855486988">sedris::seDRMColourShininess</a>, <a class="el" href="a00041.htm#2d855c1065bd2717af538b6fb2d29ca4">sedris::seDRMColourTable</a>, <a class="el" href="a00042.htm#c355dc15fef88bd4c597e029f76cf60a">sedris::seDRMColourTableGroup</a>, <a class="el" href="a00043.htm#aee78265b3b5d087d5bc627efc4c4a57">sedris::seDRMColourTableLibrary</a>, <a class="el" href="a00044.htm#3982d76e5fbbfef758f57b9ad8aea481">sedris::seDRMConeDirectionalLight</a>, <a class="el" href="a00045.htm#7804721e6d49d77d3db0985ba8c9a9a0">sedris::seDRMConformalBehaviour</a>, <a class="el" href="a00046.htm#c50f2c700e431c23eb2e63161b84ea4a">sedris::seDRMContactPoint</a>, <a class="el" href="a00047.htm#6f17d7c2e236b19261a219587d319acd">sedris::seDRMContinuousLODRelatedGeometry</a>, <a class="el" href="a00048.htm#b0b6747178e5dd8efc5c4eb0fc719a88">sedris::seDRMControlLink</a>, <a class="el" href="a00049.htm#bba846fc51222408a08dc6131d76152d">sedris::seDRMCylindricalVolumeExtent</a>, <a class="el" href="a00050.htm#efc6188fe1f71e542550573df3f88352">sedris::seDRMDataQuality</a>, <a class="el" href="a00051.htm#63b2cc2bf1a74a8023caa2f1dac8eec8">sedris::seDRMDataTable</a>, <a class="el" href="a00052.htm#fd1cc779f823ddb167cfd14d017f8179">sedris::seDRMDataTableLibrary</a>, <a class="el" href="a00053.htm#33063c0cec49a612900d60f011477877">sedris::seDRMDiffuseColour</a>, <a class="el" href="a00054.htm#cb39da89a966cdf020f49064ba9ca60e">sedris::seDRMDirectionalLightBehaviour</a>, <a class="el" href="a00055.htm#e3af920553951a88f1b7a0788d607176">sedris::seDRMDistanceLODData</a>, <a class="el" href="a00056.htm#fdfa641e9d1bd9b9cf9193ee610c55ef">sedris::seDRMDRMClassSummaryItem</a>, <a class="el" href="a00057.htm#7e54ef7e24d2bc45a370b519b2aceb23">sedris::seDRMECAugmented3DLocation</a>, <a class="el" href="a00058.htm#0121b9de55fe206eb6dc6869dfa78df8">sedris::seDRMECSurfaceLocation</a>, <a class="el" href="a00059.htm#57789b66fb062c915e6866f56eeef503">sedris::seDRMEDCSUseSummaryItem</a>, <a class="el" href="a00060.htm#4e228f75d30d4e149fe5b546643e8b9b">sedris::seDRMEdgeDirection</a>, <a class="el" href="a00061.htm#d7332a89c447e7fa3341dea26b3b8f7b">sedris::seDRMEI3DLocation</a>, <a class="el" href="a00062.htm#4a56ec9c81e9cf92ee130e39d9b036f0">sedris::seDRMEllipse</a>, <a class="el" href="a00063.htm#13a58b3d4f92677c8b41656823a789fc">sedris::seDRMEmissiveColour</a>, <a class="el" href="a00064.htm#b693d1e4cfc43c3ed52e76d0901e2bac">sedris::seDRMEnclosingVolume</a>, <a class="el" href="a00065.htm#9629a9670e2f95ab7c8f89d4bdfbec47">sedris::seDRMEnumerationAxis</a>, <a class="el" href="a00066.htm#be790738126a5cfd85736a2ea7ca7ee6">sedris::seDRMEnvironmentalDomainSummary</a>, <a class="el" href="a00067.htm#bb88a7680b3bdb6a1ef4d98dc3fdff18">sedris::seDRMEnvironmentRoot</a>, <a class="el" href="a00068.htm#3170a4e22f48afea2c3a80da6451cbb9">sedris::seDRMExpression</a>, <a class="el" href="a00069.htm#cc281dacc655ac883e6499f761cbcc22">sedris::seDRMFaceDirection</a>, <a class="el" href="a00070.htm#aa22dee3d490ebfe1727a373c66993b8">sedris::seDRMFadeRange</a>, <a class="el" href="a00071.htm#07c2af789095052e0aedc1e218b035bd">sedris::seDRMFeatureEdge</a>, <a class="el" href="a00072.htm#84ee37b0fed7214154ac9ac2d99bf041">sedris::seDRMFeatureFace</a>, <a class="el" href="a00073.htm#d503496236771c7dc3e7987f2e3e4bf7">sedris::seDRMFeatureFaceRing</a>, <a class="el" href="a00074.htm#793190e0da9936feadeeb20efe2fd3ce">sedris::seDRMFeatureHierarchy</a>, <a class="el" href="a00075.htm#51610ab4f6fbb1764b735b7a38796420">sedris::seDRMFeatureModel</a>, <a class="el" href="a00076.htm#db4072b4e2878934e495b91d3bd69b1d">sedris::seDRMFeatureModelInstance</a>, <a class="el" href="a00077.htm#f912785d410f4af4431792dfc634e62c">sedris::seDRMFeatureNode</a>, <a class="el" href="a00078.htm#0ad05b3b0e3be6fdc49813f05daa441d">sedris::seDRMFeatureRepresentation</a>, <a class="el" href="a00079.htm#a67bdea56834cc5d69bd6488834d60b1">sedris::seDRMFeatureTopology</a>, <a class="el" href="a00080.htm#6f20a508a21b4caea46ffa63a0fe5c24">sedris::seDRMFeatureTopologyHierarchy</a>, <a class="el" href="a00081.htm#4441197de53650938258f8c0efaed7f2">sedris::seDRMFeatureVolume</a>, <a class="el" href="a00082.htm#319cab3a6d8b0ad28e8608c2eb235ff4">sedris::seDRMFeatureVolumeShell</a>, <a class="el" href="a00083.htm#b9f82fb24c929b3c022a09c9555437f5">sedris::seDRMFiniteElementMesh</a>, <a class="el" href="a00084.htm#7d9563e12581c5b6c8b5e58705248105">sedris::seDRMFlashingLightBehaviour</a>, <a class="el" href="a00085.htm#630959e6dd2c107712916a55b438819f">sedris::seDRMFunction</a>, <a class="el" href="a00086.htm#39b29dc89f33b422a30150453442618d">sedris::seDRMFunctionalAssociationData</a>, <a class="el" href="a00087.htm#a2c550691601806ae48eb7640fb8e797">sedris::seDRMGeometricCentre</a>, <a class="el" href="a00088.htm#28ddf42b6206d86870b6ed594a13f75a">sedris::seDRMGeometryEdge</a>, <a class="el" href="a00089.htm#80bbc1af2e4c64452ca9c37cd5a628cb">sedris::seDRMGeometryFace</a>, <a class="el" href="a00090.htm#8f95542edf1d612164da9aa2ff030984">sedris::seDRMGeometryHierarchy</a>, <a class="el" href="a00091.htm#6d95f492f4ab73a707bd32eb6e75f379">sedris::seDRMGeometryModel</a>, <a class="el" href="a00092.htm#7e152ecf97249ad4918215c12f8762f4">sedris::seDRMGeometryModelInstance</a>, <a class="el" href="a00093.htm#77a39c2051368de07be86a661d144937">sedris::seDRMGeometryNode</a>, <a class="el" href="a00094.htm#6cc6d3ad1f10e96e97eb1b02d1321fd8">sedris::seDRMGeometryRepresentation</a>, <a class="el" href="a00095.htm#24714c6c4e9e4907088aa76891804ac0">sedris::seDRMGeometryTopology</a>, <a class="el" href="a00096.htm#ecbd79ab752c6d441585d6db9279077e">sedris::seDRMGeometryTopologyHierarchy</a>, <a class="el" href="a00097.htm#14bb3d5b1410df3b4b77d6684bf2d66d">sedris::seDRMGeometryVolume</a>, <a class="el" href="a00098.htm#c75f7fabdb8d57a19817e5c03542ded7">sedris::seDRMGridOverlap</a>, <a class="el" href="a00099.htm#c9823398946bd2e07ab1c7279414bc43">sedris::seDRMHAEC3DLocation</a>, <a class="el" href="a00100.htm#951594785516f293fa0ced19e6785096">sedris::seDRMHEEC3DLocation</a>, <a class="el" href="a00101.htm#d53a3c8a2986d2be14f3e45f9af99b66">sedris::seDRMHEEQ3DLocation</a>, <a class="el" href="a00102.htm#427ee56a2dfc6635b1523838c4ffc856">sedris::seDRMHierarchyData</a>, <a class="el" href="a00103.htm#ba2e8913f1ebfeb5f74ca34ed4d720e9">sedris::seDRMHierarchySummaryItem</a>, <a class="el" href="a00104.htm#2f3d86df1072f4b64e716899580a0c90">sedris::seDRMHSVColour</a>, <a class="el" href="a00105.htm#8710d06b4f83914cc107c96463dd471d">sedris::seDRMHSVColourControlLink</a>, <a class="el" href="a00106.htm#d357f55221b6a4f20e22cf23922e2a07">sedris::seDRMIcon</a>, <a class="el" href="a00107.htm#02662ea0e4d0c738913534ab8ca8413f">sedris::seDRMIdentification</a>, <a class="el" href="a00108.htm#d98c57027068c0987e2706e652143859">sedris::seDRMImage</a>, <a class="el" href="a00109.htm#513a6fd98e18a5e236b762765f8608f5">sedris::seDRMImageAnchor</a>, <a class="el" href="a00110.htm#ea6b3ca44e33478b359ae0e643bd66b7">sedris::seDRMImageLibrary</a>, <a class="el" href="a00111.htm#6f95774dba5f38dbf700afb6a4d97939">sedris::seDRMImageMappingFunction</a>, <a class="el" href="a00112.htm#8294021a458b0cec7d89fb0bf09fd3e9">sedris::seDRMIndexLODData</a>, <a class="el" href="a00113.htm#1cd3973c7274873834820956e3a732f0">sedris::seDRMInfiniteLight</a>, <a class="el" href="a00114.htm#f9291d2b9aec8bc7c19cbe675f4914fa">sedris::seDRMInlineColour</a>, <a class="el" href="a00115.htm#b7c3b579d713a774985b222238225c4b">sedris::seDRMInOut</a>, <a class="el" href="a00116.htm#ee2c70632137092142b58253e6c99509">sedris::seDRMInterfaceTemplate</a>, <a class="el" href="a00117.htm#ba97e08b7423558d343a72cf70900b44">sedris::seDRMIntervalAxis</a>, <a class="el" href="a00118.htm#c6b4fda3231c065b7b08485dd973ab66">sedris::seDRMIrregularAxis</a>, <a class="el" href="a00119.htm#f6354e4bbde27bbc13acb4c804bae5b6">sedris::seDRMKeywords</a>, <a class="el" href="a00120.htm#a086975f6545ba97dff6beb2d0f32cd9">sedris::seDRMLabel</a>, <a class="el" href="a00121.htm#5b6e05aab702ddf2e21550f92cf9e71c">sedris::seDRMLCCAugmented3DLocation</a>, <a class="el" href="a00122.htm#fe45047d22f72a2cf757e7e5bea79196">sedris::seDRMLCCSurfaceLocation</a>, <a class="el" href="a00123.htm#2db831af46cd53ee1126140c7a85131a">sedris::seDRMLCE3DLocation</a>, <a class="el" href="a00124.htm#5d62258a7a227a588471031a952c8974">sedris::seDRMLegalConstraints</a>, <a class="el" href="a00125.htm#0a9e9d5e3b9194493539c10d871f9863">sedris::seDRMLibrary</a>, <a class="el" href="a00126.htm#89f542cbd4209520ad8c24e4814b1353">sedris::seDRMLightRenderingBehaviour</a>, <a class="el" href="a00127.htm#499cbfa0f25e4fc5a6c14f6824633d57">sedris::seDRMLightRenderingProperties</a>, <a class="el" href="a00128.htm#3ab0902a49cb6b4a480e6fe86f7f08e4">sedris::seDRMLightRenderingPropertiesControlLink</a>, <a class="el" href="a00129.htm#254967408cd6f351f397dc5528076856">sedris::seDRMLightSource</a>, <a class="el" href="a00130.htm#71431fdd26019f92c76028192d64aa6d">sedris::seDRMLightSourceControlLink</a>, <a class="el" href="a00131.htm#fa7d1f1ab4bca565d1ef2e09ed423033">sedris::seDRMLine</a>, <a class="el" href="a00132.htm#c03146e219cdd20540a7c0581f9e609c">sedris::seDRMLineage</a>, <a class="el" href="a00133.htm#77890ae57ff843d1bc89b3a5bf5ed2c9">sedris::seDRMLinearFeature</a>, <a class="el" href="a00134.htm#ad7967b730ddf3ef6d2a233881df572a">sedris::seDRMLinearGeometry</a>, <a class="el" href="a00135.htm#dcf1c5d602b876fbf2e2ae1803b191a3">sedris::seDRMLiteral</a>, <a class="el" href="a00136.htm#7f4ffd3e441447cb2913014d7a7016cd">sedris::seDRMLobeData</a>, <a class="el" href="a00137.htm#eef128508dee14f3590b76574a83726f">sedris::seDRMLocal4x4</a>, <a class="el" href="a00138.htm#bda0e2ebd2d25e6f2c3b5a1b8006565c">sedris::seDRMLocation</a>, <a class="el" href="a00139.htm#93492a8bf301f131ff35b1f56d9b2e7c">sedris::seDRMLocation2D</a>, <a class="el" href="a00140.htm#8c42a5ce4c2dbe48fbc59938758d30c4">sedris::seDRMLocation3D</a>, <a class="el" href="a00141.htm#2781d5b29b51727e3eff409a4dc9d056">sedris::seDRMLocationSurface</a>, <a class="el" href="a00142.htm#387d9e4cbb1672a57dd85286edeb6af9">sedris::seDRMLODRelatedFeatures</a>, <a class="el" href="a00143.htm#1cf36ade308efeb3ca8d901e3396a92e">sedris::seDRMLODRelatedGeometry</a>, <a class="el" href="a00144.htm#41d4d683d6a5d32a13d744868ac7c714">sedris::seDRMLSA2DLocation</a>, <a class="el" href="a00145.htm#47270052cc2ab09f13c3619481baca4d">sedris::seDRMLSP2DLocation</a>, <a class="el" href="a00146.htm#f12d588d4df37cdfdb05a53393d8488c">sedris::seDRMLSR2DLocation</a>, <a class="el" href="a00147.htm#54aba646a550c96451fbef769c338f40">sedris::seDRMLSR3DLocation</a>, <a class="el" href="a00148.htm#cf617dcf1f3181e5924f11bbd2a79d49">sedris::seDRMLSR3DLocationControlLink</a>, <a class="el" href="a00149.htm#b877e6b4f5157e75339b16ca4212ec47">sedris::seDRMLSRTransformation</a>, <a class="el" href="a00150.htm#6e3cff13127ecba1f6e9bba911cc2524">sedris::seDRMLSRTransformationStep</a>, <a class="el" href="a00151.htm#f7ed64aa04c58333ba4e8187ed4cb467">sedris::seDRMLTSAS3DLocation</a>, <a class="el" href="a00152.htm#1b61008662df92036b5ff5308304c8bb">sedris::seDRMLTSASSurfaceLocation</a>, <a class="el" href="a00153.htm#27702a010cdd2aa6e09372e2a3b554ef">sedris::seDRMLTSC3DLocation</a>, <a class="el" href="a00154.htm#63cebaaa324e571fbb065d7499c72d83">sedris::seDRMLTSCSurfaceLocation</a>, <a class="el" href="a00155.htm#c119662d5ac435bf2409b7103ee0b696">sedris::seDRMLTSE3DLocation</a>, <a class="el" href="a00156.htm#2481a70716d93a404d50e041aa8f75cd">sedris::seDRMLTSESurfaceLocation</a>, <a class="el" href="a00157.htm#12bb6fb72bd0cb666f5697b825e30d75">sedris::seDRMMapScaleLODData</a>, <a class="el" href="a00158.htm#051c771b97b91ac3b7d1a59c214491b0">sedris::seDRMMAugmented3DLocation</a>, <a class="el" href="a00159.htm#38d71c35f20495ac0849c99d2bdd08f7">sedris::seDRMMeshFaceTable</a>, <a class="el" href="a00160.htm#c11eed95c3bbadd02f279267de18af54">sedris::seDRMModel</a>, <a class="el" href="a00161.htm#99e44a19c79b9bd5ade9658e01b69b42">sedris::seDRMModelInstanceTemplateIndex</a>, <a class="el" href="a00162.htm#38220442fd837d7df5c34332904f97a9">sedris::seDRMModelLibrary</a>, <a class="el" href="a00163.htm#f559714441b2213d522dcb12b42866d3">sedris::seDRMMovingLightBehaviour</a>, <a class="el" href="a00164.htm#d54ed8402a2b695dbdb22dae1d8fdbe5">sedris::seDRMMSurfaceLocation</a>, <a class="el" href="a00165.htm#6cb4e3b7caea0eb9792180b61d87d65b">sedris::seDRMOctantData</a>, <a class="el" href="a00166.htm#45d45bd2f5b7b2b9e0c31c7cbb33aa8d">sedris::seDRMOctantRelatedFeatures</a>, <a class="el" href="a00167.htm#2476261f9f8b261b22bddd5680961d7c">sedris::seDRMOctantRelatedGeometry</a>, <a class="el" href="a00168.htm#d51b6ff67ba0795af037c9cafcdf8af6">sedris::seDRMOMSAugmented3DLocation</a>, <a class="el" href="a00169.htm#d6e7e04df5c43874d2e84baa93b34df1">sedris::seDRMOMSSurfaceLocation</a>, <a class="el" href="a00170.htm#00fbe8fca4ec73e8986f2fb93a4b37e3">sedris::seDRMOverloadPriorityIndex</a>, <a class="el" href="a00171.htm#af81e7be5816b918d00ebfdca5df06cb">sedris::seDRMParallelepipedVolumeExtent</a>, <a class="el" href="a00172.htm#482cf7cec2a33df79703d4abc5e3c823">sedris::seDRMPD3DLocation</a>, <a class="el" href="a00173.htm#5ebd93cc2dfc5da5e0425eac1a59e758">sedris::seDRMPDSurfaceLocation</a>, <a class="el" href="a00174.htm#e0b49ae4f10cbe4fa61f7b388f36aafb">sedris::seDRMPerimeterData</a>, <a class="el" href="a00175.htm#23f0f57d6a48749eecae2aa006f8cf03">sedris::seDRMPerimeterRelatedFeatures</a>, <a class="el" href="a00176.htm#14fe8e10f6ed1d6a4918e6c9cc20d2d8">sedris::seDRMPerimeterRelatedFeatureTopology</a>, <a class="el" href="a00177.htm#8495218bc1f31f53f961cc84a1153b94">sedris::seDRMPerimeterRelatedGeometry</a>, <a class="el" href="a00178.htm#e86b5332a21ef65c47efd6dd58559a66">sedris::seDRMPerimeterRelatedGeometryTopology</a>, <a class="el" href="a00179.htm#d50ba0c5419a32c5202a1476977533a9">sedris::seDRMPoint</a>, <a class="el" href="a00180.htm#3730f2bddc50b263f36101dd2b7d0ebc">sedris::seDRMPointFeature</a>, <a class="el" href="a00181.htm#5303a9ad6b19fa0260c26b0fce5adb9c">sedris::seDRMPolygon</a>, <a class="el" href="a00182.htm#dad5547af6c7a06359cebf0d66943487">sedris::seDRMPolygonControlLink</a>, <a class="el" href="a00183.htm#063e84dd9fc9057cce041c947bf5f27c">sedris::seDRMPolyhedron</a>, <a class="el" href="a00184.htm#c55cd26823e54c06ae3ccc79e5747094">sedris::seDRMPositionalLight</a>, <a class="el" href="a00185.htm#c3a2fd192b9d44fd5eafedae948bf002">sedris::seDRMPredefinedFunction</a>, <a class="el" href="a00186.htm#c4384f3196072b1bbb2218b5b0ef2d87">sedris::seDRMPresentationDomain</a>, <a class="el" href="a00187.htm#8c5c3f2c38ed2373d022fa826241e7a2">sedris::seDRMPrimitiveColour</a>, <a class="el" href="a00188.htm#3a1ffe0b65782fc7f1ed577baea03ada">sedris::seDRMPrimitiveFeature</a>, <a class="el" href="a00189.htm#3a02acdbb974494af2737becf3946c75">sedris::seDRMPrimitiveGeometry</a>, <a class="el" href="a00190.htm#a2eae74dc8d271f5b23ee9a5d35303ab">sedris::seDRMPrimitiveSummaryItem</a>, <a class="el" href="a00191.htm#4d600b400d4cffd6057b3baa4d849b10">sedris::seDRMProcessStep</a>, <a class="el" href="a00192.htm#760a1b0f124603ddc7e1fb850d7caf63">sedris::seDRMProperty</a>, <a class="el" href="a00193.htm#e41713ea79f482a01c89d0cb0eeedce4">sedris::seDRMPropertyCharacteristic</a>, <a class="el" href="a00194.htm#adbb53b185de62cd593ccb72f2de8b7c">sedris::seDRMPropertyDescription</a>, <a class="el" href="a00195.htm#79ed211954d4e5acca576e2836a47ad6">sedris::seDRMPropertyGrid</a>, <a class="el" href="a00196.htm#7c358e84b93cbc06d94c562a408a5702">sedris::seDRMPropertyGridHookPoint</a>, <a class="el" href="a00197.htm#185385d77d366aad59fe3709a2b8fb68">sedris::seDRMPropertySet</a>, <a class="el" href="a00198.htm#99f689184dfbf993aa6d0c65a5c6bc12">sedris::seDRMPropertySetIndex</a>, <a class="el" href="a00199.htm#21e756d3273ce13882378abcac0f528a">sedris::seDRMPropertySetIndexControlLink</a>, <a class="el" href="a00200.htm#e7968545c1d3227cb7d4720f840ada47">sedris::seDRMPropertySetTable</a>, <a class="el" href="a00201.htm#5059e1e00d910a25b1c3d0fce4561630">sedris::seDRMPropertySetTableGroup</a>, <a class="el" href="a00202.htm#5bacb2b1de6202ab2e896536e35bb441">sedris::seDRMPropertySetTableLibrary</a>, <a class="el" href="a00203.htm#06414e21d569caa34dcf0c5218c206d6">sedris::seDRMPropertyTable</a>, <a class="el" href="a00204.htm#5d5e345b0a020ff9b2f373b55d1e98da">sedris::seDRMPropertyTableReference</a>, <a class="el" href="a00205.htm#a9c3ee63ae47f6a1f2f106534cbf348b">sedris::seDRMPropertyTableReferenceControlLink</a>, <a class="el" href="a00206.htm#db9e36455be455156b7ced0fdef1c0e4">sedris::seDRMPropertyValue</a>, <a class="el" href="a00207.htm#e87dd5310e07b97295f3d4d99a3faf5e">sedris::seDRMProximityData</a>, <a class="el" href="a00208.htm#0c6e0f1faa30371e47c9b7bc39b1be90">sedris::seDRMPSAugmented3DLocation</a>, <a class="el" href="a00209.htm#92a58cf60aeda70706292f2ff292df57">sedris::seDRMPseudoCodeFunction</a>, <a class="el" href="a00210.htm#fb33e9f5253064366a614fe1a4d04bf5">sedris::seDRMPSSurfaceLocation</a>, <a class="el" href="a00211.htm#f5309b4c602aff1299a3c6b8ec532706">sedris::seDRMPyramidDirectionalLight</a>, <a class="el" href="a00212.htm#ea3b177aeacadf401bd3f67566aa75a8">sedris::seDRMQuadrantData</a>, <a class="el" href="a00213.htm#7f6c2b80f126917dd615aba7ad8b3672">sedris::seDRMQuadrantRelatedFeatures</a>, <a class="el" href="a00214.htm#2add0da1f3a24d72c942f26fec23d758">sedris::seDRMQuadrantRelatedGeometry</a>, <a class="el" href="a00215.htm#288ea0dbc6adcb8293ad607ac29d1520">sedris::seDRMReferenceOrigin</a>, <a class="el" href="a00216.htm#064e2f52bed337773ba8970aca62dce2">sedris::seDRMReferenceSurface</a>, <a class="el" href="a00217.htm#4f9ce907cc4034a261502fb36d90febe">sedris::seDRMReferenceVector</a>, <a class="el" href="a00218.htm#31250ef5d077f0c72b202ffc1bb8cdb2">sedris::seDRMReferenceVectorControlLink</a>, <a class="el" href="a00219.htm#cd78915d1af0251a521ae1988733204e">sedris::seDRMRegularAxis</a>, <a class="el" href="a00220.htm#c38132d32171884342eb8948da162393">sedris::seDRMRelativeTime</a>, <a class="el" href="a00221.htm#a3224730552fefb176ad25a971e6a010">sedris::seDRMRelativeTimeInterval</a>, <a class="el" href="a00222.htm#f589c75377770a5f7c7689a05ed997c2">sedris::seDRMRenderingPriorityLevel</a>, <a class="el" href="a00223.htm#d29b49b85b9f2f6eb4b5f364be4f552e">sedris::seDRMRenderingProperties</a>, <a class="el" href="a00224.htm#9f02bd5ddca58b9ae56bc979f4f35997">sedris::seDRMResponsibleParty</a>, <a class="el" href="a00225.htm#8200a3d1aba24cde7e80c617ad643903">sedris::seDRMRGBColour</a>, <a class="el" href="a00226.htm#c7dcbe42e750b5958982547f7f7ddff6">sedris::seDRMRGBColourControlLink</a>, <a class="el" href="a00227.htm#3459ff96dfd9d1e1a752a237966333a2">sedris::seDRMRoleData</a>, <a class="el" href="a00228.htm#6369daa6950eddb2d8985b346b1d55a2">sedris::seDRMRotatingLightBehaviour</a>, <a class="el" href="a00229.htm#0bf71b45644558d10b93361bcb7511c4">sedris::seDRMRotation</a>, <a class="el" href="a00230.htm#4f1160eb4f38f2c5e282dd0bbd870968">sedris::seDRMRotationControlLink</a>, <a class="el" href="a00231.htm#f427dc3e50bca234cf119abb6056c76c">sedris::seDRMScale</a>, <a class="el" href="a00232.htm#57bd566ebb7dfe5a570ff4d2565a2717">sedris::seDRMScaleControlLink</a>, <a class="el" href="a00233.htm#0378a58bde05c95457d2aad4d97d43cf">sedris::seDRMSeason</a>, <a class="el" href="a00234.htm#ee4d3f94aa21711ce24f276dc546deff">sedris::seDRMSEC3DLocation</a>, <a class="el" href="a00235.htm#34bc422174422e1ff22bd192d24eec11">sedris::seDRMSecurityConstraints</a>, <a class="el" href="a00236.htm#48e62b566b2c920e6202655c168d9d8e">sedris::seDRMSeparatingPlane</a>, <a class="el" href="a00237.htm#02d291810b48f2e8be3db150ed5d55d5">sedris::seDRMSeparatingPlaneData</a>, <a class="el" href="a00238.htm#0bf835300c4fa70991a4c96e221a0eec">sedris::seDRMSeparatingPlaneRelatedGeometry</a>, <a class="el" href="a00239.htm#0f78d3ec04d31f6296fb3a8ce2e54b7d">sedris::seDRMSeparatingPlaneRelations</a>, <a class="el" href="a00240.htm#1c8390a68ae1721308a511f08f6258fe">sedris::seDRMSEQ3DLocation</a>, <a class="el" href="a00241.htm#2e6dd39d23c98d2292bc4dd0c6f7b00b">sedris::seDRMSMD3DLocation</a>, <a class="el" href="a00242.htm#48e9ea598cc3865a72bf23c8859751b5">sedris::seDRMSME3DLocation</a>, <a class="el" href="a00243.htm#df3aa482215331c28131b869c72a2bb3">sedris::seDRMSound</a>, <a class="el" href="a00244.htm#d0bc4489240cb458456141d81c785025">sedris::seDRMSoundInstance</a>, <a class="el" href="a00245.htm#7213c15aa29724fc77e18493c236ea92">sedris::seDRMSoundInstanceControlLink</a>, <a class="el" href="a00246.htm#c6e88276bd512c829bbb84a183f624c2">sedris::seDRMSoundLibrary</a>, <a class="el" href="a00247.htm#64b3c6c1a9dc98ed2cf0591e5a87ffe8">sedris::seDRMSoundVolume</a>, <a class="el" href="a00248.htm#3ba0a35b76a280c0020692e32e98973a">sedris::seDRMSource</a>, <a class="el" href="a00249.htm#541d6d9e399950ff3658f703a4a446df">sedris::seDRMSpatialAssociationData</a>, <a class="el" href="a00250.htm#2f063cbde72f01512bf5c3b627174554">sedris::seDRMSpatialExtent</a>, <a class="el" href="a00251.htm#3f02e2f2e9c6c2901cc1917ce537ae91">sedris::seDRMSpatialIndexData</a>, <a class="el" href="a00252.htm#e694eabda31aff25e4e3394fab709542">sedris::seDRMSpatialIndexRelatedFeatures</a>, <a class="el" href="a00253.htm#55cd7705527fda717e3881dd097570fa">sedris::seDRMSpatialIndexRelatedFeatureTopology</a>, <a class="el" href="a00254.htm#79fd5e761120ff97056c27df6f5080f8">sedris::seDRMSpatialIndexRelatedGeometry</a>, <a class="el" href="a00255.htm#71177d11d5f94fada52200689b82b0e5">sedris::seDRMSpatialIndexRelatedGeometryTopology</a>, <a class="el" href="a00256.htm#7979d89f5ffc84163826fe93639c7fbb">sedris::seDRMSpatialResolutionLODData</a>, <a class="el" href="a00257.htm#04e4a141a2e15acc228a91446b9c27a4">sedris::seDRMSpecularColour</a>, <a class="el" href="a00258.htm#de1391bdebd5e241373b8ca790d11cd6">sedris::seDRMSphericalVolumeExtent</a>, <a class="el" href="a00259.htm#1aaebb032de022858a8d7989b0597e8c">sedris::seDRMSpotLight</a>, <a class="el" href="a00260.htm#2f25f8ffd22d74c3f254ffbb0a39dfa3">sedris::seDRMSRFSummary</a>, <a class="el" href="a00261.htm#17a21d2c4e9859fba3a352e00ccc0e45">sedris::seDRMStampBehaviour</a>, <a class="el" href="a00262.htm#4d7638b2aec358fea025efd9b4e7eee1">sedris::seDRMStateControlLink</a>, <a class="el" href="a00263.htm#76253b3ae9ad82f6254d255be27cda12">sedris::seDRMStateData</a>, <a class="el" href="a00264.htm#5bd647717fd47ec0b8ecaea30d04d9a7">sedris::seDRMStateRelatedFeatures</a>, <a class="el" href="a00265.htm#859af61d82b4621fc9a85e35ed7b264f">sedris::seDRMStateRelatedGeometry</a>, <a class="el" href="a00266.htm#56e43b91872903aca1c78f663d93ef1e">sedris::seDRMStrobingLightBehaviour</a>, <a class="el" href="a00267.htm#3b3f294d39c8f1528ec21ce4b1128f29">sedris::seDRMSurfaceGeometry</a>, <a class="el" href="a00268.htm#50d12546614e95825889427f71198ee8">sedris::seDRMSymbol</a>, <a class="el" href="a00269.htm#e5b3e9e2cda0e97f04d7df7e59e5f9ab">sedris::seDRMSymbolLibrary</a>, <a class="el" href="a00270.htm#4bac410b51b13234c016e8aab548c0e0">sedris::seDRMTablePropertyDescription</a>, <a class="el" href="a00271.htm#9c6755e3e8ff79198c1efe30e9314896">sedris::seDRMTackPoint</a>, <a class="el" href="a00272.htm#e271431ce77f5bb0a8e586a0391df077">sedris::seDRMText</a>, <a class="el" href="a00273.htm#c9412b474812ad53c31b5c6e495a5680">sedris::seDRMTextureCoordinate</a>, <a class="el" href="a00274.htm#27c069a9bdc11b1bfb165370a9e82ec2">sedris::seDRMTextureCoordinateControlLink</a>, <a class="el" href="a00275.htm#fac52085770ef8050fffd48093443a14">sedris::seDRMTimeConstraintsData</a>, <a class="el" href="a00276.htm#3c3cae724425ddf558ddd953b5d2b517">sedris::seDRMTimeInterval</a>, <a class="el" href="a00277.htm#d0c234b1c022b6625da1caaee2a61156">sedris::seDRMTimeOfDay</a>, <a class="el" href="a00278.htm#8f8d54f83f697b2dd84ab9bb9e467b65">sedris::seDRMTimePoint</a>, <a class="el" href="a00279.htm#0f01695f051165543b91b881cb476d11">sedris::seDRMTimeRelatedFeatures</a>, <a class="el" href="a00280.htm#68ff1d9fe4733794e6cd7ff79ab85ddd">sedris::seDRMTimeRelatedGeometry</a>, <a class="el" href="a00281.htm#9905078c19f8972aec78f3302b5a83a9">sedris::seDRMTMAugmented3DLocation</a>, <a class="el" href="a00282.htm#78a15ec3a7a5da95b8e784a17507b9d3">sedris::seDRMTMSurfaceLocation</a>, <a class="el" href="a00283.htm#fa6b2b105cbffb89c07ca70cfc8eaaa3">sedris::seDRMTransformation</a>, <a class="el" href="a00284.htm#ebc2691b72ef1c12a1271e98cbd8838d">sedris::seDRMTranslation</a>, <a class="el" href="a00285.htm#c5cb338a147349e69321b596e2a75f55">sedris::seDRMTranslationControlLink</a>, <a class="el" href="a00286.htm#21a837a48bf42c8902e542a4c41b0b4e">sedris::seDRMTranslucency</a>, <a class="el" href="a00287.htm#7450483c807ffaf96523e4a68038059f">sedris::seDRMTranslucencyControlLink</a>, <a class="el" href="a00288.htm#81c1865540a7e030175479ee09b8e4ec">sedris::seDRMTransmittalRoot</a>, <a class="el" href="a00289.htm#c2393ec3c12a11a15d751066179dd3d9">sedris::seDRMTransmittalSummary</a>, <a class="el" href="a00290.htm#4b763f4ba8432282dfc071d2871c3a2b">sedris::seDRMTwinklingLightBehaviour</a>, <a class="el" href="a00291.htm#9a4b617d8be19a715c88d677d25db63a">sedris::seDRMUnionOfFeatures</a>, <a class="el" href="a00292.htm#8cd3d87d41256703855af71cbe854e11">sedris::seDRMUnionOfFeatureTopology</a>, <a class="el" href="a00293.htm#1e332907106788cb3798ef957b0fad0b">sedris::seDRMUnionOfGeometry</a>, <a class="el" href="a00294.htm#1122fac56a934ac53d33aee2a8e19322">sedris::seDRMUnionOfGeometryHierarchy</a>, <a class="el" href="a00295.htm#6ff4cebbd158965aed0f31351665ea91">sedris::seDRMUnionOfGeometryTopology</a>, <a class="el" href="a00296.htm#baee1cbcef8ef5776d33c1ae84f3bdc2">sedris::seDRMUnionOfPrimitiveGeometry</a>, <a class="el" href="a00297.htm#4b18fc409f63fbc7b532b9259d6545cb">sedris::seDRMVariable</a>, <a class="el" href="a00298.htm#8021791476a6f1fcf9d5e666bdaf8261">sedris::seDRMVertex</a>, <a class="el" href="a00299.htm#40daa38972adeedca5c9e7c879cbb0f0">sedris::seDRMVolumeExtent</a>, <a class="el" href="a00300.htm#3996ebe79c1d813861b3f03070d498b9">sedris::seDRMVolumeGeometry</a>, <a class="el" href="a00301.htm#c9525ca27710e53cdc082e3e350ea685">sedris::seDRMVolumeLightBehaviour</a>, <a class="el" href="a00302.htm#1a7c026c09535f9e5c5069bcae35d451">sedris::seDRMVolumeLODData</a>, <a class="el" href="a00303.htm#2007845b6db70f76b828bb010a10fd86">sedris::seDRMVolumeObject</a>, <a class="el" href="a00304.htm#1c3f79a725ba1f077487c12aa4ee3df3">sedris::seDRMVolumetricFeature</a>, <a class="el" href="a00305.htm#0db52e46d50cedefa5ee5b1b1b5ad6b3">sedris::seDRMWorld3x3</a>, and <a class="el" href="a00306.htm#bf301fd2392395a925d06fe3e516ed32">sedris::seDRMWorldTransformation</a>.
</div>
</div><p>
<a class="anchor" name="d77b0cbddf575966992bff95e245f36b"></a><!-- doxytag: member="sedris::seObject::getWritableFields" ref="d77b0cbddf575966992bff95e245f36b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="elRef" doxygen="doxy_tags_drm.xml:../drm/" href="../drm/types/SE_DRM_Class_Fields.htm">SE_DRM_Class_Fields</a>* sedris::seObject::getWritableFields           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a pointer to fields that can be used to update the fields data, used in seDRMBase-derived classes. 
<p>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="a00307.htm">seException</a></em>&nbsp;</td><td>if transmittal is not editable. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><b>SEDRIS Transmittal Access C++ API</b></td>
<td align="right"><b>Version 4.1.4 - 14 Sep 2010</b></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2010 <a href="http://www.sedris.org">SEDRIS</a>&trade;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.4.7-20061004</td>
</tr>
</table>
</body>
</html>
