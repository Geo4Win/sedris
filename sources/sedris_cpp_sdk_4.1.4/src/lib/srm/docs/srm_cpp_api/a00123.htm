<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>srm::BaseSRF Class Reference</h1>The <a class="el" href="a00123.htm">BaseSRF</a> abstract class is the base class for all SRFs.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="a00280.htm">BaseSRF.h</a>&gt;</code>
<p>
Inheritance diagram for srm::BaseSRF:<p><center><img src="a00392.png" border="0" usemap="#a00393" alt="Inheritance graph"></center>
<map name="a00393">
<area href="a00124.htm" shape="rect" coords="5,83,136,112" alt="">
<area href="a00125.htm" shape="rect" coords="160,83,291,112" alt="">
</map>
<center><font size="2">[<a target="top" href="graph_legend.htm">legend</a>]</font></center><a href="a00003.htm">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>enum &nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#w31">SRF_ClassType</a> { <br>
&nbsp;&nbsp;<b>SRF_TYP_TWO_D</b>, 
<b>SRF_TYP_THREE_D</b>, 
<b>SRF_TYP_WITH_TANGENT_PLANE_SURFACE</b>, 
<b>SRF_TYP_WITH_ELLIPSOIDAL_HEIGHT</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_MAP_PROJECTION</b>, 
<b>SRF_TYP_LSA</b>, 
<b>SRF_TYP_CC</b>, 
<b>SRF_TYP_CD</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_CM</b>, 
<b>SRF_TYP_EC</b>, 
<b>SRF_TYP_EI</b>, 
<b>SRF_TYP_HAEC</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_HEEC</b>, 
<b>SRF_TYP_HEEQ</b>, 
<b>SRF_TYP_LCC</b>, 
<b>SRF_TYP_LCE_3D</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_LSR_2D</b>, 
<b>SRF_TYP_LSR_3D</b>, 
<b>SRF_TYP_LTSAS</b>, 
<b>SRF_TYP_LTSC</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_LTSE</b>, 
<b>SRF_TYP_M</b>, 
<b>SRF_TYP_OMS</b>, 
<b>SRF_TYP_PD</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_LSP</b>, 
<b>SRF_TYP_PS</b>, 
<b>SRF_TYP_SEC</b>, 
<b>SRF_TYP_SEQ</b>, 
<br>
&nbsp;&nbsp;<b>SRF_TYP_SME</b>, 
<b>SRF_TYP_SMD</b>, 
<b>SRF_TYP_TM</b>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The type of an SRF. <br><br></td></tr>
<tr><td colspan=2><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a0">release</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Releases the pointer to the SRF. </em> <a href="#a0"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a1">getCodes</a> (<a class="el" href="a00277.htm#a1091">SRM_SRFT_Code</a> &amp;t_code, <a class="el" href="a00277.htm#a1089">SRM_SRF_Code</a> &amp;srf_code, <a class="el" href="a00238.htm">SRM_SRFS_Code_Info</a> &amp;srfs_code_info) const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the codes that identify this class. </em> <a href="#a1"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1080">SRM_CS_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a2">getCSCode</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the CS code. </em> <a href="#a2"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a3">get_orm</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's Object Reference Model code. </em> <a href="#a3"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a4">getOrm</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's Object Reference Model code. </em> <a href="#a4"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a5">get_rt</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's RT code. </em> <a href="#a5"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a6">getRt</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's RT code. </em> <a href="#a6"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00276.htm#a17">SRM_Long_Float</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a7">getA</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's major semi-axis value (a). </em> <a href="#a7"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00276.htm#a17">SRM_Long_Float</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a8">getF</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns this SRF's flattening value (f). </em> <a href="#a8"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00123.htm#w31">SRF_ClassType</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a9">getClassType</a> () const=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the class type of this SRF instance. </em> <a href="#a9"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="a10" doxytag="srm::BaseSRF::isA"></a>
virtual bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a10">isA</a> (<a class="el" href="a00123.htm#w31">SRF_ClassType</a> type) const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if this SRF is of the given class type. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a11">changeCoordinateSRF</a> (const <a class="el" href="a00129.htm">Coord</a> &amp;src_coord, <a class="el" href="a00129.htm">Coord</a> &amp;des_coord)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Changes a coordinate's values to this SRF. </em> <a href="#a11"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a12">checkCoordinate</a> (const <a class="el" href="a00129.htm">Coord</a> &amp;src)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Checks a coordinate in this SRF for valid region. </em> <a href="#a12"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a13">freeCoordinate</a> (<a class="el" href="a00129.htm">Coord</a> *coord)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Frees a coordinate in this SRF. </em> <a href="#a13"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a14">setCoordinateValidationOn</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the coordinate validation ON for the changeCoordinateSRF method. </em> <a href="#a14"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a15">setCoordinateValidationOff</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the coordinate validation OFF for the changeCoordinateSRF method. </em> <a href="#a15"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="a16" doxytag="srm::BaseSRF::coordinateValidationIsOn"></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a16">coordinateValidationIsOn</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true is the coordinate validation is ON. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="a17" doxytag="srm::BaseSRF::toString"></a>
virtual const char *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a17">toString</a> ()=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a string representation of this SRF. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>virtual <a class="el" href="a00123.htm">BaseSRF</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a18">clone</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a new reference to this SRF. </em> <a href="#a18"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="a00276.htm#a14">SRM_Integer</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#a19">getId</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the creation identifier of this SRF. </em> <a href="#a19"></a><em><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="a00123.htm">BaseSRF</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#e0">createStandardSRF</a> (<a class="el" href="a00277.htm#a1089">SRM_SRF_Code</a> srf_code, <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a> rt_code)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates a Standard SRF from its SRF code. </em> <a href="#e0"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="a00123.htm">BaseSRF</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#e1">createSRFSetMember</a> (<a class="el" href="a00240.htm">SRM_SRFS_Info</a> srfs_info, <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a> rt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates an SRF from a SRF set code, a set member code specific to that set, and an ORM code. </em> <a href="#e1"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#e2">querySRFTSupport</a> (<a class="el" href="a00277.htm#a1091">SRM_SRFT_Code</a> srft_code)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Queries for the SRFT support by the implementation. </em> <a href="#e2"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>bool&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#e3">queryORMSupport</a> (<a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a> orm_code, <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a> rt_code)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Queries for the ORM/RT pair support by the implementation. </em> <a href="#e3"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="a00276.htm#a17">SRM_Long_Float</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#e4">calculateEuclideanDistance</a> (const <a class="el" href="a00129.htm">Coord</a> &amp;coord1, const <a class="el" href="a00129.htm">Coord</a> &amp;coord2)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the euclidean distance (in metres) between two coordinates. </em> <a href="#e4"></a><em><br><br></td></tr>
<tr><td colspan=2><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="b0" doxytag="srm::BaseSRF::BaseSRF"></a>
&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#b0">BaseSRF</a> (void *impl)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">No stack allocation. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="b1" doxytag="srm::BaseSRF::operator="></a>
<a class="el" href="a00123.htm">BaseSRF</a> &amp;&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#b1">operator=</a> (const <a class="el" href="a00123.htm">BaseSRF</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">No copy constructor. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="b2" doxytag="srm::BaseSRF::~BaseSRF"></a>
virtual&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#b2">~BaseSRF</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Use <a class="el" href="a00123.htm#a0">release()</a>. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="b3" doxytag="srm::BaseSRF::getImpl"></a>
void *&nbsp;</td><td class="memItemRight" valign=bottom><b>getImpl</b> () const</td></tr>

<tr><td colspan=2><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="p0" doxytag="srm::BaseSRF::_ref_cnt"></a>
unsigned int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#p0">_ref_cnt</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reference counting. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="p1" doxytag="srm::BaseSRF::_id"></a>
<a class="el" href="a00276.htm#a14">SRM_Integer</a>&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#p1">_id</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">ID for SRF creation identification. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="p2" doxytag="srm::BaseSRF::_impl"></a>
void *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#p2">_impl</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implementation data. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="p3" doxytag="srm::BaseSRF::_cache"></a>
void *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="a00123.htm#p3">_cache</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implementation data. <br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="p4" doxytag="srm::BaseSRF::_validate_coords"></a>
bool&nbsp;</td><td class="memItemRight" valign=bottom><b>_validate_coords</b></td></tr>

<tr><td colspan=2><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n0" doxytag="srm::BaseSRF::Coord3D"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>Coord3D</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n1" doxytag="srm::BaseSRF::BaseSRF_3D"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>BaseSRF_3D</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n2" doxytag="srm::BaseSRF::BaseSRF_2D"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>BaseSRF_2D</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n3" doxytag="srm::BaseSRF::BaseSRF_MapProjection"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>BaseSRF_MapProjection</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n4" doxytag="srm::BaseSRF::BaseSRF_WithEllipsoidalHeight"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>BaseSRF_WithEllipsoidalHeight</b></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a name="n5" doxytag="srm::BaseSRF::BaseSRF_WithTangentPlaneSurface"></a>
class&nbsp;</td><td class="memItemRight" valign=bottom><b>BaseSRF_WithTangentPlaneSurface</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The <a class="el" href="a00123.htm">BaseSRF</a> abstract class is the base class for all SRFs. 
<p>
SRFs are allocated by the API, and when no longer needed they should be released by calling the <a class="el" href="a00123.htm#a0">release()</a> method. <dl compact><dt><b>Author:</b></dt><dd>Warren Macchi, David Shen </dd></dl>
<dl compact><dt><b>See also:</b></dt><dd><a class="el" href="a00124.htm">BaseSRF_2D</a>, <a class="el" href="a00125.htm">BaseSRF_3D</a> </dd></dl>

<p>

<p>
Definition at line <a class="el" href="a00280.htm#l00242">242</a> of file <a class="el" href="a00280.htm">BaseSRF.h</a>.<hr><h2>Member Function Documentation</h2>
<a name="e4" doxytag="srm::BaseSRF::calculateEuclideanDistance"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="a00276.htm#a17">SRM_Long_Float</a> srm::BaseSRF::calculateEuclideanDistance </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00129.htm">Coord</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>coord1</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const <a class="el" href="a00129.htm">Coord</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>coord2</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the euclidean distance (in metres) between two coordinates. 
<p>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
<dl compact><dt><b>Note:</b></dt><dd>The input coordinates must be of the same dimension. <p>
The input coordinates can be created from any SRF. </dd></dl>
    </td>
  </tr>
</table>
<a name="a11" doxytag="srm::BaseSRF::changeCoordinateSRF"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> srm::BaseSRF::changeCoordinateSRF </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00129.htm">Coord</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>src_coord</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00129.htm">Coord</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>des_coord</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Changes a coordinate's values to this SRF. 
<p>
<dl compact><dt><b>Note:</b></dt><dd>The destination coordinate must have been created using this SRF. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>src_coord</em>&nbsp;</td><td>in: the source coordinate in some other SRF </td></tr>
    <tr><td valign=top><em>des_coord</em>&nbsp;</td><td>out: the destination coordinate in this SRF </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>validity code for the destination coordinate </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
<dl compact><dt><b>Note:</b></dt><dd>The source and destination coordinatesmust be of the same base coordinate class. They have to be both <a class="el" href="a00134.htm">Coord3D</a>, <a class="el" href="a00130.htm">Coord2D</a>, or <a class="el" href="a00158.htm">CoordSurf</a>. <p>
The conversion from one surface coordinate to another is a convenience function equivalent to promoting the source surface coordinate to a 3D coordinate, performing the conversion, then deriving the destination surface coordinate from the resulting destination 3D coordinate. </dd></dl>
    </td>
  </tr>
</table>
<a name="a12" doxytag="srm::BaseSRF::checkCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> srm::BaseSRF::checkCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="a00129.htm">Coord</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>src</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Checks a coordinate in this SRF for valid region. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>src</em>&nbsp;</td><td>in: the coodinate in this SRF </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>validity code for the coordinate </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a18" doxytag="srm::BaseSRF::clone"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="a00123.htm">BaseSRF</a> * srm::BaseSRF::clone </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns a new reference to this SRF. 
<p>
<dl compact><dt><b>See also:</b></dt><dd><a class="el" href="a00123.htm#a0">release()</a> </dd></dl>
<dl compact><dt><b>Returns:</b></dt><dd>a new pointer to this SRF </dd></dl>

<p>
Definition at line <a class="el" href="a00280.htm#l00508">508</a> of file <a class="el" href="a00280.htm">BaseSRF.h</a>.    </td>
  </tr>
</table>
<a name="e1" doxytag="srm::BaseSRF::createSRFSetMember"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="a00123.htm">BaseSRF</a>* srm::BaseSRF::createSRFSetMember </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00240.htm">SRM_SRFS_Info</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>srfs_info</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00277.htm#a1088">SRM_RT_Code</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>rt</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates an SRF from a SRF set code, a set member code specific to that set, and an ORM code. 
<p>
<dl compact><dt><b>Note:</b></dt><dd>An SRF can be directly created from: <ol>
<li>
an SRF code and an RT code for a standard SRF (see <a class="el" href="a00123.htm#e0">createStandardSRF()</a>), </li>
<li>
an SRF set code info and an RT code (see <a class="el" href="a00123.htm#e1">createSRFSetMember()</a>), or </li>
<li>
a concrete template-based SRF class (see the concrete SRF classes). </li>
</ol>
<p>
The returned SRF should be freed by calling its <a class="el" href="a00123.htm#a0">release()</a> method. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>srfs_info</em>&nbsp;</td><td>in: the set code, member code and orm code. </td></tr>
    <tr><td valign=top><em>rt</em>&nbsp;</td><td>in: the RT code to use in the created SRF </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>a pointer to an SRF set member if successful </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="e0" doxytag="srm::BaseSRF::createStandardSRF"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="a00123.htm">BaseSRF</a>* srm::BaseSRF::createStandardSRF </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00277.htm#a1089">SRM_SRF_Code</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>srf_code</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00277.htm#a1088">SRM_RT_Code</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>rt_code</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates a Standard SRF from its SRF code. 
<p>
<dl compact><dt><b>Note:</b></dt><dd>An SRF can be directly created from: <ol>
<li>
an SRF code and an RT code for a standard SRF (see <a class="el" href="a00123.htm#e0">createStandardSRF()</a>), </li>
<li>
an SRF set code info and an RT code (see <a class="el" href="a00123.htm#e1">createSRFSetMember()</a>), or </li>
<li>
a concrete template-based SRF class (see the concrete SRF classes). </li>
</ol>
<p>
The returned SRF should be freed by calling its <a class="el" href="a00123.htm#a0">release()</a> method. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>srf_code</em>&nbsp;</td><td>in: the code for a standard SRF to create </td></tr>
    <tr><td valign=top><em>rt_code</em>&nbsp;</td><td>in: the RT code to use in the created SRF </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>a pointer to an SRF if successful </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a13" doxytag="srm::BaseSRF::freeCoordinate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void srm::BaseSRF::freeCoordinate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00129.htm">Coord</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>coord</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Frees a coordinate in this SRF. 
<p>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a3" doxytag="srm::BaseSRF::get_orm"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a> srm::BaseSRF::get_orm </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's Object Reference Model code. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>an ORM code </dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>This method is deprecated. Use <a class="el" href="a00123.htm#a4">getOrm()</a> method. </dd></dl>
    </td>
  </tr>
</table>
<a name="a5" doxytag="srm::BaseSRF::get_rt"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a> srm::BaseSRF::get_rt </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's RT code. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>an RT code </dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>This method is deprecated. Use <a class="el" href="a00123.htm#a6">getRt()</a> method. </dd></dl>
    </td>
  </tr>
</table>
<a name="a7" doxytag="srm::BaseSRF::getA"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00276.htm#a17">SRM_Long_Float</a> srm::BaseSRF::getA </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's major semi-axis value (a). 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>a major semi-axis value </dd></dl>
    </td>
  </tr>
</table>
<a name="a9" doxytag="srm::BaseSRF::getClassType"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00123.htm#w31">SRF_ClassType</a> srm::BaseSRF::getClassType </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the class type of this SRF instance. 
<p>
You can use the return value of this method to cast a pointer to an SRF to its concrete template-based class. <dl compact><dt><b>Returns:</b></dt><dd>an SRF template code </dd></dl>

<p>
Implemented in <a class="el" href="a00182.htm#a2">srm::SRF_LocalSpaceAzimuthal</a>, <a class="el" href="a00173.htm#a2">srm::SRF_Celestiocentric</a>, <a class="el" href="a00174.htm#a3">srm::SRF_Celestiodetic</a>, <a class="el" href="a00175.htm#a2">srm::SRF_Celestiomagnetic</a>, <a class="el" href="a00176.htm#a2">srm::SRF_EquatorialInertial</a>, <a class="el" href="a00177.htm#a8">srm::SRF_EquidistantCylindrical</a>, <a class="el" href="a00178.htm#a2">srm::SRF_HeliosphericAriesEcliptic</a>, <a class="el" href="a00179.htm#a2">srm::SRF_HeliosphericEarthEcliptic</a>, <a class="el" href="a00180.htm#a2">srm::SRF_HeliosphericEarthEquatorial</a>, <a class="el" href="a00181.htm#a10">srm::SRF_LambertConformalConic</a>, <a class="el" href="a00183.htm#a2">srm::SRF_LocalSpacePolar</a>, <a class="el" href="a00184.htm#a4">srm::SRF_LocalSpaceRectangular2D</a>, <a class="el" href="a00185.htm#a5">srm::SRF_LocalSpaceRectangular3D</a>, <a class="el" href="a00186.htm#a8">srm::SRF_LocalTangentSpaceAzimuthalSpherical</a>, <a class="el" href="a00187.htm#a8">srm::SRF_LocalTangentSpaceCylindrical</a>, <a class="el" href="a00188.htm#a10">srm::SRF_LocalTangentSpaceEuclidean</a>, <a class="el" href="a00189.htm#a6">srm::SRF_LococentricEuclidean3D</a>, <a class="el" href="a00190.htm#a8">srm::SRF_Mercator</a>, <a class="el" href="a00191.htm#a11">srm::SRF_ObliqueMercatorSpherical</a>, <a class="el" href="a00192.htm#a3">srm::SRF_Planetodetic</a>, <a class="el" href="a00193.htm#a9">srm::SRF_PolarStereographic</a>, <a class="el" href="a00194.htm#a2">srm::SRF_SolarEcliptic</a>, <a class="el" href="a00195.htm#a2">srm::SRF_SolarEquatorial</a>, <a class="el" href="a00196.htm#a2">srm::SRF_SolarMagneticDipole</a>, <a class="el" href="a00197.htm#a2">srm::SRF_SolarMagneticEcliptic</a>, and <a class="el" href="a00198.htm#a9">srm::SRF_TransverseMercator</a>.    </td>
  </tr>
</table>
<a name="a1" doxytag="srm::BaseSRF::getCodes"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void srm::BaseSRF::getCodes </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00277.htm#a1091">SRM_SRFT_Code</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>t_code</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00277.htm#a1089">SRM_SRF_Code</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>srf_code</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00238.htm">SRM_SRFS_Code_Info</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>srfs_code_info</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the codes that identify this class. 
<p>
An SRF can be directly created from: <ol>
<li>
an SRF code for a standard SRF (see <a class="el" href="a00123.htm#e0">createStandardSRF()</a>), </li>
<li>
an SRF set code and a set member code (see <a class="el" href="a00123.htm#e1">createSRFSetMember()</a>), or </li>
<li>
a concrete template-based SRF class (see the concrete SRF classes). </li>
</ol>
All SRFs are intrinsically created from a template, hence the appropriate template code will always be returned from this method. However, if the SRF was created by either of 1) or 2) above, then this method allows you to retrieve the codes used to create it. If a code is not applicable, its value will be set to 0. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>t_code</em>&nbsp;</td><td>out: the SRF Template code </td></tr>
    <tr><td valign=top><em>srf_code</em>&nbsp;</td><td>out: the standard SRF code. It returns SRM_SRFCOD_UNSPECIFIED (0) if not created using a Standard SRF Code </td></tr>
    <tr><td valign=top><em>srfs_code_info</em>&nbsp;</td><td>out: the SRF Set and its Member code. It returns SRM_SRFSCOD_UNSPECIFIED (0) if not created using a SRFS Code </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a2" doxytag="srm::BaseSRF::getCSCode"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1080">SRM_CS_Code</a> srm::BaseSRF::getCSCode </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the CS code. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>a CS code </dd></dl>
    </td>
  </tr>
</table>
<a name="a8" doxytag="srm::BaseSRF::getF"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00276.htm#a17">SRM_Long_Float</a> srm::BaseSRF::getF </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's flattening value (f). 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>a flattening value </dd></dl>
    </td>
  </tr>
</table>
<a name="a19" doxytag="srm::BaseSRF::getId"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="a00276.htm#a14">SRM_Integer</a> srm::BaseSRF::getId </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the creation identifier of this SRF. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>the id </dd></dl>

<p>
Definition at line <a class="el" href="a00280.htm#l00480">480</a> of file <a class="el" href="a00280.htm">BaseSRF.h</a>.    </td>
  </tr>
</table>
<a name="a4" doxytag="srm::BaseSRF::getOrm"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a> srm::BaseSRF::getOrm </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's Object Reference Model code. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>an ORM code </dd></dl>
    </td>
  </tr>
</table>
<a name="a6" doxytag="srm::BaseSRF::getRt"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual <a class="el" href="a00277.htm#a1088">SRM_RT_Code</a> srm::BaseSRF::getRt </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns this SRF's RT code. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>an RT code </dd></dl>
    </td>
  </tr>
</table>
<a name="e3" doxytag="srm::BaseSRF::queryORMSupport"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> bool srm::BaseSRF::queryORMSupport </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00277.htm#a1085">SRM_ORM_Code</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>orm_code</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap><a class="el" href="a00277.htm#a1088">SRM_RT_Code</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>rt_code</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Queries for the ORM/RT pair support by the implementation. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>orm_code</em>&nbsp;</td><td>in: the object reference model code. </td></tr>
    <tr><td valign=top><em>rt_code</em>&nbsp;</td><td>in: the reference transformation code. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>true if the ORM/RT pair is supported by this implementation. </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
<dl compact><dt><b>Note:</b></dt><dd>Not all the supported SRFTs is compatible with all the supported ORM/RT pairs. </dd></dl>
    </td>
  </tr>
</table>
<a name="e2" doxytag="srm::BaseSRF::querySRFTSupport"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> bool srm::BaseSRF::querySRFTSupport </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="a00277.htm#a1091">SRM_SRFT_Code</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>srft_code</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Queries for the SRFT support by the implementation. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>srft_code</em>&nbsp;</td><td>in: the SRF Template code. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>true if the SRFT is supported by this implementation. </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a0" doxytag="srm::BaseSRF::release"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void srm::BaseSRF::release </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Releases the pointer to the SRF. 
<p>
SRF classes are reference counted, since coordinates maintain a reference to them. When all references to an SRF are released, the SRF's memory is deleted. <dl compact><dt><b>Note:</b></dt><dd>If you need to store multiple pointers to an SRF, you should use the <a class="el" href="a00123.htm#a18">clone()</a> method to obtain each pointer, and then call the <a class="el" href="a00123.htm#a0">release()</a> method for each pointer when they are no longer needed. </dd></dl>
<dl compact><dt><b>Exceptions:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>This</em>&nbsp;</td><td>method throws <a class="el" href="a00171.htm">srm::Exception</a> </td></tr>
  </table>
</dl>
<dl compact><dt><b>See also:</b></dt><dd><a class="el" href="a00123.htm#a18">clone()</a> </dd></dl>
    </td>
  </tr>
</table>
<a name="a15" doxytag="srm::BaseSRF::setCoordinateValidationOff"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void srm::BaseSRF::setCoordinateValidationOff </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the coordinate validation OFF for the changeCoordinateSRF method. 
<p>
<dl compact><dt><b>Note:</b></dt><dd>The coordinate validation is ON by default. <p>
Users should not set the validation OFF unless the coordinates are known to be ALWAYS valid. </dd></dl>
    </td>
  </tr>
</table>
<a name="a14" doxytag="srm::BaseSRF::setCoordinateValidationOn"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void srm::BaseSRF::setCoordinateValidationOn </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the coordinate validation ON for the changeCoordinateSRF method. 
<p>
<dl compact><dt><b>Note:</b></dt><dd>The coordinate validation is ON by default. <p>
Users should not set the validation OFF unless the coordinates are known to be ALWAYS valid. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="a00280.htm">BaseSRF.h</a></ul>
<hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
