<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>BaseSRF.h</h1><a href="a00245.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: BaseSRF.h,v 1.40.1.17 2009-11-05 16:17:06-05 worleym Exp $</span>
00074 
00193 <span class="preprocessor">#ifndef _BaseSRF_h</span>
00194 <span class="preprocessor"></span><span class="preprocessor">#define _BaseSRF_h</span>
00195 <span class="preprocessor"></span>
00196 <span class="preprocessor">#if !defined(_WIN32)</span>
00197 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00198 <span class="preprocessor"></span><span class="preprocessor">#elif defined(BUILD_SRM_CPP) </span><span class="comment">/* SRM CPP Case */</span>
00199 <span class="preprocessor">#if !defined(EXPORT_SRM_CPP_DLL)</span>
00200 <span class="preprocessor"></span><span class="preprocessor">#if defined(_LIB)</span>
00201 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00202 <span class="preprocessor"></span><span class="preprocessor">#elif defined(_USRDLL)</span>
00203 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL __declspec(dllexport)</span>
00204 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00205 <span class="preprocessor"></span><span class="preprocessor">#define EXPORT_SRM_CPP_DLL __declspec(dllimport)</span>
00206 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00207 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00208 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* SRM C Case */</span>
00209 <span class="preprocessor">#define EXPORT_SRM_CPP_DLL</span>
00210 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* _WIN32 &amp;&amp; EXPORT_DLL */</span>
00211 
00212 <span class="preprocessor">#include "<a class="code" href="a00277.htm">srm_types.h</a>"</span>
00213 
00214 <span class="comment">// global variable - controls whether SRF cache is used to speed</span>
00215 <span class="comment">// up coordinate conversion operations</span>
00216 <span class="keyword">extern</span> <span class="keywordtype">bool</span> g_fast_mode;
00217 
00218 <span class="keyword">namespace </span>srm
00219 {
00220 
00222 <span class="keyword">class </span>Coord;
00223 <span class="keyword">class </span>Coord2D;
00224 <span class="keyword">class </span>CoordSurf;
00225 <span class="keyword">class </span>Coord3D;
00226 <span class="keyword">class </span>Direction;
00227 <span class="keyword">class </span>Orientation;
00228 <span class="keyword">class </span>SRF_LocalTangentSpaceEuclidean;
00229 
00231 <span class="keyword">typedef</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> SRM_Vector_2D[2];
00232 <span class="keyword">typedef</span> SRM_Vector_2D  Vector2;
00233 <span class="keyword">typedef</span> <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a>  Vector3;
00234 <span class="keyword">typedef</span> <a class="code" href="a00277.htm#a1083">SRM_Matrix_3x3</a> Matrix3x3;
00235 
<a name="l00242"></a><a class="code" href="a00123.htm">00242</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF
00243 {
00244 <span class="keyword">public</span>:
00245 
<a name="l00247"></a><a class="code" href="a00123.htm#w31">00247</a>     <span class="keyword">enum</span> SRF_ClassType
00248     {
00249         SRF_TYP_TWO_D,
00250         SRF_TYP_THREE_D,
00251         SRF_TYP_WITH_TANGENT_PLANE_SURFACE,
00252         SRF_TYP_WITH_ELLIPSOIDAL_HEIGHT,
00253         SRF_TYP_MAP_PROJECTION,
00254         SRF_TYP_LSA,
00255         SRF_TYP_CC,
00256         SRF_TYP_CD,
00257         SRF_TYP_CM,
00258         SRF_TYP_EC,
00259         SRF_TYP_EI,
00260         SRF_TYP_HAEC,
00261         SRF_TYP_HEEC,
00262         SRF_TYP_HEEQ,
00263         SRF_TYP_LCC,
00264         SRF_TYP_LCE_3D,
00265         SRF_TYP_LSR_2D,
00266         SRF_TYP_LSR_3D,
00267         SRF_TYP_LTSAS,
00268         SRF_TYP_LTSC,
00269         SRF_TYP_LTSE,
00270         SRF_TYP_M,
00271         SRF_TYP_OMS,
00272         SRF_TYP_PD,
00273         SRF_TYP_LSP,
00274         SRF_TYP_PS,
00275         SRF_TYP_SEC,
00276         SRF_TYP_SEQ,
00277         SRF_TYP_SME,
00278         SRF_TYP_SMD,
00279         SRF_TYP_TM
00280     };
00281 
00296     <span class="keyword">static</span> BaseSRF *createStandardSRF( SRM_SRF_Code srf_code,
00297                                        SRM_RT_Code rt_code );
00298 
00314     <span class="keyword">static</span> BaseSRF *createSRFSetMember( <a class="code" href="a00240.htm">SRM_SRFS_Info</a> srfs_info,
00315                                         SRM_RT_Code rt );
00316 
00328     <span class="keyword">virtual</span> <span class="keywordtype">void</span> release();
00329 
00347     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getCodes( SRM_SRFT_Code &amp;t_code,
00348                            SRM_SRF_Code  &amp;srf_code,
00349                            <a class="code" href="a00238.htm">SRM_SRFS_Code_Info</a>  &amp;srfs_code_info ) <span class="keyword">const</span>;
00350 
00354     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1080">SRM_CS_Code</a> getCSCode() <span class="keyword">const</span>;
00355 
00360     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> get_orm() <span class="keyword">const</span>;
00361 
00365     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> getOrm() <span class="keyword">const</span>;
00366 
00371     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a> get_rt() <span class="keyword">const</span>;
00372 
00376     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a> getRt() <span class="keyword">const</span>;
00377 
00381     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> getA() <span class="keyword">const</span>;
00382 
00386     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> getF() <span class="keyword">const</span>;
00387 
00393     <span class="keyword">static</span> <span class="keywordtype">bool</span> querySRFTSupport( SRM_SRFT_Code srft_code );
00394 
00402     <span class="keyword">static</span> <span class="keywordtype">bool</span> queryORMSupport( SRM_ORM_Code orm_code,
00403                                  SRM_RT_Code rt_code );
00404 
00410     <span class="keyword">virtual</span> SRF_ClassType getClassType() <span class="keyword">const</span> = 0;
00411 
00414     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00415 
00429     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinateSRF( <span class="keyword">const</span> Coord &amp;src_coord, Coord &amp;des_coord );
00430 
00436     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> checkCoordinate( <span class="keyword">const</span> Coord &amp;src );
00437 
00441     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeCoordinate( Coord *coord );
00442 
00448     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateEuclideanDistance( <span class="keyword">const</span> Coord &amp;coord1,
00449                                                       <span class="keyword">const</span> Coord &amp;coord2 );
00450 
00455     <span class="keywordtype">void</span> setCoordinateValidationOn();
00456 
00461     <span class="keywordtype">void</span> setCoordinateValidationOff();
00462 
00465     <span class="keywordtype">bool</span> coordinateValidationIsOn();
00466 
00469     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *toString() = 0;
00470 
00475     <span class="keyword">virtual</span> BaseSRF *clone();
00476 
<a name="l00480"></a><a class="code" href="a00123.htm#a19">00480</a>     <a class="code" href="a00276.htm#a14">SRM_Integer</a> getId()<span class="keyword"> const</span>
00481 <span class="keyword">    </span>{
00482         <span class="keywordflow">return</span> _id;
00483     }
00484 
00485 <span class="keyword">protected</span>:
00486     <span class="keyword">friend</span> <span class="keyword">class </span>Coord3D;
00487     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_3D;
00488     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_2D;
00489     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_MapProjection;
00490     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_WithEllipsoidalHeight;
00491     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_WithTangentPlaneSurface;
00492     BaseSRF( <span class="keywordtype">void</span> *impl ); 
<a name="l00493"></a><a class="code" href="a00123.htm#b1">00493</a>     BaseSRF &amp;operator =( <span class="keyword">const</span> BaseSRF &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00494"></a><a class="code" href="a00123.htm#b2">00494</a>     <span class="keyword">virtual</span> ~BaseSRF() {} 
00495 
<a name="l00497"></a><a class="code" href="a00123.htm#p0">00497</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _ref_cnt;
<a name="l00499"></a><a class="code" href="a00123.htm#p1">00499</a>     <a class="code" href="a00276.htm#a14">SRM_Integer</a> _id;
<a name="l00501"></a><a class="code" href="a00123.htm#p2">00501</a>     <span class="keywordtype">void</span> *_impl, *_cache;
00502     <span class="keywordtype">bool</span> _validate_coords;
00503 
00504     <span class="keywordtype">void</span> *getImpl()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _impl; }
00505 };
00506 
00507 
<a name="l00508"></a><a class="code" href="a00123.htm#a18">00508</a> <span class="keyword">inline</span> BaseSRF *BaseSRF::clone()
00509 {
00510     ++<a class="code" href="a00123.htm#p0">_ref_cnt</a>;
00511     <span class="keywordflow">return</span> <span class="keyword">this</span>;
00512 }
00513 
<a name="l00514"></a><a class="code" href="a00123.htm#a10">00514</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF::isA( SRF_ClassType type )<span class="keyword"> const</span>
00515 <span class="keyword"></span>{
00516     <span class="keywordflow">return</span> <span class="keyword">false</span>;
00517 }
00518 
00519 
<a name="l00526"></a><a class="code" href="a00124.htm">00526</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF_2D : <span class="keyword">public</span> BaseSRF
00527 {
00528 <span class="keyword">public</span>:
00529 
00532     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00533 
00538     <span class="keyword">virtual</span> <a class="code" href="a00130.htm">Coord2D</a> *createCoordinate2D( <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_comp1,
00539                                          <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_comp2 ) = 0;
00540 
00544     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getCoordinate2DValues( <span class="keyword">const</span> <a class="code" href="a00130.htm">Coord2D</a> &amp;coord,
00545                                         <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_comp1,
00546                                         <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_comp2 ) <span class="keyword">const</span>;
00547 
00551     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeCoordinate2D( <a class="code" href="a00130.htm">Coord2D</a> *coord );
00552 
00559     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate2DSRF( <span class="keyword">const</span> <a class="code" href="a00130.htm">Coord2D</a> &amp;src_coord,
00560                                               <a class="code" href="a00130.htm">Coord2D</a> &amp;des_coord );
00561 
00572     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate2DArraySRF( <a class="code" href="a00130.htm">Coord2D</a>                     **src_coord_array,
00573                                              <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>        *index,
00574                                              <a class="code" href="a00130.htm">Coord2D</a>                     **des_coord_array );
00575 
00585     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate2DSRFObject( <span class="keyword">const</span> <a class="code" href="a00130.htm">Coord2D</a>                              &amp;src_coord,
00586                                               <span class="keyword">const</span> <a class="code" href="a00229.htm">SRM_ORM_Transformation_2D_Parameters</a> hst,
00587                                                     <a class="code" href="a00130.htm">Coord2D</a>                              &amp;des_coord );
00588 
00602     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate2DArraySRFObject( <a class="code" href="a00130.htm">Coord2D</a>                                    **src_coord_array,
00603                                                    <span class="keyword">const</span> <a class="code" href="a00229.htm">SRM_ORM_Transformation_2D_Parameters</a> hst,
00604                                                    <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>                       *index,
00605                                                    <a class="code" href="a00130.htm">Coord2D</a>                                    **des_coord_array );
00606 
00607 
00612     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateEuclideanDistance( <span class="keyword">const</span> <a class="code" href="a00130.htm">Coord2D</a> &amp;coord1,
00613                                                       <span class="keyword">const</span> <a class="code" href="a00130.htm">Coord2D</a> &amp;coord2 );
00614 
00615 <span class="keyword">protected</span>:
<a name="l00616"></a><a class="code" href="a00124.htm#b0">00616</a>     BaseSRF_2D( <span class="keywordtype">void</span> *impl ) : BaseSRF(impl) {} 
<a name="l00617"></a><a class="code" href="a00124.htm#b1">00617</a>     BaseSRF_2D &amp;operator =( <span class="keyword">const</span> BaseSRF_2D &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00618"></a><a class="code" href="a00124.htm#b2">00618</a>     <span class="keyword">virtual</span> ~BaseSRF_2D() {} 
00619 };
00620 
00621 
<a name="l00622"></a><a class="code" href="a00124.htm#a0">00622</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF_2D::isA( SRF_ClassType type )<span class="keyword"> const</span>
00623 <span class="keyword"></span>{
00624     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_TWO_D)
00625         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00626     <span class="keywordflow">else</span>
00627         <span class="keywordflow">return</span> BaseSRF::isA(type);
00628 }
00629 
00630 
<a name="l00637"></a><a class="code" href="a00125.htm">00637</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF_3D : <span class="keyword">public</span> BaseSRF
00638 {
00639 <span class="keyword">public</span>:
00640 
00643     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00644 
00650     <span class="keyword">virtual</span> <a class="code" href="a00134.htm">Coord3D</a> *createCoordinate3D( <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_comp1,
00651                                          <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_comp2,
00652                                          <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_comp3 ) = 0;
00653 
00657     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeCoordinate3D( <a class="code" href="a00134.htm">Coord3D</a> *coord );
00658 
00662     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getCoordinate3DValues( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;coord,
00663                                         <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_comp1,
00664                                         <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_comp2,
00665                                         <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_comp3 ) <span class="keyword">const</span>;
00666 
00674     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;src_coord,
00675                                                                      <a class="code" href="a00134.htm">Coord3D</a> &amp;des_coord );
00676 
00688     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate3DArraySRF( <a class="code" href="a00134.htm">Coord3D</a>                                    **src_coord_array,
00689                                              <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>                       *index,
00690                                              <a class="code" href="a00134.htm">Coord3D</a>                                    **des_coord_array,
00691                                              <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a>                *region_array );
00692 
00703     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRFObject( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;src_coord,
00704                                                                      <span class="keyword">const</span> <a class="code" href="a00230.htm">SRM_ORM_Transformation_3D_Parameters</a> hst,
00705                                                                            <a class="code" href="a00134.htm">Coord3D</a> &amp;des_coord );
00706 
00719     <span class="keyword">virtual</span> <span class="keywordtype">void</span> changeCoordinate3DArraySRFObject( <a class="code" href="a00134.htm">Coord3D</a>                                    **src_coord_array,
00720                                                    <span class="keyword">const</span> <a class="code" href="a00230.htm">SRM_ORM_Transformation_3D_Parameters</a> hst,
00721                                                    <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>                       *index,
00722                                                    <a class="code" href="a00134.htm">Coord3D</a>                                    **des_coord_array,
00723                                                    <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a>                *region_array );
00724 
00739     <span class="keyword">virtual</span> <span class="keywordtype">void</span> setValidRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
00740                                  <span class="keyword">const</span> <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> type,
00741                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> lower,
00742                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> upper );
00743 
00762     <span class="keyword">virtual</span> <span class="keywordtype">void</span> setExtendedValidRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
00763                                          <span class="keyword">const</span> <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> type,
00764                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> extended_lower,
00765                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> lower,
00766                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> upper,
00767                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> extended_upper );
00768 
00780     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getValidRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
00781                                        <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> &amp;type,
00782                                        <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;lower,
00783                                        <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;upper );
00784 
00798     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getExtendedValidRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
00799                                                <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> &amp;type,
00800                                                <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;extended_lower,
00801                                                <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;lower,
00802                                                <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;upper,
00803                                                <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;extended_upper );
00804 
00809     <span class="keyword">virtual</span> <a class="code" href="a00170.htm">Direction</a> *createDirection( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00810                                         <span class="keyword">const</span> <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> vec );
00811 
00816     <span class="keyword">virtual</span> <a class="code" href="a00170.htm">Direction</a> *createDirection( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00817                                         <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> vectorComp1,
00818                                         <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> vectorComp2,
00819                                         <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> vectorComp3 );
00820 
00828     <span class="keyword">virtual</span> <a class="code" href="a00170.htm">Direction</a> *createDirection();
00829 
00830 
00834     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeDirection( <a class="code" href="a00170.htm">Direction</a> *direction );
00835 
00839     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getDirectionValues( <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;direction,
00840                                      <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00841                                      <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> vec ) <span class="keyword">const</span>;
00842 
00850     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeDirectionSRF( <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;src_dir, <a class="code" href="a00170.htm">Direction</a> &amp;des_dir );
00851 
00863     <span class="keywordtype">void</span> changeDirectionArraySRF( <a class="code" href="a00170.htm">Direction</a>                   **src_direction_array,
00864                                   <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>        *index,
00865                                   <a class="code" href="a00170.htm">Direction</a>                   **des_direction_array,
00866                                   <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> *region_array );
00867 
00880     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeDirectionSRFObject
00881     (
00882         <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a>                            &amp;src_dir,
00883         <span class="keyword">const</span> <a class="code" href="a00230.htm">SRM_ORM_Transformation_3D_Parameters</a>  hst,
00884               <a class="code" href="a00170.htm">Direction</a>                            &amp;des_dir
00885     );
00886 
00904     <span class="keywordtype">void</span> changeDirectionArraySRFObject
00905     (
00906               <a class="code" href="a00170.htm">Direction</a>                            **src_direction_array,
00907         <span class="keyword">const</span> <a class="code" href="a00230.htm">SRM_ORM_Transformation_3D_Parameters</a>   hst,
00908               <a class="code" href="a00276.htm#a16">SRM_Integer_Positive</a>                  *index,
00909               <a class="code" href="a00170.htm">Direction</a>                            **des_direction_array,
00910               <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a>           *region_array
00911     );
00912 
00915     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> checkDirection( <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;direction );
00916 
00923     <span class="keyword">virtual</span> <a class="code" href="a00172.htm">Orientation</a> *createOrientation( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00924                                             <span class="keyword">const</span> <a class="code" href="a00277.htm#a1083">SRM_Matrix_3x3</a> mat );
00925 
00934     <span class="keyword">virtual</span> <a class="code" href="a00172.htm">Orientation</a> *createOrientation( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00935                                             <span class="keyword">const</span> <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> vec1,
00936                                             <span class="keyword">const</span> <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> vec2,
00937                                             <span class="keyword">const</span> <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> vec3 );
00938 
00948     <span class="keyword">virtual</span> <a class="code" href="a00172.htm">Orientation</a> *createOrientation( <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;dir1,
00949                                             <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;dir2,
00950                                             <span class="keyword">const</span> <a class="code" href="a00170.htm">Direction</a> &amp;dir3 );
00951 
00960     <span class="keyword">virtual</span> <a class="code" href="a00172.htm">Orientation</a> *createOrientation();
00961 
00965     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeOrientation( <a class="code" href="a00172.htm">Orientation</a> *orientation );
00966 
00970     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getOrientationValues( <span class="keyword">const</span> <a class="code" href="a00172.htm">Orientation</a> &amp;orientation,
00971                                              <a class="code" href="a00134.htm">Coord3D</a> &amp;ref_coord,
00972                                              <a class="code" href="a00277.htm#a1083">SRM_Matrix_3x3</a> mat ) <span class="keyword">const</span>;
00973 
00977     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> checkOrientation( <span class="keyword">const</span> <a class="code" href="a00172.htm">Orientation</a> &amp;orientation );
00978 
00987     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeOrientationSRF
00988     (
00989         <span class="keyword">const</span> <a class="code" href="a00172.htm">Orientation</a> &amp;src_orient,
00990               <a class="code" href="a00172.htm">Orientation</a> &amp;des_orient
00991     );
00992 
00996     <span class="keyword">virtual</span> <span class="keywordtype">void</span> instanceAbstractSpaceCoordinate( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;src_coord,
00997                                                   <span class="keyword">const</span> <a class="code" href="a00172.htm">Orientation</a> &amp;orientation,
00998                                                   <a class="code" href="a00134.htm">Coord3D</a> &amp;des_coord );
00999 
01009     <span class="keyword">static</span> <a class="code" href="a00238.htm">SRM_SRFS_Code_Info</a> getNaturalSRFSetMemberCode(<span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;src_coord,
01010                                                                <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a>  orm_dst,
01011                                                                <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>   rt_dst,
01012                                                                <a class="code" href="a00277.htm#a1092">SRM_SRFS_Code</a> tgt_srfs);
01013 
01023     <span class="keyword">static</span> BaseSRF_3D* getNaturalSRFSetMember( <a class="code" href="a00134.htm">Coord3D</a> &amp;src_coord,
01024                                                <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm_dst,
01025                                                <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a> rt_dst,
01026                                                <a class="code" href="a00277.htm#a1092">SRM_SRFS_Code</a> tgt_srfs);
01027 
01032     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateEuclideanDistance( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;coord1,
01033                                                       <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;coord2 );
01034 
01035 <span class="keyword">protected</span>:
<a name="l01036"></a><a class="code" href="a00125.htm#b0">01036</a>     BaseSRF_3D( <span class="keywordtype">void</span> *impl ) : BaseSRF(impl) {} 
<a name="l01037"></a><a class="code" href="a00125.htm#b1">01037</a>     BaseSRF_3D &amp;operator =( <span class="keyword">const</span> BaseSRF_3D &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l01038"></a><a class="code" href="a00125.htm#b2">01038</a>     <span class="keyword">virtual</span> ~BaseSRF_3D() {} 
01039 };
01040 
01041 
<a name="l01042"></a><a class="code" href="a00125.htm#a0">01042</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF_3D::isA( SRF_ClassType type )<span class="keyword"> const</span>
01043 <span class="keyword"></span>{
01044     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_THREE_D)
01045         <span class="keywordflow">return</span> <span class="keyword">true</span>;
01046     <span class="keywordflow">else</span>
01047         <span class="keywordflow">return</span> BaseSRF::isA(type);
01048 }
01049 
01050 
<a name="l01058"></a><a class="code" href="a00128.htm">01058</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF_WithTangentPlaneSurface : <span class="keyword">public</span> BaseSRF_3D
01059 {
01060 <span class="keyword">public</span>:
01061 
01064     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
01065 
01069     <span class="keyword">virtual</span> <a class="code" href="a00158.htm">CoordSurf</a> *createSurfaceCoordinate( <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_surf_comp1,
01070                                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_surf_comp2 ) = 0;
01071 
01075     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getSurfaceCoordinateValues( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord_surf,
01076                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_surf_comp1,
01077                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_surf_comp2 ) <span class="keyword">const</span>;
01078 
01082     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeSurfaceCoordinate( <a class="code" href="a00158.htm">CoordSurf</a> *coord_surf );
01083 
01087     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getAssociatedSurfaceCoordinate( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;coord,
01088                                                  <a class="code" href="a00158.htm">CoordSurf</a> &amp;on_surface_coord );
01089 
01094     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getPromotedSurfaceCoordinate( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord,
01095                                                <a class="code" href="a00134.htm">Coord3D</a> &amp;three_d_coord );
01096 
01101     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateEuclideanDistance( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord1,
01102                                                       <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord2 );
01103 
01104 <span class="keyword">protected</span>:
<a name="l01105"></a><a class="code" href="a00128.htm#b0">01105</a>     BaseSRF_WithTangentPlaneSurface( <span class="keywordtype">void</span> *impl ) : BaseSRF_3D(impl) {} 
<a name="l01106"></a><a class="code" href="a00128.htm#b1">01106</a>     BaseSRF_WithTangentPlaneSurface &amp;operator =( <span class="keyword">const</span> BaseSRF_WithTangentPlaneSurface &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l01107"></a><a class="code" href="a00128.htm#b2">01107</a>     <span class="keyword">virtual</span> ~BaseSRF_WithTangentPlaneSurface() {} 
01108 };
01109 
01110 
<a name="l01111"></a><a class="code" href="a00128.htm#a0">01111</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF_WithTangentPlaneSurface::isA( SRF_ClassType type )<span class="keyword"> const</span>
01112 <span class="keyword"></span>{
01113     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_WITH_TANGENT_PLANE_SURFACE)
01114         <span class="keywordflow">return</span> <span class="keyword">true</span>;
01115     <span class="keywordflow">else</span>
01116         <span class="keywordflow">return</span> BaseSRF_3D::isA(type);
01117 }
01118 
01119 
<a name="l01127"></a><a class="code" href="a00127.htm">01127</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF_WithEllipsoidalHeight : <span class="keyword">public</span> BaseSRF_3D
01128 {
01129 <span class="keyword">public</span>:
01130 
01133     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
01134 
01138     <span class="keyword">virtual</span> <a class="code" href="a00158.htm">CoordSurf</a> *createSurfaceCoordinate( <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_surf_comp1,
01139                                                 <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> coord_surf_comp2 ) = 0;
01140 
01144     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getSurfaceCoordinateValues( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord_surf,
01145                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_surf_comp1,
01146                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;coord_surf_comp2 ) <span class="keyword">const</span>;
01147 
01151     <span class="keyword">virtual</span> <span class="keywordtype">void</span> freeSurfaceCoordinate( <a class="code" href="a00158.htm">CoordSurf</a> *coord_surf );
01152 
01156     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getAssociatedSurfaceCoordinate( <span class="keyword">const</span> <a class="code" href="a00134.htm">Coord3D</a> &amp;coord,
01157                                                  <a class="code" href="a00158.htm">CoordSurf</a> &amp;on_surface_coord );
01158 
01163     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getPromotedSurfaceCoordinate( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord,
01164                                                <a class="code" href="a00134.htm">Coord3D</a> &amp;three_d_coord );
01165 
01170     <span class="keyword">virtual</span> <a class="code" href="a00188.htm">SRF_LocalTangentSpaceEuclidean</a>
01171       *createLocalTangentSpaceEuclideanSRF(
01172                                            <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord,
01173                                            <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> azimuth,
01174                                            <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_x_origin,
01175                                            <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_y_origin,
01176                                            <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> offset_height );
01177 
01187     <span class="keyword">static</span> <a class="code" href="a00238.htm">SRM_SRFS_Code_Info</a> getNaturalSRFSetMemberCode( <a class="code" href="a00158.htm">CoordSurf</a> &amp;src_coord,
01188                                                           <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm_dst,
01189                                                           <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a> rt_dst,
01190                                                           <a class="code" href="a00277.htm#a1092">SRM_SRFS_Code</a> tgt_srfs);
01191 
01192 
01202     <span class="keyword">static</span> BaseSRF_3D* getNaturalSRFSetMember( <a class="code" href="a00158.htm">CoordSurf</a> &amp;src_coord,
01203                                                <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm_dst,
01204                                                <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a> rt_dst,
01205                                                <a class="code" href="a00277.htm#a1092">SRM_SRFS_Code</a> tgt_srfs);
01206 
01211     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateEuclideanDistance( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord1,
01212                                                       <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;coord2 );
01213 
01218     <span class="keyword">static</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateGeodesicDistance( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;src_coord,
01219                                                      <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;des_coord );
01220 
01224     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateVerticalSeparationOffset( <a class="code" href="a00277.htm#a1081">SRM_DSS_Code</a> vos,
01225                                                               <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord );
01226 
01227 <span class="keyword">protected</span>:
<a name="l01228"></a><a class="code" href="a00127.htm#b0">01228</a>     BaseSRF_WithEllipsoidalHeight( <span class="keywordtype">void</span> *impl ) : BaseSRF_3D(impl) {} 
<a name="l01229"></a><a class="code" href="a00127.htm#b1">01229</a>     BaseSRF_WithEllipsoidalHeight &amp;operator =( <span class="keyword">const</span> BaseSRF_WithEllipsoidalHeight &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l01230"></a><a class="code" href="a00127.htm#b2">01230</a>     <span class="keyword">virtual</span> ~BaseSRF_WithEllipsoidalHeight() {} 
01231 };
01232 
01233 
<a name="l01234"></a><a class="code" href="a00127.htm#a0">01234</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF_WithEllipsoidalHeight::isA( SRF_ClassType type )<span class="keyword"> const</span>
01235 <span class="keyword"></span>{
01236     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_WITH_ELLIPSOIDAL_HEIGHT)
01237         <span class="keywordflow">return</span> <span class="keyword">true</span>;
01238     <span class="keywordflow">else</span>
01239         <span class="keywordflow">return</span> BaseSRF_3D::isA(type);
01240 }
01241 
01242 
<a name="l01250"></a><a class="code" href="a00126.htm">01250</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL BaseSRF_MapProjection : <span class="keyword">public</span> BaseSRF_WithEllipsoidalHeight
01251 {
01252 <span class="keyword">public</span>:
01253 
01256     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
01257 
01272     <span class="keyword">virtual</span> <span class="keywordtype">void</span> setValidGeodeticRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
01273                                          <span class="keyword">const</span> <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> type,
01274                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> lower,
01275                                          <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> upper );
01276 
01295     <span class="keyword">virtual</span> <span class="keywordtype">void</span> setExtendedValidGeodeticRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
01296                                                  <span class="keyword">const</span> <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> type,
01297                                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> extended_lower,
01298                                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> lower,
01299                                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> upper,
01300                                                  <span class="keyword">const</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> extended_upper );
01301 
01313     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getValidGeodeticRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
01314                                          <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> &amp;type,
01315                                          <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;lower,
01316                                          <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;upper );
01317 
01331     <span class="keyword">virtual</span> <span class="keywordtype">void</span> getExtendedValidGeodeticRegion( <span class="keyword">const</span> <a class="code" href="a00276.htm#a14">SRM_Integer</a> component,
01332                                                  <a class="code" href="a00277.htm#a1123">SRM_Interval_Type</a> &amp;type,
01333                                                  <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;extended_lower,
01334                                                  <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;lower,
01335                                                  <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;upper,
01336                                                  <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> &amp;extended_upper );
01337 
01342     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateConvergenceOfTheMeridian( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord );
01343 
01347     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculatePointDistortion( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;surf_coord );
01348 
01352     <span class="keyword">virtual</span> <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> calculateMapAzimuth( <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;src_coord,
01353                                                 <span class="keyword">const</span> <a class="code" href="a00158.htm">CoordSurf</a> &amp;des_coord );
01354 
01355 <span class="keyword">protected</span>:
<a name="l01356"></a><a class="code" href="a00126.htm#b0">01356</a>     BaseSRF_MapProjection( <span class="keywordtype">void</span> *impl ) : BaseSRF_WithEllipsoidalHeight(impl) {} 
<a name="l01357"></a><a class="code" href="a00126.htm#b1">01357</a>     BaseSRF_MapProjection &amp;operator =( <span class="keyword">const</span> BaseSRF_MapProjection &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l01358"></a><a class="code" href="a00126.htm#b2">01358</a>     <span class="keyword">virtual</span> ~BaseSRF_MapProjection() {} 
01359 };
01360 
01361 
<a name="l01362"></a><a class="code" href="a00126.htm#a0">01362</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> BaseSRF_MapProjection::isA( SRF_ClassType type )<span class="keyword"> const</span>
01363 <span class="keyword"></span>{
01364     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_MAP_PROJECTION)
01365         <span class="keywordflow">return</span> <span class="keyword">true</span>;
01366     <span class="keywordflow">else</span>
01367         <span class="keywordflow">return</span> BaseSRF_WithEllipsoidalHeight::isA(type);
01368 }
01369 
01370 } <span class="comment">// namespace srm</span>
01371 
01372 <span class="preprocessor">#endif // _BaseSRF_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
