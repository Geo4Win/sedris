<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Celestiodetic.h</h1><a href="a00247.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: Celestiodetic.h,v 1.18 2008-10-21 12:27:19-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _Celestiodetic_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _Celestiodetic_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00174.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_Celestiodetic: <span class="keyword">public</span> <a class="code" href="a00127.htm">BaseSRF_WithEllipsoidalHeight</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_Celestiodetic* create( <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                       <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt );
00098 
<a name="l00102"></a><a class="code" href="a00174.htm#e1">00102</a>     <span class="keyword">static</span> SRF_Celestiodetic* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00103     {
00104         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code, srf_params.<a class="code" href="a00235.htm#o1">rt_code</a> );
00105     }
00106 
00109     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00110                                 SRM_Long_Float coord_comp2,
00111                                 SRM_Long_Float coord_comp3 );
00112 
00115     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00116                                        SRM_Long_Float coord_surf_comp2 );
00117 
00120     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00121 
<a name="l00124"></a><a class="code" href="a00174.htm#a3">00124</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00125 <span class="keyword">    </span>{
00126         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_CD;
00127     }
00128 
00132     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_Celestiodetic &amp;srf ) <span class="keyword">const</span>;
00133 
00137     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_Celestiodetic &amp;rhs ) <span class="keyword">const</span>;
00138 
00142     SRF_Celestiodetic* makeCopy() <span class="keyword">const</span>;
00143 
00151     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF(<span class="keyword">const</span> Coord3D &amp;src_coord,
00152                                                                     Coord3D &amp;des_coord );
00153 
00157     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00158 
00159 <span class="keyword">protected</span>:
00160     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00161     SRF_Celestiodetic( <span class="keywordtype">void</span> *impl ); 
<a name="l00162"></a><a class="code" href="a00174.htm#b1">00162</a>     SRF_Celestiodetic &amp;operator =( <span class="keyword">const</span> SRF_Celestiodetic &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00163     <span class="keyword">virtual</span> ~SRF_Celestiodetic(); 
00164 };
00165 
00166 
<a name="l00167"></a><a class="code" href="a00174.htm#a2">00167</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_Celestiodetic::isA( SRF_ClassType type )<span class="keyword"> const</span>
00168 <span class="keyword"></span>{
00169     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_CD)
00170         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00171     <span class="keywordflow">else</span>
00172         <span class="keywordflow">return</span> BaseSRF_WithEllipsoidalHeight::isA(type);
00173 };
00174 
00175 
00177 <span class="keyword">typedef</span> SRF_Celestiodetic <a class="code" href="a00174.htm">SRF_CD</a>;
00178 
00179 
<a name="l00184"></a><a class="code" href="a00136.htm">00184</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_Celestiodetic: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00185 {
00186 <span class="keyword">public</span>:
<a name="l00189"></a><a class="code" href="a00136.htm#a0">00189</a>     Coord3D_Celestiodetic(SRF_Celestiodetic *srf,
00190                           SRM_Long_Float longitude = 0.0,
00191                           SRM_Long_Float latitude = 0.0,
00192                           SRM_Long_Float ellipsoidal_height = 0.0 )
00193     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00194     {
00195         setComponentValues(longitude, latitude, ellipsoidal_height);
00196     }
00197 
<a name="l00200"></a><a class="code" href="a00136.htm#a1">00200</a>     Coord3D_Celestiodetic( <span class="keyword">const</span> Coord3D_Celestiodetic &amp;coord )
00201     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00202     {
00203         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00204     }
00205 
<a name="l00211"></a><a class="code" href="a00136.htm#a2">00211</a>     <span class="keywordtype">void</span> copyTo( Coord3D_Celestiodetic &amp;coord )<span class="keyword"> const</span>
00212 <span class="keyword">    </span>{
00213         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00214             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00215 
00216         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00217         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00218         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00219     }
00220 
<a name="l00224"></a><a class="code" href="a00136.htm#a3">00224</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_Celestiodetic &amp;coord )<span class="keyword"> const</span>
00225 <span class="keyword">    </span>{
00226         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00227                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00228                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00229                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00230     }
00231 
<a name="l00234"></a><a class="code" href="a00136.htm#a4">00234</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float longitude, SRM_Long_Float latitude, SRM_Long_Float ellipsoidal_height )
00235     {
00236         _values[0] = longitude;
00237         _values[1] = latitude;
00238         _values[2] = ellipsoidal_height;
00239     }
00240 
<a name="l00243"></a><a class="code" href="a00136.htm#a5">00243</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_longitude()<span class="keyword"> const</span>
00244 <span class="keyword">    </span>{
00245         <span class="keywordflow">return</span> _values[0];
00246     }
00247 
<a name="l00250"></a><a class="code" href="a00136.htm#a6">00250</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude()<span class="keyword"> const</span>
00251 <span class="keyword">    </span>{
00252         <span class="keywordflow">return</span> _values[1];
00253     }
00254 
<a name="l00257"></a><a class="code" href="a00136.htm#a7">00257</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_ellipsoidal_height()<span class="keyword"> const</span>
00258 <span class="keyword">    </span>{
00259         <span class="keywordflow">return</span> _values[2];
00260     }
00261 
<a name="l00264"></a><a class="code" href="a00136.htm#a8">00264</a>     <span class="keywordtype">void</span> set_longitude( SRM_Long_Float value )
00265     {
00266         _values[0] = value;
00267     }
00268 
<a name="l00271"></a><a class="code" href="a00136.htm#a9">00271</a>     <span class="keywordtype">void</span> set_latitude( SRM_Long_Float value )
00272     {
00273         _values[1] = value;
00274     }
00275 
<a name="l00278"></a><a class="code" href="a00136.htm#a10">00278</a>     <span class="keywordtype">void</span> set_ellipsoidal_height( SRM_Long_Float value )
00279     {
00280         _values[2] = value;
00281     }
00282 
00285     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00286 
<a name="l00289"></a><a class="code" href="a00136.htm#a12">00289</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00290 <span class="keyword">    </span>{
00291         <span class="keywordflow">return</span> Coord::COORD_TYP_CD;
00292     }
00293 
00296     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_Celestiodetic &amp;rhs ) <span class="keyword">const</span>;
00297 
<a name="l00303"></a><a class="code" href="a00136.htm#a14">00303</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_Celestiodetic &amp;rhs )<span class="keyword"> const</span>
00304 <span class="keyword">    </span>{
00305         <span class="keywordflow">return</span> ((*(SRF_Celestiodetic*)(this-&gt;_srf)) == (*(SRF_Celestiodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00306     }
00307 
<a name="l00312"></a><a class="code" href="a00136.htm#a15">00312</a>     Coord3D_Celestiodetic &amp;operator= ( <span class="keyword">const</span> Coord3D_Celestiodetic &amp;rhs )
00313     {
00314         <span class="keywordflow">if</span>((*(SRF_Celestiodetic*)(this-&gt;_srf)) == (*(SRF_Celestiodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00315         {
00316             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00317             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00318             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00319         }
00320         <span class="keywordflow">else</span>
00321             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00322                             <span class="stringliteral">"Coord3D_Celestiodetic op=: incompatible rhs coordinate"</span>);
00323 
00324         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00325     }
00326 };
00327 
00328 
<a name="l00329"></a><a class="code" href="a00136.htm#a11">00329</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_Celestiodetic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00330 <span class="keyword"></span>{
00331     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_CD)
00332         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00333     <span class="keywordflow">else</span>
00334         <span class="keywordflow">return</span> Coord3D::isA(type);
00335 };
00336 
00337 
00339 <span class="keyword">typedef</span> Coord3D_Celestiodetic <a class="code" href="a00136.htm">Coord3D_CD</a>;
00340 
00341 
<a name="l00346"></a><a class="code" href="a00159.htm">00346</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_Celestiodetic: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00347 {
00348 <span class="keyword">public</span>:
<a name="l00351"></a><a class="code" href="a00159.htm#a0">00351</a>     CoordSurf_Celestiodetic(SRF_Celestiodetic *srf,
00352                             SRM_Long_Float longitude = 0.0,
00353                             SRM_Long_Float latitude = 0.0 )
00354     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00355     {
00356         setComponentValues(longitude, latitude);
00357     }
00358 
<a name="l00361"></a><a class="code" href="a00159.htm#a1">00361</a>     CoordSurf_Celestiodetic( <span class="keyword">const</span> CoordSurf_Celestiodetic &amp;coord )
00362     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00363     {
00364         setComponentValues( coord._values[0], coord._values[1] );
00365     }
00366 
<a name="l00372"></a><a class="code" href="a00159.htm#a2">00372</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_Celestiodetic &amp;coord )<span class="keyword"> const</span>
00373 <span class="keyword">    </span>{
00374         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00375             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00376 
00377         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00378         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00379     }
00380 
<a name="l00384"></a><a class="code" href="a00159.htm#a3">00384</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_Celestiodetic &amp;coord )<span class="keyword"> const</span>
00385 <span class="keyword">    </span>{
00386         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00387                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00388                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00389     }
00390 
<a name="l00393"></a><a class="code" href="a00159.htm#a4">00393</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float longitude, SRM_Long_Float latitude )
00394     {
00395         _values[0] = longitude;
00396         _values[1] = latitude;
00397     }
00398 
<a name="l00401"></a><a class="code" href="a00159.htm#a5">00401</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_longitude()<span class="keyword"> const</span>
00402 <span class="keyword">    </span>{
00403         <span class="keywordflow">return</span> _values[0];
00404     }
00405 
<a name="l00408"></a><a class="code" href="a00159.htm#a6">00408</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude()<span class="keyword"> const</span>
00409 <span class="keyword">    </span>{
00410         <span class="keywordflow">return</span> _values[1];
00411     }
00412 
<a name="l00415"></a><a class="code" href="a00159.htm#a7">00415</a>     <span class="keywordtype">void</span> set_longitude( SRM_Long_Float value )
00416     {
00417         _values[0] = value;
00418     }
00419 
<a name="l00422"></a><a class="code" href="a00159.htm#a8">00422</a>     <span class="keywordtype">void</span> set_latitude( SRM_Long_Float value )
00423     {
00424         _values[1] = value;
00425     }
00426 
00429     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00430 
<a name="l00433"></a><a class="code" href="a00159.htm#a10">00433</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00434 <span class="keyword">    </span>{
00435         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_CD;
00436     }
00437 
00440     <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> CoordSurf_Celestiodetic &amp;rhs) <span class="keyword">const</span>;
00441 
<a name="l00447"></a><a class="code" href="a00159.htm#a12">00447</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_Celestiodetic &amp;rhs )<span class="keyword"> const</span>
00448 <span class="keyword">    </span>{
00449         <span class="keywordflow">return</span> ((*(SRF_Celestiodetic*)(this-&gt;_srf)) == (*(SRF_Celestiodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00450     }
00451 
<a name="l00456"></a><a class="code" href="a00159.htm#a13">00456</a>     CoordSurf_Celestiodetic &amp;operator= ( <span class="keyword">const</span> CoordSurf_Celestiodetic &amp;rhs )
00457     {
00458         <span class="keywordflow">if</span>((*(SRF_Celestiodetic*)(this-&gt;_srf)) == (*(SRF_Celestiodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00459         {
00460             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00461             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00462         }
00463         <span class="keywordflow">else</span>
00464             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00465                           <span class="stringliteral">"CoordSurf_Celestiodetic op=: incompatible rhs coordinate"</span>);
00466 
00467         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00468     }
00469 };
00470 
00471 
<a name="l00472"></a><a class="code" href="a00159.htm#a9">00472</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_Celestiodetic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00473 <span class="keyword"></span>{
00474     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_CD)
00475         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00476     <span class="keywordflow">else</span>
00477         <span class="keywordflow">return</span> CoordSurf::isA(type);
00478 };
00479 
00480 
00482 <span class="keyword">typedef</span> CoordSurf_Celestiodetic <a class="code" href="a00159.htm">CoordSurf_CD</a>;
00483 
00484 } <span class="comment">// namespace srm</span>
00485 
00486 <span class="preprocessor">#endif // _Celestiodetic_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
