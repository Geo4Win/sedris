<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>LocalSpaceRectangular2D.h</h1><a href="a00260.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: LocalSpaceRectangular2D.h,v 1.18 2009-10-12 17:23:18-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _LocalSpaceRectangular2D_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _LocalSpaceRectangular2D_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00184.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_LocalSpaceRectangular2D: <span class="keyword">public</span> <a class="code" href="a00124.htm">BaseSRF_2D</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_LocalSpaceRectangular2D* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                                      <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00098                                                <span class="keyword">const</span> <a class="code" href="a00216.htm">SRM_LSR_2D_Parameters</a> &amp;params);
00099 
00103     <span class="keyword">static</span> SRF_LocalSpaceRectangular2D* create(
00104                                                <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00105                                                <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00106                                                <a class="code" href="a00277.htm#a1121">SRM_Axis_Direction</a> forward_direction
00107                                                );
00108 
<a name="l00112"></a><a class="code" href="a00184.htm#e2">00112</a>     <span class="keyword">static</span> SRF_LocalSpaceRectangular2D* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00113     {
00114           <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00115                          srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00116                          srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.lsr_2d_srf_parameters );
00117     }
00118 
00121     Coord2D* createCoordinate2D(SRM_Long_Float coord_comp1,
00122                                 SRM_Long_Float coord_comp2 );
00123 
00127     <span class="keyword">const</span> <a class="code" href="a00216.htm">SRM_LSR_2D_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00128 
00132     <a class="code" href="a00277.htm#a1121">SRM_Axis_Direction</a> get_forward_direction() <span class="keyword">const</span>;
00133 
00136     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00137 
<a name="l00140"></a><a class="code" href="a00184.htm#a4">00140</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00141 <span class="keyword">    </span>{
00142         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_LSR_2D;
00143     }
00144 
00148     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_LocalSpaceRectangular2D &amp;srf ) <span class="keyword">const</span>;
00149 
00153     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_LocalSpaceRectangular2D &amp;rhs ) <span class="keyword">const</span>;
00154 
00158     SRF_LocalSpaceRectangular2D* makeCopy() <span class="keyword">const</span>;
00159 
00163     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00164 
00165 <span class="keyword">protected</span>:
<a name="l00166"></a><a class="code" href="a00184.htm#b0">00166</a>     SRF_LocalSpaceRectangular2D( <span class="keywordtype">void</span> *impl ) : <a class="code" href="a00124.htm">BaseSRF_2D</a>(impl) {} 
<a name="l00167"></a><a class="code" href="a00184.htm#b1">00167</a>     SRF_LocalSpaceRectangular2D &amp;operator =( <span class="keyword">const</span> SRF_LocalSpaceRectangular2D &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00168"></a><a class="code" href="a00184.htm#b2">00168</a>     <span class="keyword">virtual</span> ~SRF_LocalSpaceRectangular2D() {} 
00169 };
00170 
00171 
<a name="l00172"></a><a class="code" href="a00184.htm#a3">00172</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_LocalSpaceRectangular2D::isA( SRF_ClassType type )<span class="keyword"> const</span>
00173 <span class="keyword"></span>{
00174     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_LSR_2D)
00175         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00176     <span class="keywordflow">else</span>
00177         <span class="keywordflow">return</span> BaseSRF_2D::isA(type);
00178 };
00179 
00180 
00182 <span class="keyword">typedef</span> SRF_LocalSpaceRectangular2D <a class="code" href="a00184.htm">SRF_LSR_2D</a>;
00183 
00184 
<a name="l00189"></a><a class="code" href="a00133.htm">00189</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord2D_LocalSpaceRectangular2D: <span class="keyword">public</span> <a class="code" href="a00130.htm">Coord2D</a>
00190 {
00191 <span class="keyword">public</span>:
<a name="l00194"></a><a class="code" href="a00133.htm#a0">00194</a>     Coord2D_LocalSpaceRectangular2D(SRF_LocalSpaceRectangular2D *srf,
00195                                     SRM_Long_Float u = 0.0,
00196                                     SRM_Long_Float v = 0.0 )
00197     : <a class="code" href="a00130.htm">Coord2D</a>(srf)
00198     {
00199         setComponentValues(u, v);
00200     }
00201 
<a name="l00204"></a><a class="code" href="a00133.htm#a1">00204</a>     Coord2D_LocalSpaceRectangular2D( <span class="keyword">const</span> Coord2D_LocalSpaceRectangular2D &amp;coord )
00205     : <a class="code" href="a00130.htm">Coord2D</a>(coord._srf)
00206     {
00207         setComponentValues( coord._values[0], coord._values[1] );
00208     }
00209 
<a name="l00215"></a><a class="code" href="a00133.htm#a2">00215</a>     <span class="keywordtype">void</span> copyTo( Coord2D_LocalSpaceRectangular2D &amp;coord )<span class="keyword"> const</span>
00216 <span class="keyword">    </span>{
00217         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00218             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00219 
00220         coord.<a class="code" href="a00130.htm#p0">_values</a>[0] = _values[0];
00221         coord.<a class="code" href="a00130.htm#p0">_values</a>[1] = _values[1];
00222     }
00223 
<a name="l00227"></a><a class="code" href="a00133.htm#a3">00227</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord2D_LocalSpaceRectangular2D &amp;coord )<span class="keyword"> const</span>
00228 <span class="keyword">    </span>{
00229         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00230                 _values[0] == coord.<a class="code" href="a00130.htm#p0">_values</a>[0] &amp;&amp;
00231                 _values[1] == coord.<a class="code" href="a00130.htm#p0">_values</a>[1] );
00232     }
00233 
<a name="l00236"></a><a class="code" href="a00133.htm#a4">00236</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float u, SRM_Long_Float v )
00237     {
00238         _values[0] = u;
00239         _values[1] = v;
00240     }
00241 
<a name="l00244"></a><a class="code" href="a00133.htm#a5">00244</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_u()<span class="keyword"> const</span>
00245 <span class="keyword">    </span>{
00246         <span class="keywordflow">return</span> _values[0];
00247     }
00248 
<a name="l00251"></a><a class="code" href="a00133.htm#a6">00251</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_v()<span class="keyword"> const</span>
00252 <span class="keyword">    </span>{
00253         <span class="keywordflow">return</span> _values[1];
00254     }
00255 
<a name="l00258"></a><a class="code" href="a00133.htm#a7">00258</a>     <span class="keywordtype">void</span> set_u( SRM_Long_Float value )
00259     {
00260         _values[0] = value;
00261     }
00262 
<a name="l00265"></a><a class="code" href="a00133.htm#a8">00265</a>     <span class="keywordtype">void</span> set_v( SRM_Long_Float value )
00266     {
00267         _values[1] = value;
00268     }
00269 
00272     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00273 
<a name="l00276"></a><a class="code" href="a00133.htm#a10">00276</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00277 <span class="keyword">    </span>{
00278         <span class="keywordflow">return</span> Coord::COORD_TYP_LSR_2D;
00279     }
00280 
00283     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord2D_LocalSpaceRectangular2D &amp;rhs ) <span class="keyword">const</span>;
00284 
<a name="l00290"></a><a class="code" href="a00133.htm#a12">00290</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord2D_LocalSpaceRectangular2D &amp;rhs )<span class="keyword"> const</span>
00291 <span class="keyword">    </span>{
00292         <span class="keywordflow">return</span> ((*(SRF_LocalSpaceRectangular2D*)(this-&gt;_srf)) == (*(SRF_LocalSpaceRectangular2D*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00293     }
00294 
<a name="l00299"></a><a class="code" href="a00133.htm#a13">00299</a>     Coord2D_LocalSpaceRectangular2D &amp;operator= ( <span class="keyword">const</span> Coord2D_LocalSpaceRectangular2D &amp;rhs )
00300     {
00301         <span class="keywordflow">if</span>((*(SRF_LocalSpaceRectangular2D*)(this-&gt;_srf)) == (*(SRF_LocalSpaceRectangular2D*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00302         {
00303             _values[0] = rhs.<a class="code" href="a00130.htm#p0">_values</a>[0];
00304             _values[1] = rhs.<a class="code" href="a00130.htm#p0">_values</a>[1];
00305         }
00306         <span class="keywordflow">else</span>
00307             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00308                             <span class="stringliteral">"Coord2D_LocalSpaceRectangular2D op=: incompatible rhs coordinate"</span>);
00309 
00310         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00311     }
00312 };
00313 
00314 
<a name="l00315"></a><a class="code" href="a00133.htm#a9">00315</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord2D_LocalSpaceRectangular2D::isA( Coord_ClassType type )<span class="keyword"> const</span>
00316 <span class="keyword"></span>{
00317     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_LSR_2D)
00318         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00319     <span class="keywordflow">else</span>
00320         <span class="keywordflow">return</span> Coord2D::isA(type);
00321 };
00322 
00323 
00325 <span class="keyword">typedef</span> Coord2D_LocalSpaceRectangular2D <a class="code" href="a00133.htm">Coord2D_LSR_2D</a>;
00326 
00327 } <span class="comment">// namespace srm</span>
00328 
00329 <span class="preprocessor">#endif // _LocalSpaceRectangular2D_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
