<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>LocalTangentSpaceCylindrical.h</h1><a href="a00263.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: LocalTangentSpaceCylindrical.h,v 1.18 2009-10-12 16:47:01-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _LocalTangentSpaceCylindrical_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _LocalTangentSpaceCylindrical_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00187.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_LocalTangentSpaceCylindrical: <span class="keyword">public</span> <a class="code" href="a00128.htm">BaseSRF_WithTangentPlaneSurface</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_LocalTangentSpaceCylindrical* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                                           <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00098                                                     <span class="keyword">const</span> <a class="code" href="a00213.htm">SRM_Local_Tangent_Parameters</a> &amp;params);
00099 
00103     <span class="keyword">static</span> SRF_LocalTangentSpaceCylindrical* create(
00104                                                     <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00105                                                     <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00106                                                     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> geodetic_longitude,
00107                                                     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> geodetic_latitude,
00108                                                     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> azimuth,
00109                                                     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> height_offset
00110                                                     );
00111 
<a name="l00115"></a><a class="code" href="a00187.htm#e2">00115</a>     <span class="keyword">static</span> SRF_LocalTangentSpaceCylindrical* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00116     {
00117         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00118                        srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00119                        srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.ltsc_srf_parameters );
00120     }
00121 
00124     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00125                                 SRM_Long_Float coord_comp2,
00126                                 SRM_Long_Float coord_comp3 );
00127 
00130     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00131                                        SRM_Long_Float coord_surf_comp2 );
00132 
00136     <span class="keyword">const</span> <a class="code" href="a00213.htm">SRM_Local_Tangent_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00137 
00141     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_geodetic_longitude() <span class="keyword">const</span>;
00142 
00146     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_geodetic_latitude() <span class="keyword">const</span>;
00147 
00151     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_azimuth() <span class="keyword">const</span>;
00152 
00156     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_height_offset() <span class="keyword">const</span>;
00157 
00160     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00161 
<a name="l00164"></a><a class="code" href="a00187.htm#a8">00164</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00165 <span class="keyword">    </span>{
00166         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_LTSC;
00167     }
00168 
00172     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_LocalTangentSpaceCylindrical &amp;srf ) <span class="keyword">const</span>;
00173 
00177     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_LocalTangentSpaceCylindrical &amp;rhs ) <span class="keyword">const</span>;
00178 
00182     SRF_LocalTangentSpaceCylindrical* makeCopy() <span class="keyword">const</span>;
00183 
00187     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00188 
00189 <span class="keyword">protected</span>:
<a name="l00190"></a><a class="code" href="a00187.htm#b0">00190</a>     SRF_LocalTangentSpaceCylindrical( <span class="keywordtype">void</span> *impl ) : <a class="code" href="a00128.htm">BaseSRF_WithTangentPlaneSurface</a>(impl) {} 
<a name="l00191"></a><a class="code" href="a00187.htm#b1">00191</a>     SRF_LocalTangentSpaceCylindrical &amp;operator =( <span class="keyword">const</span> SRF_LocalTangentSpaceCylindrical &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00192"></a><a class="code" href="a00187.htm#b2">00192</a>     <span class="keyword">virtual</span> ~SRF_LocalTangentSpaceCylindrical() {} 
00193 };
00194 
00195 
<a name="l00196"></a><a class="code" href="a00187.htm#a7">00196</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_LocalTangentSpaceCylindrical::isA( SRF_ClassType type )<span class="keyword"> const</span>
00197 <span class="keyword"></span>{
00198     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_LTSC)
00199         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00200     <span class="keywordflow">else</span>
00201         <span class="keywordflow">return</span> BaseSRF_WithTangentPlaneSurface::isA(type);
00202 };
00203 
00204 
00206 <span class="keyword">typedef</span> SRF_LocalTangentSpaceCylindrical <a class="code" href="a00187.htm">SRF_LTSC</a>;
00207 
00208 
<a name="l00213"></a><a class="code" href="a00146.htm">00213</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_LocalTangentSpaceCylindrical: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00214 {
00215 <span class="keyword">public</span>:
<a name="l00218"></a><a class="code" href="a00146.htm#a0">00218</a>     Coord3D_LocalTangentSpaceCylindrical(SRF_LocalTangentSpaceCylindrical *srf,
00219                                          SRM_Long_Float angle = 0.0,
00220                                          SRM_Long_Float radius = 0.0,
00221                                          SRM_Long_Float height = 0.0 )
00222     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00223     {
00224         setComponentValues(angle, radius, height);
00225     }
00226 
<a name="l00229"></a><a class="code" href="a00146.htm#a1">00229</a>     Coord3D_LocalTangentSpaceCylindrical( <span class="keyword">const</span> Coord3D_LocalTangentSpaceCylindrical &amp;coord )
00230     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00231     {
00232         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00233     }
00234 
<a name="l00240"></a><a class="code" href="a00146.htm#a2">00240</a>     <span class="keywordtype">void</span> copyTo( Coord3D_LocalTangentSpaceCylindrical &amp;coord )<span class="keyword"> const</span>
00241 <span class="keyword">    </span>{
00242         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00243             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00244 
00245         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00246         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00247         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00248     }
00249 
<a name="l00253"></a><a class="code" href="a00146.htm#a3">00253</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_LocalTangentSpaceCylindrical &amp;coord )<span class="keyword"> const</span>
00254 <span class="keyword">    </span>{
00255         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00256                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00257                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00258                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00259     }
00260 
<a name="l00263"></a><a class="code" href="a00146.htm#a4">00263</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float angle, SRM_Long_Float radius, SRM_Long_Float height )
00264     {
00265         _values[0] = angle;
00266         _values[1] = radius;
00267         _values[2] = height;
00268     }
00269 
<a name="l00272"></a><a class="code" href="a00146.htm#a5">00272</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_angle()<span class="keyword"> const</span>
00273 <span class="keyword">    </span>{
00274         <span class="keywordflow">return</span> _values[0];
00275     }
00276 
<a name="l00279"></a><a class="code" href="a00146.htm#a6">00279</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_radius()<span class="keyword"> const</span>
00280 <span class="keyword">    </span>{
00281         <span class="keywordflow">return</span> _values[1];
00282     }
00283 
<a name="l00286"></a><a class="code" href="a00146.htm#a7">00286</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_height()<span class="keyword"> const</span>
00287 <span class="keyword">    </span>{
00288         <span class="keywordflow">return</span> _values[2];
00289     }
00290 
<a name="l00293"></a><a class="code" href="a00146.htm#a8">00293</a>     <span class="keywordtype">void</span> set_angle( SRM_Long_Float value )
00294     {
00295         _values[0] = value;
00296     }
00297 
<a name="l00300"></a><a class="code" href="a00146.htm#a9">00300</a>     <span class="keywordtype">void</span> set_radius( SRM_Long_Float value )
00301     {
00302         _values[1] = value;
00303     }
00304 
<a name="l00307"></a><a class="code" href="a00146.htm#a10">00307</a>     <span class="keywordtype">void</span> set_height( SRM_Long_Float value )
00308     {
00309         _values[2] = value;
00310     }
00311 
00314     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00315 
<a name="l00318"></a><a class="code" href="a00146.htm#a12">00318</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00319 <span class="keyword">    </span>{
00320         <span class="keywordflow">return</span> Coord::COORD_TYP_LTSC;
00321     }
00322 
00325     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_LocalTangentSpaceCylindrical &amp;rhs ) <span class="keyword">const</span>;
00326 
<a name="l00332"></a><a class="code" href="a00146.htm#a14">00332</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_LocalTangentSpaceCylindrical &amp;rhs )<span class="keyword"> const </span>{
00333         <span class="keywordflow">return</span> ((*(SRF_LocalTangentSpaceCylindrical*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceCylindrical*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00334     }
00335 
<a name="l00341"></a><a class="code" href="a00146.htm#a15">00341</a>     Coord3D_LocalTangentSpaceCylindrical &amp;operator= ( <span class="keyword">const</span> Coord3D_LocalTangentSpaceCylindrical &amp;rhs )
00342     {
00343         <span class="keywordflow">if</span>((*(SRF_LocalTangentSpaceCylindrical*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceCylindrical*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00344         {
00345             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00346             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00347             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00348         }
00349         <span class="keywordflow">else</span>
00350             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00351                             <span class="stringliteral">"SRF_LocalTangentSpaceCylindrical op=: incompatible rhs coordinate"</span>);
00352 
00353         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00354     }
00355 };
00356 
00357 
<a name="l00358"></a><a class="code" href="a00146.htm#a11">00358</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_LocalTangentSpaceCylindrical::isA( Coord_ClassType type )<span class="keyword"> const</span>
00359 <span class="keyword"></span>{
00360     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_LTSC)
00361         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00362     <span class="keywordflow">else</span>
00363         <span class="keywordflow">return</span> Coord3D::isA(type);
00364 };
00365 
00366 
00368 <span class="keyword">typedef</span> Coord3D_LocalTangentSpaceCylindrical <a class="code" href="a00146.htm">Coord3D_LTSC</a>;
00369 
00370 
<a name="l00375"></a><a class="code" href="a00163.htm">00375</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_LocalTangentSpaceCylindrical: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00376 {
00377 <span class="keyword">public</span>:
<a name="l00380"></a><a class="code" href="a00163.htm#a0">00380</a>     CoordSurf_LocalTangentSpaceCylindrical( SRF_LocalTangentSpaceCylindrical *srf,
00381                                             SRM_Long_Float angle = 0.0,
00382                                             SRM_Long_Float radius = 0.0 )
00383     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00384     {
00385         setComponentValues(angle, radius);
00386     }
00387 
<a name="l00390"></a><a class="code" href="a00163.htm#a1">00390</a>     CoordSurf_LocalTangentSpaceCylindrical( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceCylindrical &amp;coord )
00391     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00392     {
00393         setComponentValues( coord._values[0], coord._values[1] );
00394     }
00395 
<a name="l00401"></a><a class="code" href="a00163.htm#a2">00401</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_LocalTangentSpaceCylindrical &amp;coord )<span class="keyword"> const</span>
00402 <span class="keyword">    </span>{
00403         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00404             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00405 
00406         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00407         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00408     }
00409 
<a name="l00413"></a><a class="code" href="a00163.htm#a3">00413</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceCylindrical &amp;coord )<span class="keyword"> const</span>
00414 <span class="keyword">    </span>{
00415         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00416                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00417                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00418     }
00419 
<a name="l00422"></a><a class="code" href="a00163.htm#a4">00422</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float angle, SRM_Long_Float radius )
00423     {
00424         _values[0] = angle;
00425         _values[1] = radius;
00426     }
00427 
<a name="l00430"></a><a class="code" href="a00163.htm#a5">00430</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_angle()<span class="keyword"> const</span>
00431 <span class="keyword">    </span>{
00432         <span class="keywordflow">return</span> _values[0];
00433     }
00434 
<a name="l00437"></a><a class="code" href="a00163.htm#a6">00437</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_radius()<span class="keyword"> const</span>
00438 <span class="keyword">    </span>{
00439         <span class="keywordflow">return</span> _values[1];
00440     }
00441 
<a name="l00444"></a><a class="code" href="a00163.htm#a7">00444</a>     <span class="keywordtype">void</span> set_angle( SRM_Long_Float value )
00445     {
00446         _values[0] = value;
00447     }
00448 
<a name="l00451"></a><a class="code" href="a00163.htm#a8">00451</a>     <span class="keywordtype">void</span> set_radius( SRM_Long_Float value )
00452     {
00453         _values[1] = value;
00454     }
00455 
00458     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00459 
<a name="l00462"></a><a class="code" href="a00163.htm#a10">00462</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00463 <span class="keyword">    </span>{
00464         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_LTSC;
00465     }
00466 
00469     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceCylindrical &amp;rhs ) <span class="keyword">const</span>;
00470 
<a name="l00476"></a><a class="code" href="a00163.htm#a12">00476</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceCylindrical &amp;rhs )<span class="keyword"> const</span>
00477 <span class="keyword">    </span>{
00478         <span class="keywordflow">return</span> ((*(SRF_LocalTangentSpaceCylindrical*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceCylindrical*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00479     }
00480 
<a name="l00486"></a><a class="code" href="a00163.htm#a13">00486</a>     CoordSurf_LocalTangentSpaceCylindrical &amp;operator= ( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceCylindrical &amp;rhs )
00487     {
00488         <span class="keywordflow">if</span>((*(SRF_LocalTangentSpaceCylindrical*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceCylindrical*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00489         {
00490             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00491             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00492         }
00493         <span class="keywordflow">else</span>
00494             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00495                             <span class="stringliteral">"CoordSurf_LocalTangentSpaceCylindrical op=: incompatible rhs coordinate"</span>);
00496 
00497         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00498     }
00499 };
00500 
00501 
<a name="l00502"></a><a class="code" href="a00163.htm#a9">00502</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_LocalTangentSpaceCylindrical::isA( Coord_ClassType type )<span class="keyword"> const</span>
00503 <span class="keyword"></span>{
00504     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_LTSC)
00505         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00506     <span class="keywordflow">else</span>
00507         <span class="keywordflow">return</span> CoordSurf::isA(type);
00508 };
00509 
00510 
00512 <span class="keyword">typedef</span> CoordSurf_LocalTangentSpaceCylindrical <a class="code" href="a00163.htm">CoordSurf_LTSC</a>;
00513 
00514 } <span class="comment">// namespace srm</span>
00515 
00516 <span class="preprocessor">#endif // _LocalTangentSpaceCylindrical_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
