<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>LococentricEuclidean3D.h</h1><a href="a00265.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: LococentricEuclidean3D.h,v 1.11 2009-10-12 17:35:24-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _LococentricEuclidean3D_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _LococentricEuclidean3D_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00189.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_LococentricEuclidean3D: <span class="keyword">public</span> <a class="code" href="a00125.htm">BaseSRF_3D</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_LococentricEuclidean3D* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                                     <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00098                                               <span class="keyword">const</span> <a class="code" href="a00212.htm">SRM_LCE_3D_Parameters</a> &amp;params );
00099 
00103     <span class="keyword">static</span> SRF_LococentricEuclidean3D* create(
00104                                               <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00105                                               <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00106                                               <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> lococentre,
00107                                               <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> primary_axis,
00108                                               <a class="code" href="a00277.htm#a1082">SRM_Vector_3D</a> secondary_axis
00109                                               );
00110 
<a name="l00114"></a><a class="code" href="a00189.htm#e2">00114</a>     <span class="keyword">static</span> SRF_LococentricEuclidean3D* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00115     {
00116         <span class="keywordflow">return</span> create(srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00117                       srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00118                       srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.lce_3d_srf_parameters );
00119     }
00120 
00123     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00124                                 SRM_Long_Float coord_comp2,
00125                                 SRM_Long_Float coord_comp3 );
00126 
00130     <span class="keyword">const</span> <a class="code" href="a00212.htm">SRM_LCE_3D_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00131 
00135     <span class="keywordtype">void</span> get_lococentre( SRM_Vector_3D &amp;lococentre );
00136 
00140     <span class="keywordtype">void</span> get_primary_axis( SRM_Vector_3D &amp;primary_axis );
00141 
00145     <span class="keywordtype">void</span> get_secondary_axis( SRM_Vector_3D &amp;secondary_axis );
00146 
00149     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00150 
<a name="l00153"></a><a class="code" href="a00189.htm#a6">00153</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00154 <span class="keyword">    </span>{
00155         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_LCE_3D;
00156     }
00157 
00161     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_LococentricEuclidean3D &amp;srf ) <span class="keyword">const</span>;
00162 
00166     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_LococentricEuclidean3D &amp;rhs ) <span class="keyword">const</span>;
00167 
00171     SRF_LococentricEuclidean3D* makeCopy() <span class="keyword">const</span>;
00172 
00180     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF(<span class="keyword">const</span> Coord3D &amp;src_coord,
00181                                                                     Coord3D &amp;des_coord );
00182 
00186     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00187 
00188 <span class="keyword">protected</span>:
00189     SRF_LococentricEuclidean3D( <span class="keywordtype">void</span> *impl ); 
<a name="l00190"></a><a class="code" href="a00189.htm#b1">00190</a>     SRF_LococentricEuclidean3D &amp;operator =( <span class="keyword">const</span> SRF_LococentricEuclidean3D &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00191     <span class="keyword">virtual</span> ~SRF_LococentricEuclidean3D(); 
00192 };
00193 
00194 
<a name="l00195"></a><a class="code" href="a00189.htm#a5">00195</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_LococentricEuclidean3D::isA( SRF_ClassType type )<span class="keyword"> const</span>
00196 <span class="keyword"></span>{
00197     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_LCE_3D)
00198         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00199     <span class="keywordflow">else</span>
00200         <span class="keywordflow">return</span> BaseSRF_3D::isA(type);
00201 };
00202 
00203 
00205 <span class="keyword">typedef</span> SRF_LococentricEuclidean3D <a class="code" href="a00189.htm">SRF_LCE_3D</a>;
00206 
00207 
<a name="l00212"></a><a class="code" href="a00148.htm">00212</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_LococentricEuclidean3D: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00213 {
00214 <span class="keyword">public</span>:
<a name="l00217"></a><a class="code" href="a00148.htm#a0">00217</a>     Coord3D_LococentricEuclidean3D(SRF_LococentricEuclidean3D *srf,
00218                                    SRM_Long_Float u = 0.0,
00219                                    SRM_Long_Float v = 0.0,
00220                                    SRM_Long_Float w = 0.0 )
00221     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00222     {
00223         setComponentValues(u, v, w);
00224     }
00225 
<a name="l00228"></a><a class="code" href="a00148.htm#a1">00228</a>     Coord3D_LococentricEuclidean3D( <span class="keyword">const</span> Coord3D_LococentricEuclidean3D &amp;coord )
00229     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00230     {
00231         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00232     }
00233 
<a name="l00239"></a><a class="code" href="a00148.htm#a2">00239</a>     <span class="keywordtype">void</span> copyTo( Coord3D_LococentricEuclidean3D &amp;coord )<span class="keyword"> const</span>
00240 <span class="keyword">    </span>{
00241         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00242             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00243 
00244         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00245         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00246         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00247     }
00248 
<a name="l00252"></a><a class="code" href="a00148.htm#a3">00252</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_LococentricEuclidean3D &amp;coord )<span class="keyword"> const</span>
00253 <span class="keyword">    </span>{
00254         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00255                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00256                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00257                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00258     }
00259 
<a name="l00262"></a><a class="code" href="a00148.htm#a4">00262</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float u, SRM_Long_Float v, SRM_Long_Float w )
00263     {
00264         _values[0] = u;
00265         _values[1] = v;
00266         _values[2] = w;
00267     }
00268 
<a name="l00271"></a><a class="code" href="a00148.htm#a5">00271</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_u()<span class="keyword"> const</span>
00272 <span class="keyword">    </span>{
00273         <span class="keywordflow">return</span> _values[0];
00274     }
00275 
<a name="l00278"></a><a class="code" href="a00148.htm#a6">00278</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_v()<span class="keyword"> const</span>
00279 <span class="keyword">    </span>{
00280         <span class="keywordflow">return</span> _values[1];
00281     }
00282 
<a name="l00285"></a><a class="code" href="a00148.htm#a7">00285</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_w()<span class="keyword"> const</span>
00286 <span class="keyword">    </span>{
00287         <span class="keywordflow">return</span> _values[2];
00288     }
00289 
<a name="l00292"></a><a class="code" href="a00148.htm#a8">00292</a>     <span class="keywordtype">void</span> set_u( SRM_Long_Float value )
00293     {
00294         _values[0] = value;
00295     }
00296 
<a name="l00299"></a><a class="code" href="a00148.htm#a9">00299</a>     <span class="keywordtype">void</span> set_v( SRM_Long_Float value )
00300     {
00301         _values[1] = value;
00302     }
00303 
<a name="l00306"></a><a class="code" href="a00148.htm#a10">00306</a>     <span class="keywordtype">void</span> set_w( SRM_Long_Float value )
00307     {
00308         _values[2] = value;
00309     }
00310 
00313     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00314 
<a name="l00317"></a><a class="code" href="a00148.htm#a12">00317</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00318 <span class="keyword">    </span>{
00319         <span class="keywordflow">return</span> Coord::COORD_TYP_LCE_3D;
00320     }
00321 
00324     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_LococentricEuclidean3D &amp;rhs ) <span class="keyword">const</span>;
00325 
<a name="l00331"></a><a class="code" href="a00148.htm#a14">00331</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_LococentricEuclidean3D &amp;rhs )<span class="keyword"> const</span>
00332 <span class="keyword">    </span>{
00333         <span class="keywordflow">return</span> ((*(SRF_LococentricEuclidean3D*)(this-&gt;_srf)) == (*(SRF_LococentricEuclidean3D*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00334     }
00335 
<a name="l00340"></a><a class="code" href="a00148.htm#a15">00340</a>     Coord3D_LococentricEuclidean3D &amp;operator= ( <span class="keyword">const</span> Coord3D_LococentricEuclidean3D &amp;rhs )
00341     {
00342         <span class="keywordflow">if</span>((*(SRF_LococentricEuclidean3D*)(this-&gt;_srf)) == (*(SRF_LococentricEuclidean3D*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00343         {
00344             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00345             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00346             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00347         }
00348         <span class="keywordflow">else</span>
00349             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00350                             <span class="stringliteral">"Coord3D_LocalTangentSpaceEuclidean op=: incompatible rhs coordinate"</span>);
00351 
00352         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00353     }
00354 };
00355 
00356 
<a name="l00357"></a><a class="code" href="a00148.htm#a11">00357</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_LococentricEuclidean3D::isA( Coord_ClassType type )<span class="keyword"> const</span>
00358 <span class="keyword"></span>{
00359     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_LCE_3D)
00360         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00361     <span class="keywordflow">else</span>
00362         <span class="keywordflow">return</span> Coord3D::isA(type);
00363 };
00364 
00365 
00367 <span class="keyword">typedef</span> Coord3D_LococentricEuclidean3D <a class="code" href="a00148.htm">Coord3D_LCE_3D</a>;
00368 
00369 
00370 } <span class="comment">// namespace srm</span>
00371 
00372 <span class="preprocessor">#endif // _LococentricEuclidean3D_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
