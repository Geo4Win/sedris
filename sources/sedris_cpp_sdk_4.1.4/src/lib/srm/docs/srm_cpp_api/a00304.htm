<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Planetodetic.h</h1><a href="a00269.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: Planetodetic.h,v 1.6.1.4 2009-08-24 15:57:08-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _Planetodetic_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _Planetodetic_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00192.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_Planetodetic: <span class="keyword">public</span> <a class="code" href="a00127.htm">BaseSRF_WithEllipsoidalHeight</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_Planetodetic* create( <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                      <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt );
00098 
<a name="l00102"></a><a class="code" href="a00192.htm#e1">00102</a>     <span class="keyword">static</span> SRF_Planetodetic* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00103     {
00104         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code, srf_params.<a class="code" href="a00235.htm#o1">rt_code</a> );
00105     }
00106 
00109     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00110                                 SRM_Long_Float coord_comp2,
00111                                 SRM_Long_Float coord_comp3 );
00112 
00115     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00116                                        SRM_Long_Float coord_surf_comp2 );
00117 
00120     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00121 
<a name="l00124"></a><a class="code" href="a00192.htm#a3">00124</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00125 <span class="keyword">    </span>{
00126         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_PD;
00127     }
00128 
00132     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_Planetodetic &amp;srf ) <span class="keyword">const</span>;
00133 
00137     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_Planetodetic &amp;rhs ) <span class="keyword">const</span>;
00138 
00142     SRF_Planetodetic* makeCopy() <span class="keyword">const</span>;
00143 
00147     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00148 
00149 <span class="keyword">protected</span>:
00150     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
<a name="l00151"></a><a class="code" href="a00192.htm#b0">00151</a>     SRF_Planetodetic( <span class="keywordtype">void</span> *impl ) : <a class="code" href="a00127.htm">BaseSRF_WithEllipsoidalHeight</a>(impl) {} 
<a name="l00152"></a><a class="code" href="a00192.htm#b1">00152</a>     SRF_Planetodetic &amp;operator =( <span class="keyword">const</span> SRF_Planetodetic &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00153"></a><a class="code" href="a00192.htm#b2">00153</a>     <span class="keyword">virtual</span> ~SRF_Planetodetic() {} 
00154 };
00155 
00156 
<a name="l00157"></a><a class="code" href="a00192.htm#a2">00157</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_Planetodetic::isA( SRF_ClassType type )<span class="keyword"> const</span>
00158 <span class="keyword"></span>{
00159     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_PD)
00160         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00161     <span class="keywordflow">else</span>
00162         <span class="keywordflow">return</span> BaseSRF_WithEllipsoidalHeight::isA(type);
00163 };
00164 
00165 
00167 <span class="keyword">typedef</span> SRF_Planetodetic <a class="code" href="a00192.htm">SRF_PD</a>;
00168 
00169 
<a name="l00174"></a><a class="code" href="a00151.htm">00174</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_Planetodetic: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00175 {
00176 <span class="keyword">public</span>:
<a name="l00179"></a><a class="code" href="a00151.htm#a0">00179</a>     Coord3D_Planetodetic(SRF_Planetodetic *srf,
00180                          SRM_Long_Float longitude = 0.0,
00181                          SRM_Long_Float latitude = 0.0,
00182                          SRM_Long_Float ellipsoidal_height = 0.0 )
00183     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00184     {
00185         setComponentValues(longitude, latitude, ellipsoidal_height);
00186     }
00187 
<a name="l00190"></a><a class="code" href="a00151.htm#a1">00190</a>     Coord3D_Planetodetic( <span class="keyword">const</span> Coord3D_Planetodetic &amp;coord )
00191     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00192     {
00193         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00194     }
00195 
<a name="l00201"></a><a class="code" href="a00151.htm#a2">00201</a>     <span class="keywordtype">void</span> copyTo( Coord3D_Planetodetic &amp;coord )<span class="keyword"> const</span>
00202 <span class="keyword">    </span>{
00203         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00204             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00205 
00206         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00207         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00208         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00209     }
00210 
<a name="l00214"></a><a class="code" href="a00151.htm#a3">00214</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_Planetodetic &amp;coord )<span class="keyword"> const</span>
00215 <span class="keyword">    </span>{
00216         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00217                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00218                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00219                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00220     }
00221 
<a name="l00224"></a><a class="code" href="a00151.htm#a4">00224</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float longitude, SRM_Long_Float latitude, SRM_Long_Float ellipsoidal_height )
00225     {
00226         _values[0] = longitude;
00227         _values[1] = latitude;
00228         _values[2] = ellipsoidal_height;
00229     }
00230 
<a name="l00233"></a><a class="code" href="a00151.htm#a5">00233</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude()<span class="keyword"> const</span>
00234 <span class="keyword">    </span>{
00235         <span class="keywordflow">return</span> _values[1];
00236     }
00237 
<a name="l00240"></a><a class="code" href="a00151.htm#a6">00240</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_longitude()<span class="keyword"> const</span>
00241 <span class="keyword">    </span>{
00242         <span class="keywordflow">return</span> _values[0];
00243     }
00244 
<a name="l00247"></a><a class="code" href="a00151.htm#a7">00247</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_ellipsoidal_height()<span class="keyword"> const</span>
00248 <span class="keyword">    </span>{
00249         <span class="keywordflow">return</span> _values[2];
00250     }
00251 
<a name="l00254"></a><a class="code" href="a00151.htm#a8">00254</a>     <span class="keywordtype">void</span> set_latitude( SRM_Long_Float value )
00255     {
00256         _values[1] = value;
00257     }
00258 
<a name="l00261"></a><a class="code" href="a00151.htm#a9">00261</a>     <span class="keywordtype">void</span> set_longitude( SRM_Long_Float value )
00262     {
00263         _values[0] = value;
00264     }
00265 
<a name="l00268"></a><a class="code" href="a00151.htm#a10">00268</a>     <span class="keywordtype">void</span> set_ellipsoidal_height( SRM_Long_Float value )
00269     {
00270         _values[2] = value;
00271     }
00272 
00275     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00276 
<a name="l00279"></a><a class="code" href="a00151.htm#a12">00279</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00280 <span class="keyword">    </span>{
00281         <span class="keywordflow">return</span> Coord::COORD_TYP_PD;
00282     }
00283 
00286     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_Planetodetic &amp;rhs ) <span class="keyword">const</span>;
00287 
<a name="l00293"></a><a class="code" href="a00151.htm#a14">00293</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_Planetodetic &amp;rhs )<span class="keyword"> const </span>{
00294         <span class="keywordflow">return</span> ((*(SRF_Planetodetic*)(this-&gt;_srf)) == (*(SRF_Planetodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00295     }
00296 
<a name="l00301"></a><a class="code" href="a00151.htm#a15">00301</a>     Coord3D_Planetodetic &amp;operator= ( <span class="keyword">const</span> Coord3D_Planetodetic &amp;rhs )
00302     {
00303         <span class="keywordflow">if</span>((*(SRF_Planetodetic*)(this-&gt;_srf)) == (*(SRF_Planetodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00304         {
00305             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00306             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00307             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00308         }
00309         <span class="keywordflow">else</span>
00310             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00311                             <span class="stringliteral">"Coord3D_Planetodetic op=: incompatible rhs coordinate"</span>);
00312 
00313         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00314     }
00315 };
00316 
00317 
<a name="l00318"></a><a class="code" href="a00151.htm#a11">00318</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_Planetodetic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00319 <span class="keyword"></span>{
00320     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_PD)
00321         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00322     <span class="keywordflow">else</span>
00323         <span class="keywordflow">return</span> Coord3D::isA(type);
00324 };
00325 
00326 
00328 <span class="keyword">typedef</span> Coord3D_Planetodetic <a class="code" href="a00151.htm">Coord3D_PD</a>;
00329 
00330 
<a name="l00335"></a><a class="code" href="a00167.htm">00335</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_Planetodetic: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00336 {
00337 <span class="keyword">public</span>:
<a name="l00340"></a><a class="code" href="a00167.htm#a0">00340</a>     CoordSurf_Planetodetic(SRF_Planetodetic *srf,
00341                            SRM_Long_Float longitude = 0.0,
00342                            SRM_Long_Float latitude = 0.0 )
00343     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00344     {
00345         setComponentValues(longitude, latitude);
00346     }
00347 
<a name="l00350"></a><a class="code" href="a00167.htm#a1">00350</a>     CoordSurf_Planetodetic( <span class="keyword">const</span> CoordSurf_Planetodetic &amp;coord )
00351     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00352     {
00353         setComponentValues( coord._values[0], coord._values[1] );
00354     }
00355 
<a name="l00361"></a><a class="code" href="a00167.htm#a2">00361</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_Planetodetic &amp;coord )<span class="keyword"> const</span>
00362 <span class="keyword">    </span>{
00363         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00364             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00365 
00366         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00367         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00368     }
00369 
<a name="l00373"></a><a class="code" href="a00167.htm#a3">00373</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_Planetodetic &amp;coord )<span class="keyword"> const</span>
00374 <span class="keyword">    </span>{
00375         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00376                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00377                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00378     }
00379 
<a name="l00382"></a><a class="code" href="a00167.htm#a4">00382</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float longitude, SRM_Long_Float latitude )
00383     {
00384         _values[0] = longitude;
00385         _values[1] = latitude;
00386     }
00387 
<a name="l00390"></a><a class="code" href="a00167.htm#a5">00390</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude()<span class="keyword"> const</span>
00391 <span class="keyword">    </span>{
00392         <span class="keywordflow">return</span> _values[1];
00393     }
00394 
<a name="l00397"></a><a class="code" href="a00167.htm#a6">00397</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_longitude()<span class="keyword"> const</span>
00398 <span class="keyword">    </span>{
00399         <span class="keywordflow">return</span> _values[0];
00400     }
00401 
<a name="l00404"></a><a class="code" href="a00167.htm#a7">00404</a>     <span class="keywordtype">void</span> set_latitude( SRM_Long_Float value )
00405     {
00406         _values[1] = value;
00407     }
00408 
<a name="l00411"></a><a class="code" href="a00167.htm#a8">00411</a>     <span class="keywordtype">void</span> set_longitude( SRM_Long_Float value )
00412     {
00413         _values[0] = value;
00414     }
00415 
00418     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00419 
<a name="l00422"></a><a class="code" href="a00167.htm#a10">00422</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00423 <span class="keyword">    </span>{
00424         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_PD;
00425     }
00426 
00429     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_Planetodetic &amp;rhs ) <span class="keyword">const</span>;
00430 
<a name="l00436"></a><a class="code" href="a00167.htm#a12">00436</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_Planetodetic &amp;rhs )<span class="keyword"> const</span>
00437 <span class="keyword">    </span>{
00438         <span class="keywordflow">return</span> ((*(SRF_Planetodetic*)(this-&gt;_srf)) == (*(SRF_Planetodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00439     }
00440 
<a name="l00445"></a><a class="code" href="a00167.htm#a13">00445</a>     CoordSurf_Planetodetic &amp;operator= ( <span class="keyword">const</span> CoordSurf_Planetodetic &amp;rhs )
00446     {
00447         <span class="keywordflow">if</span>((*(SRF_Planetodetic*)(this-&gt;_srf)) == (*(SRF_Planetodetic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00448         {
00449             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00450             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00451         }
00452         <span class="keywordflow">else</span>
00453             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00454                             <span class="stringliteral">"CoordSurf_Planetodetic op=: incompatible rhs coordinate"</span>);
00455 
00456         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00457     }
00458 };
00459 
00460 
<a name="l00461"></a><a class="code" href="a00167.htm#a9">00461</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_Planetodetic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00462 <span class="keyword"></span>{
00463     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_PD)
00464         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00465     <span class="keywordflow">else</span>
00466         <span class="keywordflow">return</span> CoordSurf::isA(type);
00467 };
00468 
00469 
00471 <span class="keyword">typedef</span> CoordSurf_Planetodetic <a class="code" href="a00167.htm">CoordSurf_PD</a>;
00472 
00473 } <span class="comment">// namespace srm</span>
00474 
00475 <span class="preprocessor">#endif // _Planetodetic_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
