<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>TransverseMercator.h</h1><a href="a00278.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="preprocessor">#ifndef _TransverseMercator_h</span>
00074 <span class="preprocessor"></span><span class="preprocessor">#define _TransverseMercator_h</span>
00075 <span class="preprocessor"></span>
00076 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00077 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00078 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00079 
00080 <span class="keyword">namespace </span>srm
00081 {
<a name="l00088"></a><a class="code" href="a00198.htm">00088</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_TransverseMercator: <span class="keyword">public</span> <a class="code" href="a00126.htm">BaseSRF_MapProjection</a>
00089 {
00090 <span class="keyword">public</span>:
00094     <span class="keyword">static</span> SRF_TransverseMercator* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00095                                                 <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00096                                           <span class="keyword">const</span> <a class="code" href="a00243.htm">SRM_TM_Parameters</a> &amp;params);
00097 
00101     <span class="keyword">static</span> SRF_TransverseMercator* create(
00102                                           <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00103                                           <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00104                                           <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> origin_longitude,
00105                                           <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> origin_latitude,
00106                                           <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> central_scale,
00107                                           <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_easting,
00108                                           <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_northing
00109                                          );
00110 
<a name="l00114"></a><a class="code" href="a00198.htm#e2">00114</a>     <span class="keyword">static</span> SRF_TransverseMercator* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00115     {
00116         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00117                        srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00118                        srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.tm_srf_parameters );
00119     }
00120 
00123     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00124                                 SRM_Long_Float coord_comp2,
00125                                 SRM_Long_Float coord_comp3 );
00126 
00129     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00130                                        SRM_Long_Float coord_surf_comp2 );
00131 
00135     <span class="keyword">const</span> <a class="code" href="a00243.htm">SRM_TM_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00136 
00140     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_origin_longitude() <span class="keyword">const</span>;
00141 
00145     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_origin_latitude() <span class="keyword">const</span>;
00146 
00150     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_central_scale() <span class="keyword">const</span>;
00151 
00155     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_easting() <span class="keyword">const</span>;
00156 
00160     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_northing() <span class="keyword">const</span>;
00161 
00164     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00165 
<a name="l00168"></a><a class="code" href="a00198.htm#a9">00168</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00169 <span class="keyword">    </span>{
00170         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_TM;
00171     }
00172 
00176     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_TransverseMercator &amp;srf ) <span class="keyword">const</span>;
00177 
00181     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_TransverseMercator &amp;rhs ) <span class="keyword">const</span>;
00182 
00186     SRF_TransverseMercator* makeCopy() <span class="keyword">const</span>;
00187 
00195     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF( <span class="keyword">const</span> Coord3D &amp;src_coord,
00196                                                                Coord3D &amp;des_coord );
00197 
00201     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00202 
00203 <span class="keyword">protected</span>:
00204     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00205     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_3D;
00206     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_WithEllipsoidalHeight;
00207     SRF_TransverseMercator( <span class="keywordtype">void</span> *impl ); 
<a name="l00208"></a><a class="code" href="a00198.htm#b1">00208</a>     SRF_TransverseMercator &amp;operator =( <span class="keyword">const</span> SRF_TransverseMercator &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00209     <span class="keyword">virtual</span> ~SRF_TransverseMercator(); 
00210 };
00211 
00212 
<a name="l00213"></a><a class="code" href="a00198.htm#a8">00213</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_TransverseMercator::isA( SRF_ClassType type )<span class="keyword"> const</span>
00214 <span class="keyword"></span>{
00215     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_TM)
00216         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00217     <span class="keywordflow">else</span>
00218         <span class="keywordflow">return</span> BaseSRF_MapProjection::isA(type);
00219 };
00220 
00221 
00223 <span class="keyword">typedef</span> SRF_TransverseMercator <a class="code" href="a00198.htm">SRF_TM</a>;
00224 
00225 
<a name="l00230"></a><a class="code" href="a00157.htm">00230</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_TransverseMercator: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00231 {
00232 <span class="keyword">public</span>:
<a name="l00235"></a><a class="code" href="a00157.htm#a0">00235</a>     Coord3D_TransverseMercator(SRF_TransverseMercator *srf,
00236                                SRM_Long_Float easting = 0.0,
00237                                SRM_Long_Float northing = 0.0,
00238                                SRM_Long_Float ellipsoidal_height = 0.0 )
00239     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00240     {
00241         setComponentValues(easting, northing, ellipsoidal_height);
00242     }
00243 
<a name="l00246"></a><a class="code" href="a00157.htm#a1">00246</a>     Coord3D_TransverseMercator( <span class="keyword">const</span> Coord3D_TransverseMercator &amp;coord )
00247     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00248     {
00249         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00250     }
00251 
<a name="l00257"></a><a class="code" href="a00157.htm#a2">00257</a>     <span class="keywordtype">void</span> copyTo( Coord3D_TransverseMercator &amp;coord )<span class="keyword"> const</span>
00258 <span class="keyword">    </span>{
00259         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00260             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00261 
00262         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00263         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00264         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00265     }
00266 
<a name="l00271"></a><a class="code" href="a00157.htm#a3">00271</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_TransverseMercator &amp;coord )<span class="keyword"> const</span>
00272 <span class="keyword">    </span>{
00273         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00274                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00275                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00276                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00277     }
00278 
<a name="l00281"></a><a class="code" href="a00157.htm#a4">00281</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing, SRM_Long_Float ellipsoidal_height )
00282     {
00283         _values[0] = easting;
00284         _values[1] = northing;
00285         _values[2] = ellipsoidal_height;
00286     }
00287 
<a name="l00290"></a><a class="code" href="a00157.htm#a5">00290</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00291 <span class="keyword">    </span>{
00292         <span class="keywordflow">return</span> _values[0];
00293     }
00294 
<a name="l00297"></a><a class="code" href="a00157.htm#a6">00297</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00298 <span class="keyword">    </span>{
00299         <span class="keywordflow">return</span> _values[1];
00300     }
00301 
<a name="l00304"></a><a class="code" href="a00157.htm#a7">00304</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_ellipsoidal_height()<span class="keyword"> const</span>
00305 <span class="keyword">    </span>{
00306         <span class="keywordflow">return</span> _values[2];
00307     }
00308 
<a name="l00311"></a><a class="code" href="a00157.htm#a8">00311</a>     <span class="keywordtype">void</span> set_easting( SRM_Long_Float value )
00312     {
00313         _values[0] = value;
00314     }
00315 
<a name="l00318"></a><a class="code" href="a00157.htm#a9">00318</a>     <span class="keywordtype">void</span> set_northing( SRM_Long_Float value )
00319     {
00320         _values[1] = value;
00321     }
00322 
<a name="l00325"></a><a class="code" href="a00157.htm#a10">00325</a>     <span class="keywordtype">void</span> set_ellipsoidal_height( SRM_Long_Float value )
00326     {
00327         _values[2] = value;
00328     }
00329 
00332     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00333 
<a name="l00336"></a><a class="code" href="a00157.htm#a12">00336</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00337 <span class="keyword">    </span>{
00338         <span class="keywordflow">return</span> Coord::COORD_TYP_TM;
00339     }
00340 
00343     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_TransverseMercator &amp;rhs ) <span class="keyword">const</span>;
00344 
<a name="l00350"></a><a class="code" href="a00157.htm#a14">00350</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_TransverseMercator &amp;rhs )<span class="keyword"> const</span>
00351 <span class="keyword">    </span>{
00352         <span class="keywordflow">return</span> ((*(SRF_TransverseMercator*)(this-&gt;_srf)) == (*(SRF_TransverseMercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00353     }
00354 
<a name="l00359"></a><a class="code" href="a00157.htm#a15">00359</a>     Coord3D_TransverseMercator &amp;operator= ( <span class="keyword">const</span> Coord3D_TransverseMercator &amp;rhs )
00360     {
00361         <span class="keywordflow">if</span>((*(SRF_TransverseMercator*)(this-&gt;_srf)) == (*(SRF_TransverseMercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00362           {
00363             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00364             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00365             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00366           }
00367         <span class="keywordflow">else</span>
00368           <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00369                           <span class="stringliteral">"Coord3D_TransverseMercator op=: incompatible rhs coordinate"</span>);
00370 
00371         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00372     }
00373 };
00374 
00375 
<a name="l00376"></a><a class="code" href="a00157.htm#a11">00376</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_TransverseMercator::isA( Coord_ClassType type )<span class="keyword"> const</span>
00377 <span class="keyword"></span>{
00378     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_TM)
00379         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00380     <span class="keywordflow">else</span>
00381         <span class="keywordflow">return</span> Coord3D::isA(type);
00382 };
00383 
00384 
00386 <span class="keyword">typedef</span> Coord3D_TransverseMercator <a class="code" href="a00157.htm">Coord3D_TM</a>;
00387 
00388 
<a name="l00393"></a><a class="code" href="a00169.htm">00393</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_TransverseMercator: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00394 {
00395 <span class="keyword">public</span>:
<a name="l00398"></a><a class="code" href="a00169.htm#a0">00398</a>     CoordSurf_TransverseMercator(SRF_TransverseMercator *srf,
00399                                  SRM_Long_Float easting = 0.0,
00400                                  SRM_Long_Float northing = 0.0 )
00401     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00402     {
00403         setComponentValues(easting, northing);
00404     }
00405 
<a name="l00408"></a><a class="code" href="a00169.htm#a1">00408</a>     CoordSurf_TransverseMercator( <span class="keyword">const</span> CoordSurf_TransverseMercator &amp;coord )
00409     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00410     {
00411         setComponentValues( coord._values[0], coord._values[1] );
00412     }
00413 
<a name="l00419"></a><a class="code" href="a00169.htm#a2">00419</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_TransverseMercator &amp;coord )<span class="keyword"> const</span>
00420 <span class="keyword">    </span>{
00421         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00422             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00423 
00424         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00425         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00426     }
00427 
<a name="l00432"></a><a class="code" href="a00169.htm#a3">00432</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_TransverseMercator &amp;coord )<span class="keyword"> const</span>
00433 <span class="keyword">    </span>{
00434         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00435                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00436                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00437     }
00438 
<a name="l00441"></a><a class="code" href="a00169.htm#a4">00441</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing )
00442     {
00443         _values[0] = easting;
00444         _values[1] = northing;
00445     }
00446 
<a name="l00449"></a><a class="code" href="a00169.htm#a5">00449</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00450 <span class="keyword">    </span>{
00451         <span class="keywordflow">return</span> _values[0];
00452     }
00453 
<a name="l00456"></a><a class="code" href="a00169.htm#a6">00456</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00457 <span class="keyword">    </span>{
00458         <span class="keywordflow">return</span> _values[1];
00459     }
00460 
<a name="l00463"></a><a class="code" href="a00169.htm#a7">00463</a>     <span class="keywordtype">void</span> set_easting( SRM_Long_Float value )
00464     {
00465         _values[0] = value;
00466     }
00467 
<a name="l00470"></a><a class="code" href="a00169.htm#a8">00470</a>     <span class="keywordtype">void</span> set_northing( SRM_Long_Float value )
00471     {
00472         _values[1] = value;
00473     }
00474 
00477     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00478 
<a name="l00481"></a><a class="code" href="a00169.htm#a10">00481</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00482 <span class="keyword">    </span>{
00483         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_TM;
00484     }
00485 
00488     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_TransverseMercator &amp;rhs ) <span class="keyword">const</span>;
00489 
<a name="l00495"></a><a class="code" href="a00169.htm#a12">00495</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_TransverseMercator &amp;rhs )<span class="keyword"> const</span>
00496 <span class="keyword">    </span>{
00497         <span class="keywordflow">return</span> ((*(SRF_TransverseMercator*)(this-&gt;_srf)) == (*(SRF_TransverseMercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00498     }
00499 
<a name="l00504"></a><a class="code" href="a00169.htm#a13">00504</a>     CoordSurf_TransverseMercator &amp;operator= ( <span class="keyword">const</span> CoordSurf_TransverseMercator &amp;rhs )
00505     {
00506         <span class="keywordflow">if</span>((*(SRF_TransverseMercator*)(this-&gt;_srf)) == (*(SRF_TransverseMercator*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00507         {
00508             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00509             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00510         }
00511         <span class="keywordflow">else</span>
00512             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00513                             <span class="stringliteral">"CoordSurf_TransverseMercator op=: incompatible rhs coordinate"</span>);
00514 
00515         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00516     }
00517 };
00518 
00519 
<a name="l00520"></a><a class="code" href="a00169.htm#a9">00520</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_TransverseMercator::isA( Coord_ClassType type )<span class="keyword"> const</span>
00521 <span class="keyword"></span>{
00522     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_TM)
00523         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00524     <span class="keywordflow">else</span>
00525         <span class="keywordflow">return</span> CoordSurf::isA(type);
00526 };
00527 
00528 
00530 <span class="keyword">typedef</span> CoordSurf_TransverseMercator <a class="code" href="a00169.htm">CoordSurf_TM</a>;
00531 
00532 } <span class="comment">// namespace srm</span>
00533 
00534 <span class="preprocessor">#endif // _TransverseMercator_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
