<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindexHL" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>Spatial Reference Model (SRM) C++ API </h1>
<p>
<h3 align="center">Version 4.1.4 </h3><h2><a name="Introduction"></a>
Introduction</h2>
This is the documentation for the SRM C++ API.<p>
The SRM classes provide the following functionality:<ul>
<li>Creation<ul>
<li>SRFs<ul>
<li>SRF templates (e.g., LSR 3D, TM, Celestiodetic, Celestiocentric)</li><li>SRF set members (e.g., UTM zone 12, GTRS GCS cell 1234, UPS northern pole)</li><li>SRFs (e.g., British National Grid Airy)</li></ul>
</li><li>Coordinates<ul>
<li>2D coordinate</li><li>3D coordinate</li><li>Surface coordinate</li></ul>
</li><li>Directions</li><li>Orientations</li></ul>
</li><li>Conversion<ul>
<li>Coordinate conversion between SRFs</li><li>Direction conversion between SRFs</li><li>Orientation conversion between SRFs</li></ul>
</li><li>Validation<ul>
<li>Coordinate validation within a SRF</li><li>Direction validation within a SRF</li><li>Orientation validation within a SRF</li></ul>
</li><li>Calculations<ul>
<li>Euclidean distance</li><li>Geodesic distance</li><li>Point scale</li><li>Vertical separation offset</li><li>Convergence of the Meridian</li><li>Map azimuth</li></ul>
</li></ul>
<p>
A sample program to convert a Celestiodetic 3D coordinate to a Celestiocentric 3D coordinate is as follows: <div class="fragment"><pre><span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
<span class="preprocessor">#include "<a class="code" href="a00275.htm">srf_all.h</a>"</span>
<span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>

<span class="keyword">using</span> <span class="keyword">namespace </span>std;

<span class="keywordtype">int</span> main (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
{
  cout &lt;&lt; <span class="stringliteral">"Running SRM Sample test program... \n"</span> &lt;&lt; endl;

  <a class="code" href="a00173.htm">srm::SRF_Celestiocentric</a>* CC_SRF;
  <a class="code" href="a00174.htm">srm::SRF_Celestiodetic</a>* CD_SRF;

  <span class="keywordflow">try</span> {
    <span class="comment">// create CC and CD SRFs</span>
    CC_SRF = <a class="code" href="a00173.htm#e0">srm::SRF_Celestiocentric::create</a>( SRM_ORMCOD_WGS_1984, SRM_RTCOD_WGS_1984_IDENTITY );

    CD_SRF = <a class="code" href="a00174.htm#e0">srm::SRF_Celestiodetic::create</a>( SRM_ORMCOD_WGS_1984, SRM_RTCOD_WGS_1984_IDENTITY );

    cout &lt;&lt; <span class="stringliteral">"Source Celestiodetic SRF parameters: "</span> &lt;&lt; endl;
    cout &lt;&lt; CD_SRF-&gt;<a class="code" href="a00174.htm#a8">toString</a>() &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">"Target Celestiocentric SRF parameters: "</span> &lt;&lt; endl;
    cout &lt;&lt; CC_SRF-&gt;<a class="code" href="a00173.htm#a7">toString</a>() &lt;&lt; endl;
  } <span class="keywordflow">catch</span> ( <a class="code" href="a00171.htm">srm::Exception</a>( ex) ) {
    cout &lt;&lt; <span class="stringliteral">"Caught an exception=&gt; "</span> &lt;&lt; ex.getWhat() &lt;&lt; endl;
    <span class="keywordflow">return</span> 0;
  }

  <span class="comment">// create CD and CC 3D coordinate</span>
  <a class="code" href="a00136.htm">srm::Coord3D_Celestiodetic</a> CD_Coord( CD_SRF, 0.0, 0.785398163397, 0.0 );
  <a class="code" href="a00135.htm">srm::Coord3D_Celestiocentric</a> CC_Coord( CC_SRF );

  <span class="comment">// Convert from CD SRF to CC SRF</span>
  <span class="keywordflow">try</span> {
    CC_SRF-&gt;<a class="code" href="a00173.htm#a6">changeCoordinate3DSRF</a>( CD_Coord, CC_Coord );

    cout &lt;&lt; <span class="stringliteral">"Executed changeCoordinate3DSRF"</span> &lt;&lt; endl;
  }
  <span class="keywordflow">catch</span> ( <a class="code" href="a00171.htm">srm::Exception</a>&amp; ex) {
    cout &lt;&lt; <span class="stringliteral">"Caught an exception=&gt; "</span> &lt;&lt; ex.getWhat() &lt;&lt; endl;
    <span class="keywordflow">return</span> 0;
  }

  <span class="comment">// Print Celestiocentric coordinate values</span>
  cout &lt;&lt; <span class="stringliteral">"Source Celestiodetic 3D coordinate: "</span>
       &lt;&lt; <span class="stringliteral">"[ "</span> &lt;&lt; CD_Coord.<a class="code" href="a00136.htm#a5">get_longitude</a>() &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; CD_Coord.<a class="code" href="a00136.htm#a6">get_latitude</a>()
       &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; CD_Coord.<a class="code" href="a00136.htm#a7">get_ellipsoidal_height</a>() &lt;&lt; <span class="stringliteral">" ]"</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">"Target (converted) Celestiocentric 3D coordinate: "</span>
       &lt;&lt; <span class="stringliteral">"[ "</span> &lt;&lt; CC_Coord.<a class="code" href="a00135.htm#a5">get_u</a>() &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; CC_Coord.<a class="code" href="a00135.htm#a6">get_v</a>()
       &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; CC_Coord.<a class="code" href="a00135.htm#a7">get_w</a>() &lt;&lt; <span class="stringliteral">" ]"</span> &lt;&lt; endl &lt;&lt; endl;

  <span class="comment">// Free SRFs</span>
  CC_SRF-&gt;<a class="code" href="a00123.htm#a0">release</a>();
  cout &lt;&lt; <span class="stringliteral">"Released CC SRF"</span> &lt;&lt; endl;
  CD_SRF-&gt;<a class="code" href="a00123.htm#a0">release</a>();
  cout &lt;&lt; <span class="stringliteral">"Released CD SRF"</span> &lt;&lt; endl;

  <span class="keywordflow">return</span> 0;
}
</pre></div><p>
Running the sample program above will produce output as follows: <div class="fragment"><pre>
Running SRM Sample test program...

Source Celestiodetic SRF parameters:
orm=&gt; 250
rt=&gt; 341

Target Celestiocentric SRF parameters:
orm=&gt; 250
rt=&gt; 341

Executed changeCoordinate3DSRF
Source Celestiodetic 3D coordinate: [ 0, 0.785398, 0 ]
Target (converted) Celestiocentric 3D coordinate: [ 4.51759e+06, -8.24624e-08, 4.48735e+06 ]

Released CC SRF
Released CD SRF
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
