/*
 * SRM API
 *
 * FILE       : srm_ltp.cpp
 *
 * PROGRAMMERS: Cameron Kellough (SRI)
 *
 * DESCRIPTION:
 *   This file is internal to the SRM API.
 *   GCS is a special case of LTP and is handled by the LTP routine,
 *   LTP was the first SRF to be separated from the original code architecture.
 *
 * SRM SDK Release 4.1.4 - July 1, 2011
 *
 * - SRM spec. 4.1
 *
 *
 *                             NOTICE
 * 
 * This software is provided openly and freely for use in representing and
 * interchanging environmental data & databases.
 * 
 * This software was developed for use by the United States Government with
 * unlimited rights.  The software was developed under contract
 * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.
 * The software is unclassified and is deemed as Distribution A, approved
 * for Public Release.
 * 
 * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND
 * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:
 * 
 *    1. Recipient may make unlimited copies of this software and give
 *       copies to other persons or entities as long as the copies contain
 *       this NOTICE, and as long as the same copyright notices that
 *       appear on, or in, this software remain.
 * 
 *    2. Trademarks. All trademarks belong to their respective trademark
 *       holders.  Third-Party applications/software/information are
 *       copyrighted by their respective owners.
 * 
 *    3. Recipient agrees to forfeit all intellectual property and
 *       ownership rights for any version created from the modification
 *       or adaptation of this software, including versions created from
 *       the translation and/or reverse engineering of the software design.
 * 
 *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense
 *       this software.  Recipient may, however enable another person
 *       or entity the rights to use this software, provided that this
 *       AGREEMENT and NOTICE is furnished along with the software and
 *       /or software system utilizing this software.
 * 
 *       All revisions, modifications, created by the Recipient, to this
 *       software and/or related technical data shall be forwarded by the
 *       Recipient to the Government at the following address:
 * 
 *         SMDC
 *         Attention SEDRIS (TO193) TPOC
 *         P.O. Box 1500
 *         Huntsville, AL  35807-3801
 * 
 *         or via electronic mail to:  se-mgmt@sedris.org
 * 
 *    5. No Warranty. This software is being delivered to you AS IS
 *       and there is no warranty, EXPRESS or IMPLIED, as to its use
 *       or performance.
 * 
 *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING
 *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the
 *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY
 *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS
 *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF
 *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY
 *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE
 *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE
 *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,
 *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS
 *       OR LOST SAVINGS WHATSOEVER.
 *
 *
 *
 * For other release dates/detailed changes, contact SRI or SAIC.
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "srm_internal.h"
#include "srm_sincos.h"
#include "srm_conversions.h"

#if 0
/*This is related to oldstyle GCS which we don't support
 *currently.  It's being kept here for documentary purposes
 *as it might be nice to be able to get this code back.
 */
/*
 * GLOBAL CONSTANT: OLDS_SIZE
 *
 *   Size in # of cells.
 */
const SRM_Integer OLDS_SIZE=49778;
#endif

#if 0
/*
 * GLOBAL CONSTANT: GCS_NUM_ROWS
 *
 *   Number of rows in the GCS cell table.
 */
static const SRM_Integer GCS_NUM_ROWS=180;
/*This constant is no longer needed elsewhere in the code
  due to increased modularity and should be removed from the code
  at some future date.
*/
#endif

/*
 * GLOBAL CONSTANT: SRM_LTP_SRF_TYP_GCS
 *
 *   This dual definition is for documentation purposes.  Some of the internal
 *   functions handle both types of GCS and so we will use GCS for the general
 *   sense and GCS_GTRS for the specific case.
 */
#define SRM_LTP_SRF_TYP_GCS SRM_LTP_SRF_TYP_GCS_GTRS

extern unsigned char gtrs_cell_id_index[];


#ifdef SRM_DEBUG
#define PRINT_GCS_ROW(temp) printf("%d\t%f\t%lf\t%f\t%d\t%f\t%f\n",\
              temp.minimum_cell_id,\
              temp.row_lat,\
              temp.starting_lon,\
              temp.cell_width,\
              temp.maximum_cell_id,\
              temp.irreg_cell_lon,\
              temp.irreg_cell_width)

#define PRINT_GCS_ROWp(temp) printf("%d\t%f\t%lf\t%f\t%d\t%f\t%f\n",\
              temp->minimum_cell_id,\
              temp->row_lat,\
              temp->starting_lon,\
              temp->cell_width,\
              temp->maximum_cell_id,\
              temp->irreg_cell_lon,\
              temp->irreg_cell_width)

#define COPY_GCS_ROW(new,old)\
              (new).minimum_cell_id=old.minimum_cell_id;\
              (new).row_lat=old.row_lat;\
              (new).starting_lon=old.starting_lon;\
              (new).cell_width=old.cell_width;\
              (new).maximum_cell_id=old.maximum_cell_id;\
              (new).irreg_cell_lon=old.irreg_cell_lon;\
              (new).irreg_cell_width=old.irreg_cell_width;
#endif

/*
 * GLOBAL VARIABLE: gtrs_array
 */
GCS_Row gtrs_array[180]={
{1,-89.50,-165.00,30.00,0.03333333333333333287,12,165.00,30.00},
{13,-88.50,-165.00,30.00,0.03333333333333333287,24,165.00,30.00},
{25,-87.50,-172.50,15.00,0.06666666666666666574,48,172.50,15.00},
{49,-86.50,-172.50,15.00,0.06666666666666666574,72,172.50,15.00},
{73,-85.50,-175.00,10.00,0.10000000000000000555,108,175.00,10.00},
{109,-84.50,-175.00,10.00,0.10000000000000000555,144,175.00,10.00},
{145,-83.50,-177.00,6.00,0.16666666666666665741,204,177.00,6.00},
{205,-82.50,-177.00,6.00,0.16666666666666665741,264,177.00,6.00},
{265,-81.50,-177.00,6.00,0.16666666666666665741,324,177.00,6.00},
{325,-80.50,-177.00,6.00,0.16666666666666665741,384,177.00,6.00},
{385,-79.50,-177.50,5.00,0.20000000000000001110,456,177.50,5.00},
{457,-78.50,-177.50,5.00,0.20000000000000001110,528,177.50,5.00},
{529,-77.50,-178.50,3.00,0.33333333333333331483,648,178.50,3.00},
{649,-76.50,-178.50,3.00,0.33333333333333331483,768,178.50,3.00},
{769,-75.50,-178.50,3.00,0.33333333333333331483,888,178.50,3.00},
{889,-74.50,-178.50,3.00,0.33333333333333331483,1008,178.50,3.00},
{1009,-73.50,-178.50,3.00,0.33333333333333331483,1128,178.50,3.00},
{1129,-72.50,-178.50,3.00,0.33333333333333331483,1248,178.50,3.00},
{1249,-71.50,-178.50,3.00,0.33333333333333331483,1368,178.50,3.00},
{1369,-70.50,-179.00,2.00,0.50000000000000000000,1548,179.00,2.00},
{1549,-69.50,-179.00,2.00,0.50000000000000000000,1728,179.00,2.00},
{1729,-68.50,-179.00,2.00,0.50000000000000000000,1908,179.00,2.00},
{1909,-67.50,-179.00,2.00,0.50000000000000000000,2088,179.00,2.00},
{2089,-66.50,-179.00,2.00,0.50000000000000000000,2268,179.00,2.00},
{2269,-65.50,-179.00,2.00,0.50000000000000000000,2448,179.00,2.00},
{2449,-64.50,-179.00,2.00,0.50000000000000000000,2628,179.00,2.00},
{2629,-63.50,-179.00,2.00,0.50000000000000000000,2808,179.00,2.00},
{2809,-62.50,-179.00,2.00,0.50000000000000000000,2988,179.00,2.00},
{2989,-61.50,-179.00,2.00,0.50000000000000000000,3168,179.00,2.00},
{3169,-60.50,-179.00,2.00,0.50000000000000000000,3348,179.00,2.00},
{3349,-59.50,-179.50,1.00,1.00000000000000000000,3708,179.50,1.00},
{3709,-58.50,-179.50,1.00,1.00000000000000000000,4068,179.50,1.00},
{4069,-57.50,-179.50,1.00,1.00000000000000000000,4428,179.50,1.00},
{4429,-56.50,-179.50,1.00,1.00000000000000000000,4788,179.50,1.00},
{4789,-55.50,-179.50,1.00,1.00000000000000000000,5148,179.50,1.00},
{5149,-54.50,-179.50,1.00,1.00000000000000000000,5508,179.50,1.00},
{5509,-53.50,-179.50,1.00,1.00000000000000000000,5868,179.50,1.00},
{5869,-52.50,-179.50,1.00,1.00000000000000000000,6228,179.50,1.00},
{6229,-51.50,-179.50,1.00,1.00000000000000000000,6588,179.50,1.00},
{6589,-50.50,-179.50,1.00,1.00000000000000000000,6948,179.50,1.00},
{6949,-49.50,-179.50,1.00,1.00000000000000000000,7308,179.50,1.00},
{7309,-48.50,-179.50,1.00,1.00000000000000000000,7668,179.50,1.00},
{7669,-47.50,-179.50,1.00,1.00000000000000000000,8028,179.50,1.00},
{8029,-46.50,-179.50,1.00,1.00000000000000000000,8388,179.50,1.00},
{8389,-45.50,-179.50,1.00,1.00000000000000000000,8748,179.50,1.00},
{8749,-44.50,-179.50,1.00,1.00000000000000000000,9108,179.50,1.00},
{9109,-43.50,-179.50,1.00,1.00000000000000000000,9468,179.50,1.00},
{9469,-42.50,-179.50,1.00,1.00000000000000000000,9828,179.50,1.00},
{9829,-41.50,-179.50,1.00,1.00000000000000000000,10188,179.50,1.00},
{10189,-40.50,-179.50,1.00,1.00000000000000000000,10548,179.50,1.00},
{10549,-39.50,-179.50,1.00,1.00000000000000000000,10908,179.50,1.00},
{10909,-38.50,-179.50,1.00,1.00000000000000000000,11268,179.50,1.00},
{11269,-37.50,-179.50,1.00,1.00000000000000000000,11628,179.50,1.00},
{11629,-36.50,-179.50,1.00,1.00000000000000000000,11988,179.50,1.00},
{11989,-35.50,-179.50,1.00,1.00000000000000000000,12348,179.50,1.00},
{12349,-34.50,-179.50,1.00,1.00000000000000000000,12708,179.50,1.00},
{12709,-33.50,-179.50,1.00,1.00000000000000000000,13068,179.50,1.00},
{13069,-32.50,-179.50,1.00,1.00000000000000000000,13428,179.50,1.00},
{13429,-31.50,-179.50,1.00,1.00000000000000000000,13788,179.50,1.00},
{13789,-30.50,-179.50,1.00,1.00000000000000000000,14148,179.50,1.00},
{14149,-29.50,-179.50,1.00,1.00000000000000000000,14508,179.50,1.00},
{14509,-28.50,-179.50,1.00,1.00000000000000000000,14868,179.50,1.00},
{14869,-27.50,-179.50,1.00,1.00000000000000000000,15228,179.50,1.00},
{15229,-26.50,-179.50,1.00,1.00000000000000000000,15588,179.50,1.00},
{15589,-25.50,-179.50,1.00,1.00000000000000000000,15948,179.50,1.00},
{15949,-24.50,-179.50,1.00,1.00000000000000000000,16308,179.50,1.00},
{16309,-23.50,-179.50,1.00,1.00000000000000000000,16668,179.50,1.00},
{16669,-22.50,-179.50,1.00,1.00000000000000000000,17028,179.50,1.00},
{17029,-21.50,-179.50,1.00,1.00000000000000000000,17388,179.50,1.00},
{17389,-20.50,-179.50,1.00,1.00000000000000000000,17748,179.50,1.00},
{17749,-19.50,-179.50,1.00,1.00000000000000000000,18108,179.50,1.00},
{18109,-18.50,-179.50,1.00,1.00000000000000000000,18468,179.50,1.00},
{18469,-17.50,-179.50,1.00,1.00000000000000000000,18828,179.50,1.00},
{18829,-16.50,-179.50,1.00,1.00000000000000000000,19188,179.50,1.00},
{19189,-15.50,-179.50,1.00,1.00000000000000000000,19548,179.50,1.00},
{19549,-14.50,-179.50,1.00,1.00000000000000000000,19908,179.50,1.00},
{19909,-13.50,-179.50,1.00,1.00000000000000000000,20268,179.50,1.00},
{20269,-12.50,-179.50,1.00,1.00000000000000000000,20628,179.50,1.00},
{20629,-11.50,-179.50,1.00,1.00000000000000000000,20988,179.50,1.00},
{20989,-10.50,-179.50,1.00,1.00000000000000000000,21348,179.50,1.00},
{21349,-9.50,-179.50,1.00,1.00000000000000000000,21708,179.50,1.00},
{21709,-8.50,-179.50,1.00,1.00000000000000000000,22068,179.50,1.00},
{22069,-7.50,-179.50,1.00,1.00000000000000000000,22428,179.50,1.00},
{22429,-6.50,-179.50,1.00,1.00000000000000000000,22788,179.50,1.00},
{22789,-5.50,-179.50,1.00,1.00000000000000000000,23148,179.50,1.00},
{23149,-4.50,-179.50,1.00,1.00000000000000000000,23508,179.50,1.00},
{23509,-3.50,-179.50,1.00,1.00000000000000000000,23868,179.50,1.00},
{23869,-2.50,-179.50,1.00,1.00000000000000000000,24228,179.50,1.00},
{24229,-1.50,-179.50,1.00,1.00000000000000000000,24588,179.50,1.00},
{24589,-0.50,-179.50,1.00,1.00000000000000000000,24948,179.50,1.00},
{24949,0.50,-179.50,1.00,1.00000000000000000000,25308,179.50,1.00},
{25309,1.50,-179.50,1.00,1.00000000000000000000,25668,179.50,1.00},
{25669,2.50,-179.50,1.00,1.00000000000000000000,26028,179.50,1.00},
{26029,3.50,-179.50,1.00,1.00000000000000000000,26388,179.50,1.00},
{26389,4.50,-179.50,1.00,1.00000000000000000000,26748,179.50,1.00},
{26749,5.50,-179.50,1.00,1.00000000000000000000,27108,179.50,1.00},
{27109,6.50,-179.50,1.00,1.00000000000000000000,27468,179.50,1.00},
{27469,7.50,-179.50,1.00,1.00000000000000000000,27828,179.50,1.00},
{27829,8.50,-179.50,1.00,1.00000000000000000000,28188,179.50,1.00},
{28189,9.50,-179.50,1.00,1.00000000000000000000,28548,179.50,1.00},
{28549,10.50,-179.50,1.00,1.00000000000000000000,28908,179.50,1.00},
{28909,11.50,-179.50,1.00,1.00000000000000000000,29268,179.50,1.00},
{29269,12.50,-179.50,1.00,1.00000000000000000000,29628,179.50,1.00},
{29629,13.50,-179.50,1.00,1.00000000000000000000,29988,179.50,1.00},
{29989,14.50,-179.50,1.00,1.00000000000000000000,30348,179.50,1.00},
{30349,15.50,-179.50,1.00,1.00000000000000000000,30708,179.50,1.00},
{30709,16.50,-179.50,1.00,1.00000000000000000000,31068,179.50,1.00},
{31069,17.50,-179.50,1.00,1.00000000000000000000,31428,179.50,1.00},
{31429,18.50,-179.50,1.00,1.00000000000000000000,31788,179.50,1.00},
{31789,19.50,-179.50,1.00,1.00000000000000000000,32148,179.50,1.00},
{32149,20.50,-179.50,1.00,1.00000000000000000000,32508,179.50,1.00},
{32509,21.50,-179.50,1.00,1.00000000000000000000,32868,179.50,1.00},
{32869,22.50,-179.50,1.00,1.00000000000000000000,33228,179.50,1.00},
{33229,23.50,-179.50,1.00,1.00000000000000000000,33588,179.50,1.00},
{33589,24.50,-179.50,1.00,1.00000000000000000000,33948,179.50,1.00},
{33949,25.50,-179.50,1.00,1.00000000000000000000,34308,179.50,1.00},
{34309,26.50,-179.50,1.00,1.00000000000000000000,34668,179.50,1.00},
{34669,27.50,-179.50,1.00,1.00000000000000000000,35028,179.50,1.00},
{35029,28.50,-179.50,1.00,1.00000000000000000000,35388,179.50,1.00},
{35389,29.50,-179.50,1.00,1.00000000000000000000,35748,179.50,1.00},
{35749,30.50,-179.50,1.00,1.00000000000000000000,36108,179.50,1.00},
{36109,31.50,-179.50,1.00,1.00000000000000000000,36468,179.50,1.00},
{36469,32.50,-179.50,1.00,1.00000000000000000000,36828,179.50,1.00},
{36829,33.50,-179.50,1.00,1.00000000000000000000,37188,179.50,1.00},
{37189,34.50,-179.50,1.00,1.00000000000000000000,37548,179.50,1.00},
{37549,35.50,-179.50,1.00,1.00000000000000000000,37908,179.50,1.00},
{37909,36.50,-179.50,1.00,1.00000000000000000000,38268,179.50,1.00},
{38269,37.50,-179.50,1.00,1.00000000000000000000,38628,179.50,1.00},
{38629,38.50,-179.50,1.00,1.00000000000000000000,38988,179.50,1.00},
{38989,39.50,-179.50,1.00,1.00000000000000000000,39348,179.50,1.00},
{39349,40.50,-179.50,1.00,1.00000000000000000000,39708,179.50,1.00},
{39709,41.50,-179.50,1.00,1.00000000000000000000,40068,179.50,1.00},
{40069,42.50,-179.50,1.00,1.00000000000000000000,40428,179.50,1.00},
{40429,43.50,-179.50,1.00,1.00000000000000000000,40788,179.50,1.00},
{40789,44.50,-179.50,1.00,1.00000000000000000000,41148,179.50,1.00},
{41149,45.50,-179.50,1.00,1.00000000000000000000,41508,179.50,1.00},
{41509,46.50,-179.50,1.00,1.00000000000000000000,41868,179.50,1.00},
{41869,47.50,-179.50,1.00,1.00000000000000000000,42228,179.50,1.00},
{42229,48.50,-179.50,1.00,1.00000000000000000000,42588,179.50,1.00},
{42589,49.50,-179.50,1.00,1.00000000000000000000,42948,179.50,1.00},
{42949,50.50,-179.50,1.00,1.00000000000000000000,43308,179.50,1.00},
{43309,51.50,-179.50,1.00,1.00000000000000000000,43668,179.50,1.00},
{43669,52.50,-179.50,1.00,1.00000000000000000000,44028,179.50,1.00},
{44029,53.50,-179.50,1.00,1.00000000000000000000,44388,179.50,1.00},
{44389,54.50,-179.50,1.00,1.00000000000000000000,44748,179.50,1.00},
{44749,55.50,-179.50,1.00,1.00000000000000000000,45108,179.50,1.00},
{45109,56.50,-179.50,1.00,1.00000000000000000000,45468,179.50,1.00},
{45469,57.50,-179.50,1.00,1.00000000000000000000,45828,179.50,1.00},
{45829,58.50,-179.50,1.00,1.00000000000000000000,46188,179.50,1.00},
{46189,59.50,-179.50,1.00,1.00000000000000000000,46548,179.50,1.00},
{46549,60.50,-179.00,2.00,0.50000000000000000000,46728,179.00,2.00},
{46729,61.50,-179.00,2.00,0.50000000000000000000,46908,179.00,2.00},
{46909,62.50,-179.00,2.00,0.50000000000000000000,47088,179.00,2.00},
{47089,63.50,-179.00,2.00,0.50000000000000000000,47268,179.00,2.00},
{47269,64.50,-179.00,2.00,0.50000000000000000000,47448,179.00,2.00},
{47449,65.50,-179.00,2.00,0.50000000000000000000,47628,179.00,2.00},
{47629,66.50,-179.00,2.00,0.50000000000000000000,47808,179.00,2.00},
{47809,67.50,-179.00,2.00,0.50000000000000000000,47988,179.00,2.00},
{47989,68.50,-179.00,2.00,0.50000000000000000000,48168,179.00,2.00},
{48169,69.50,-179.00,2.00,0.50000000000000000000,48348,179.00,2.00},
{48349,70.50,-179.00,2.00,0.50000000000000000000,48528,179.00,2.00},
{48529,71.50,-178.50,3.00,0.33333333333333331483,48648,178.50,3.00},
{48649,72.50,-178.50,3.00,0.33333333333333331483,48768,178.50,3.00},
{48769,73.50,-178.50,3.00,0.33333333333333331483,48888,178.50,3.00},
{48889,74.50,-178.50,3.00,0.33333333333333331483,49008,178.50,3.00},
{49009,75.50,-178.50,3.00,0.33333333333333331483,49128,178.50,3.00},
{49129,76.50,-178.50,3.00,0.33333333333333331483,49248,178.50,3.00},
{49249,77.50,-178.50,3.00,0.33333333333333331483,49368,178.50,3.00},
{49369,78.50,-177.50,5.00,0.20000000000000001110,49440,177.50,5.00},
{49441,79.50,-177.50,5.00,0.20000000000000001110,49512,177.50,5.00},
{49513,80.50,-177.00,6.00,0.16666666666666665741,49572,177.00,6.00},
{49573,81.50,-177.00,6.00,0.16666666666666665741,49632,177.00,6.00},
{49633,82.50,-177.00,6.00,0.16666666666666665741,49692,177.00,6.00},
{49693,83.50,-177.00,6.00,0.16666666666666665741,49752,177.00,6.00},
{49753,84.50,-175.00,10.00,0.10000000000000000555,49788,175.00,10.00},
{49789,85.50,-175.00,10.00,0.10000000000000000555,49824,175.00,10.00},
{49825,86.50,-172.50,15.00,0.06666666666666666574,49848,172.50,15.00},
{49849,87.50,-172.50,15.00,0.06666666666666666574,49872,172.50,15.00},
{49873,88.50,-165.00,30.00,0.03333333333333333287,49884,165.00,30.00},
{49885,89.50,-165.00,30.00,0.03333333333333333287,49896,165.00,30.00}
};

/*Vestigal remains of oldstyle GCS implementation*/
#if 0
GCS_Row olds_array[180]={
{1,-89.50,-151.50,57.00,0.01754385964912280604,7,171.00,18.00},
{8,-88.50,-166.00,28.00,0.03571428571428571230,20,168.00,24.00},
{21,-87.50,-170.50,19.00,0.05263157894736841813,39,171.00,18.00},
{40,-86.50,-173.00,14.00,0.07142857142857142461,65,175.00,10.00},
{66,-85.50,-174.50,11.00,0.09090909090909091161,98,176.00,8.00},
{99,-84.50,-175.50,9.00,0.11111111111111110494,138,175.50,9.00},
{139,-83.50,-176.00,8.00,0.12500000000000000000,183,176.00,8.00},
{184,-82.50,-176.50,7.00,0.14285714285714284921,235,178.50,3.00},
{236,-81.50,-177.00,6.00,0.16666666666666665741,295,177.00,6.00},
{296,-80.50,-177.50,5.00,0.20000000000000001110,367,177.50,5.00},
{368,-79.50,-177.50,5.00,0.20000000000000001110,439,177.50,5.00},
{440,-78.50,-178.00,4.00,0.25000000000000000000,529,178.00,4.00},
{530,-77.50,-178.00,4.00,0.25000000000000000000,619,178.00,4.00},
{620,-76.50,-178.00,4.00,0.25000000000000000000,709,178.00,4.00},
{710,-75.50,-178.50,3.00,0.33333333333333331483,829,178.50,3.00},
{830,-74.50,-178.50,3.00,0.33333333333333331483,949,178.50,3.00},
{950,-73.50,-178.50,3.00,0.33333333333333331483,1069,178.50,3.00},
{1070,-72.50,-178.50,3.00,0.33333333333333331483,1189,178.50,3.00},
{1190,-71.50,-178.50,3.00,0.33333333333333331483,1309,178.50,3.00},
{1310,-70.50,-179.00,2.00,0.50000000000000000000,1489,179.00,2.00},
{1490,-69.50,-179.00,2.00,0.50000000000000000000,1669,179.00,2.00},
{1670,-68.50,-179.00,2.00,0.50000000000000000000,1849,179.00,2.00},
{1850,-67.50,-179.00,2.00,0.50000000000000000000,2029,179.00,2.00},
{2030,-66.50,-179.00,2.00,0.50000000000000000000,2209,179.00,2.00},
{2210,-65.50,-179.00,2.00,0.50000000000000000000,2389,179.00,2.00},
{2390,-64.50,-179.00,2.00,0.50000000000000000000,2569,179.00,2.00},
{2570,-63.50,-179.00,2.00,0.50000000000000000000,2749,179.00,2.00},
{2750,-62.50,-179.00,2.00,0.50000000000000000000,2929,179.00,2.00},
{2930,-61.50,-179.00,2.00,0.50000000000000000000,3109,179.00,2.00},
{3110,-60.50,-179.00,2.00,0.50000000000000000000,3289,179.00,2.00},
{3290,-59.50,-179.50,1.00,1.00000000000000000000,3649,179.50,1.00},
{3650,-58.50,-179.50,1.00,1.00000000000000000000,4009,179.50,1.00},
{4010,-57.50,-179.50,1.00,1.00000000000000000000,4369,179.50,1.00},
{4370,-56.50,-179.50,1.00,1.00000000000000000000,4729,179.50,1.00},
{4730,-55.50,-179.50,1.00,1.00000000000000000000,5089,179.50,1.00},
{5090,-54.50,-179.50,1.00,1.00000000000000000000,5449,179.50,1.00},
{5450,-53.50,-179.50,1.00,1.00000000000000000000,5809,179.50,1.00},
{5810,-52.50,-179.50,1.00,1.00000000000000000000,6169,179.50,1.00},
{6170,-51.50,-179.50,1.00,1.00000000000000000000,6529,179.50,1.00},
{6530,-50.50,-179.50,1.00,1.00000000000000000000,6889,179.50,1.00},
{6890,-49.50,-179.50,1.00,1.00000000000000000000,7249,179.50,1.00},
{7250,-48.50,-179.50,1.00,1.00000000000000000000,7609,179.50,1.00},
{7610,-47.50,-179.50,1.00,1.00000000000000000000,7969,179.50,1.00},
{7970,-46.50,-179.50,1.00,1.00000000000000000000,8329,179.50,1.00},
{8330,-45.50,-179.50,1.00,1.00000000000000000000,8689,179.50,1.00},
{8690,-44.50,-179.50,1.00,1.00000000000000000000,9049,179.50,1.00},
{9050,-43.50,-179.50,1.00,1.00000000000000000000,9409,179.50,1.00},
{9410,-42.50,-179.50,1.00,1.00000000000000000000,9769,179.50,1.00},
{9770,-41.50,-179.50,1.00,1.00000000000000000000,10129,179.50,1.00},
{10130,-40.50,-179.50,1.00,1.00000000000000000000,10489,179.50,1.00},
{10490,-39.50,-179.50,1.00,1.00000000000000000000,10849,179.50,1.00},
{10850,-38.50,-179.50,1.00,1.00000000000000000000,11209,179.50,1.00},
{11210,-37.50,-179.50,1.00,1.00000000000000000000,11569,179.50,1.00},
{11570,-36.50,-179.50,1.00,1.00000000000000000000,11929,179.50,1.00},
{11930,-35.50,-179.50,1.00,1.00000000000000000000,12289,179.50,1.00},
{12290,-34.50,-179.50,1.00,1.00000000000000000000,12649,179.50,1.00},
{12650,-33.50,-179.50,1.00,1.00000000000000000000,13009,179.50,1.00},
{13010,-32.50,-179.50,1.00,1.00000000000000000000,13369,179.50,1.00},
{13370,-31.50,-179.50,1.00,1.00000000000000000000,13729,179.50,1.00},
{13730,-30.50,-179.50,1.00,1.00000000000000000000,14089,179.50,1.00},
{14090,-29.50,-179.50,1.00,1.00000000000000000000,14449,179.50,1.00},
{14450,-28.50,-179.50,1.00,1.00000000000000000000,14809,179.50,1.00},
{14810,-27.50,-179.50,1.00,1.00000000000000000000,15169,179.50,1.00},
{15170,-26.50,-179.50,1.00,1.00000000000000000000,15529,179.50,1.00},
{15530,-25.50,-179.50,1.00,1.00000000000000000000,15889,179.50,1.00},
{15890,-24.50,-179.50,1.00,1.00000000000000000000,16249,179.50,1.00},
{16250,-23.50,-179.50,1.00,1.00000000000000000000,16609,179.50,1.00},
{16610,-22.50,-179.50,1.00,1.00000000000000000000,16969,179.50,1.00},
{16970,-21.50,-179.50,1.00,1.00000000000000000000,17329,179.50,1.00},
{17330,-20.50,-179.50,1.00,1.00000000000000000000,17689,179.50,1.00},
{17690,-19.50,-179.50,1.00,1.00000000000000000000,18049,179.50,1.00},
{18050,-18.50,-179.50,1.00,1.00000000000000000000,18409,179.50,1.00},
{18410,-17.50,-179.50,1.00,1.00000000000000000000,18769,179.50,1.00},
{18770,-16.50,-179.50,1.00,1.00000000000000000000,19129,179.50,1.00},
{19130,-15.50,-179.50,1.00,1.00000000000000000000,19489,179.50,1.00},
{19490,-14.50,-179.50,1.00,1.00000000000000000000,19849,179.50,1.00},
{19850,-13.50,-179.50,1.00,1.00000000000000000000,20209,179.50,1.00},
{20210,-12.50,-179.50,1.00,1.00000000000000000000,20569,179.50,1.00},
{20570,-11.50,-179.50,1.00,1.00000000000000000000,20929,179.50,1.00},
{20930,-10.50,-179.50,1.00,1.00000000000000000000,21289,179.50,1.00},
{21290,-9.50,-179.50,1.00,1.00000000000000000000,21649,179.50,1.00},
{21650,-8.50,-179.50,1.00,1.00000000000000000000,22009,179.50,1.00},
{22010,-7.50,-179.50,1.00,1.00000000000000000000,22369,179.50,1.00},
{22370,-6.50,-179.50,1.00,1.00000000000000000000,22729,179.50,1.00},
{22730,-5.50,-179.50,1.00,1.00000000000000000000,23089,179.50,1.00},
{23090,-4.50,-179.50,1.00,1.00000000000000000000,23449,179.50,1.00},
{23450,-3.50,-179.50,1.00,1.00000000000000000000,23809,179.50,1.00},
{23810,-2.50,-179.50,1.00,1.00000000000000000000,24169,179.50,1.00},
{24170,-1.50,-179.50,1.00,1.00000000000000000000,24529,179.50,1.00},
{24530,-0.50,-179.50,1.00,1.00000000000000000000,24889,179.50,1.00},
{24890,0.50,-179.50,1.00,1.00000000000000000000,25249,179.50,1.00},
{25250,1.50,-179.50,1.00,1.00000000000000000000,25609,179.50,1.00},
{25610,2.50,-179.50,1.00,1.00000000000000000000,25969,179.50,1.00},
{25970,3.50,-179.50,1.00,1.00000000000000000000,26329,179.50,1.00},
{26330,4.50,-179.50,1.00,1.00000000000000000000,26689,179.50,1.00},
{26690,5.50,-179.50,1.00,1.00000000000000000000,27049,179.50,1.00},
{27050,6.50,-179.50,1.00,1.00000000000000000000,27409,179.50,1.00},
{27410,7.50,-179.50,1.00,1.00000000000000000000,27769,179.50,1.00},
{27770,8.50,-179.50,1.00,1.00000000000000000000,28129,179.50,1.00},
{28130,9.50,-179.50,1.00,1.00000000000000000000,28489,179.50,1.00},
{28490,10.50,-179.50,1.00,1.00000000000000000000,28849,179.50,1.00},
{28850,11.50,-179.50,1.00,1.00000000000000000000,29209,179.50,1.00},
{29210,12.50,-179.50,1.00,1.00000000000000000000,29569,179.50,1.00},
{29570,13.50,-179.50,1.00,1.00000000000000000000,29929,179.50,1.00},
{29930,14.50,-179.50,1.00,1.00000000000000000000,30289,179.50,1.00},
{30290,15.50,-179.50,1.00,1.00000000000000000000,30649,179.50,1.00},
{30650,16.50,-179.50,1.00,1.00000000000000000000,31009,179.50,1.00},
{31010,17.50,-179.50,1.00,1.00000000000000000000,31369,179.50,1.00},
{31370,18.50,-179.50,1.00,1.00000000000000000000,31729,179.50,1.00},
{31730,19.50,-179.50,1.00,1.00000000000000000000,32089,179.50,1.00},
{32090,20.50,-179.50,1.00,1.00000000000000000000,32449,179.50,1.00},
{32450,21.50,-179.50,1.00,1.00000000000000000000,32809,179.50,1.00},
{32810,22.50,-179.50,1.00,1.00000000000000000000,33169,179.50,1.00},
{33170,23.50,-179.50,1.00,1.00000000000000000000,33529,179.50,1.00},
{33530,24.50,-179.50,1.00,1.00000000000000000000,33889,179.50,1.00},
{33890,25.50,-179.50,1.00,1.00000000000000000000,34249,179.50,1.00},
{34250,26.50,-179.50,1.00,1.00000000000000000000,34609,179.50,1.00},
{34610,27.50,-179.50,1.00,1.00000000000000000000,34969,179.50,1.00},
{34970,28.50,-179.50,1.00,1.00000000000000000000,35329,179.50,1.00},
{35330,29.50,-179.50,1.00,1.00000000000000000000,35689,179.50,1.00},
{35690,30.50,-179.50,1.00,1.00000000000000000000,36049,179.50,1.00},
{36050,31.50,-179.50,1.00,1.00000000000000000000,36409,179.50,1.00},
{36410,32.50,-179.50,1.00,1.00000000000000000000,36769,179.50,1.00},
{36770,33.50,-179.50,1.00,1.00000000000000000000,37129,179.50,1.00},
{37130,34.50,-179.50,1.00,1.00000000000000000000,37489,179.50,1.00},
{37490,35.50,-179.50,1.00,1.00000000000000000000,37849,179.50,1.00},
{37850,36.50,-179.50,1.00,1.00000000000000000000,38209,179.50,1.00},
{38210,37.50,-179.50,1.00,1.00000000000000000000,38569,179.50,1.00},
{38570,38.50,-179.50,1.00,1.00000000000000000000,38929,179.50,1.00},
{38930,39.50,-179.50,1.00,1.00000000000000000000,39289,179.50,1.00},
{39290,40.50,-179.50,1.00,1.00000000000000000000,39649,179.50,1.00},
{39650,41.50,-179.50,1.00,1.00000000000000000000,40009,179.50,1.00},
{40010,42.50,-179.50,1.00,1.00000000000000000000,40369,179.50,1.00},
{40370,43.50,-179.50,1.00,1.00000000000000000000,40729,179.50,1.00},
{40730,44.50,-179.50,1.00,1.00000000000000000000,41089,179.50,1.00},
{41090,45.50,-179.50,1.00,1.00000000000000000000,41449,179.50,1.00},
{41450,46.50,-179.50,1.00,1.00000000000000000000,41809,179.50,1.00},
{41810,47.50,-179.50,1.00,1.00000000000000000000,42169,179.50,1.00},
{42170,48.50,-179.50,1.00,1.00000000000000000000,42529,179.50,1.00},
{42530,49.50,-179.50,1.00,1.00000000000000000000,42889,179.50,1.00},
{42890,50.50,-179.50,1.00,1.00000000000000000000,43249,179.50,1.00},
{43250,51.50,-179.50,1.00,1.00000000000000000000,43609,179.50,1.00},
{43610,52.50,-179.50,1.00,1.00000000000000000000,43969,179.50,1.00},
{43970,53.50,-179.50,1.00,1.00000000000000000000,44329,179.50,1.00},
{44330,54.50,-179.50,1.00,1.00000000000000000000,44689,179.50,1.00},
{44690,55.50,-179.50,1.00,1.00000000000000000000,45049,179.50,1.00},
{45050,56.50,-179.50,1.00,1.00000000000000000000,45409,179.50,1.00},
{45410,57.50,-179.50,1.00,1.00000000000000000000,45769,179.50,1.00},
{45770,58.50,-179.50,1.00,1.00000000000000000000,46129,179.50,1.00},
{46130,59.50,-179.50,1.00,1.00000000000000000000,46489,179.50,1.00},
{46490,60.50,-179.00,2.00,0.50000000000000000000,46669,179.00,2.00},
{46670,61.50,-179.00,2.00,0.50000000000000000000,46849,179.00,2.00},
{46850,62.50,-179.00,2.00,0.50000000000000000000,47029,179.00,2.00},
{47030,63.50,-179.00,2.00,0.50000000000000000000,47209,179.00,2.00},
{47210,64.50,-179.00,2.00,0.50000000000000000000,47389,179.00,2.00},
{47390,65.50,-179.00,2.00,0.50000000000000000000,47569,179.00,2.00},
{47570,66.50,-179.00,2.00,0.50000000000000000000,47749,179.00,2.00},
{47750,67.50,-179.00,2.00,0.50000000000000000000,47929,179.00,2.00},
{47930,68.50,-179.00,2.00,0.50000000000000000000,48109,179.00,2.00},
{48110,69.50,-179.00,2.00,0.50000000000000000000,48289,179.00,2.00},
{48290,70.50,-179.00,2.00,0.50000000000000000000,48469,179.00,2.00},
{48470,71.50,-178.50,3.00,0.33333333333333331483,48589,178.50,3.00},
{48590,72.50,-178.50,3.00,0.33333333333333331483,48709,178.50,3.00},
{48710,73.50,-178.50,3.00,0.33333333333333331483,48829,178.50,3.00},
{48830,74.50,-178.50,3.00,0.33333333333333331483,48949,178.50,3.00},
{48950,75.50,-178.50,3.00,0.33333333333333331483,49069,178.50,3.00},
{49070,76.50,-178.00,4.00,0.25000000000000000000,49159,178.00,4.00},
{49160,77.50,-178.00,4.00,0.25000000000000000000,49249,178.00,4.00},
{49250,78.50,-178.00,4.00,0.25000000000000000000,49339,178.00,4.00},
{49340,79.50,-177.50,5.00,0.20000000000000001110,49411,177.50,5.00},
{49412,80.50,-177.50,5.00,0.20000000000000001110,49483,177.50,5.00},
{49484,81.50,-177.00,6.00,0.16666666666666665741,49543,177.00,6.00},
{49544,82.50,-176.50,7.00,0.14285714285714284921,49595,178.50,3.00},
{49596,83.50,-176.00,8.00,0.12500000000000000000,49640,176.00,8.00},
{49641,84.50,-175.50,9.00,0.11111111111111110494,49680,175.50,9.00},
{49681,85.50,-174.50,11.00,0.09090909090909091161,49713,176.00,8.00},
{49714,86.50,-173.00,14.00,0.07142857142857142461,49739,175.00,10.00},
{49740,87.50,-170.50,19.00,0.05263157894736841813,49758,171.00,18.00},
{49759,88.50,-166.00,28.00,0.03571428571428571230,49771,168.00,24.00},
{49772,89.50,-151.50,57.00,0.01754385964912280604,49778,171.00,18.00}
};
#endif

/*
 * GLOBAL VARIABLE: Master_GTRS_Table
 *
 *   This structure hold the cell table and index for GCS lookups.
 *   since GTRS is the officially supported version, the implementation
 *   will be optimized for it; those who need oldstyle support can
 *   clean up after themselves.  It's initialized to NULL so that
 *   we know its uninitialized.
 */
GCS_table Master_GTRS_Table={gtrs_array,gtrs_cell_id_index};
#if 0
/*vestigal remains of oldstyle GCS implementation*/
GCS_table Master_OLDS_Table={olds_array,NULL};
#endif
/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: get_GCS_cell_origin
 *
 * This routine has been updated from the 12/12/2002 patch associated with SRI-5
 * where longitude returned by this routine was corrected.
 *
 *----------------------------------------------------------------------------
 */
LTP_cell_origin
get_GCS_cell_origin
(
    SRM_Integer cellid,
    GCS_table   table
)
{
    LTP_cell_origin origin;

    if(cellid != table.cellid_table[table.cellid_index[cellid]].maximum_cell_id)
    {
        origin.lon=((cellid-table.cellid_table[table.cellid_index[cellid]].minimum_cell_id)*
             (table.cellid_table[table.cellid_index[cellid]].cell_width)+
             (table.cellid_table[table.cellid_index[cellid]].starting_lon));

        origin.lon_min_extent=origin.lon-table.cellid_table[table.cellid_index[cellid]].cell_width*0.5 ;
        origin.lon_max_extent=origin.lon+table.cellid_table[table.cellid_index[cellid]].cell_width*0.5 ;
    }
    else
    {
        origin.lon=table.cellid_table[table.cellid_index[cellid]].irreg_cell_lon;
        origin.lon_min_extent=origin.lon-table.cellid_table[table.cellid_index[cellid]].irreg_cell_width*0.5 ;
        origin.lon_max_extent=origin.lon+table.cellid_table[table.cellid_index[cellid]].irreg_cell_width*0.5 ;
    }
    origin.lat=table.cellid_table[table.cellid_index[cellid]].row_lat;
    origin.lat*=SRM_RADIANS_PER_DEGREE;

    origin.lon*=SRM_RADIANS_PER_DEGREE;
    origin.lon_min_extent*=SRM_RADIANS_PER_DEGREE;
    origin.lon_max_extent*=SRM_RADIANS_PER_DEGREE;

    return origin;
} /* end get_GCS_cell_origin */


#ifdef SRM_DEBUG
static void print_GCS_cell_origin
(
    SRM_Integer cellid,
    GCS_table   table
)
{
    fprintf(stderr, "lon=%f lat=%f\n",
            (cellid-1)*table.cellid_table[table.cellid_index[cellid]]->cell_width +
                       table.cellid_table[table.cellid_index[cellid]]->starting_lon,
            table.cellid_table[table.cellid_index[cellid]]->row_lat);
} /* end print_GCS_cell_origin */
#endif

Impl_Status Impl_createLTESRFspecificData
(
    const Impl_ORM_Data               *e_constants,
    const IMPL_LOC_TAN_EUCLIDEAN_SRFP *ltp_srf,
          Impl_LTE_SRF_Specific_Data  *ltp_spec_dat
)
{
    Impl_Status status=IMPL_VALID;
    SRM_Long_Float azimuth,Origin_Height,radius,rn,height_radius_factor;/*,x_offset,y_offset;*/
    SRM_Long_Float slat, clat, slon, clon;
    SRM_Long_Float R0[4][4];
    SRM_Long_Float R[4];
    SRM_Long_Float R2[4];
    LTP_cell_origin origin;

    memcpy(R0,Impl_Identity_Matrix4x4,sizeof(Impl_Identity_Matrix4x4));

    origin.lon = ltp_srf->geodetic_longitude;
    origin.lat = ltp_srf->geodetic_latitude;
    azimuth    = ltp_srf->azimuth;

    /*x_offset   =    0.0;  */    /*ltp_srf->x_false_origin;*/
    /*y_offset   =    0.0;  */    /*ltp_srf->y_false_origin;*/
    Origin_Height = ltp_srf->height_offset;

    /*These false origins have been set to zero so the false origns are not
      added twice since false origin handling has been moved to the
      false origin handlers in srm_coord_offsets.cpp.  CDK 03/31/2004*/

    srm_sincos(origin.lat, slat, clat);
    srm_sincos(origin.lon, slon, clon);
    if (e_constants->Eps != 0.0) /* ellipsoid */
    {
        COMPUTE_RN_EXACT(slat * slat, rn);

        radius = rn + Origin_Height;

        height_radius_factor = Origin_Height + rn * (1.0 - e_constants->Eps2);
    }
    else  /* spheroid */
    {
        radius = Origin_Height + e_constants->A;
        height_radius_factor = radius;
    }
    R[0]= radius * clat * clon;
    R[1]= radius * clat * slon;
    R[2]= height_radius_factor * slat;
    R[3]= 1.0;

    SRM_LTP_Rotation_Matrix_T(ltp_spec_dat->T, origin.lon, origin.lat, azimuth);

    ltp_spec_dat->T[0][3] = R[0];
    ltp_spec_dat->T[1][3] = R[1];
    ltp_spec_dat->T[2][3] = R[2];
    ltp_spec_dat->T[3][3] = 1.0;

    Impl_transpose(ltp_spec_dat->T,ltp_spec_dat->T_inv,4);

    R[0]*=-1.0;
    R[1]*=-1.0;
    R[2]*=-1.0;

    Impl_MultMatrixSubset(ltp_spec_dat->T_inv,R,R2,4,3);

    ltp_spec_dat->T_inv[3][0]=0.0;
    ltp_spec_dat->T_inv[3][1]=0.0;
    ltp_spec_dat->T_inv[3][2]=0.0;

    ltp_spec_dat->T_inv[0][3] =R2[0];
    ltp_spec_dat->T_inv[1][3] =R2[1];
    ltp_spec_dat->T_inv[2][3] =R2[2];
    ltp_spec_dat->T_inv[3][3] = 1.0;

    return status;
}

/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: set_lte_cc_constants
 *
 *----------------------------------------------------------------------------
 */
Impl_Status
set_lte_cc_constants
(
    Impl_LTE_SRF_Specific_Data    *lte_srf_specific_data,
    SRM_LTE_CC_Specific_Constants *lte_cc_spec
)
{
    memcpy(lte_cc_spec->T,lte_srf_specific_data->T,16*sizeof(SRM_Long_Float));

    return IMPL_VALID;
} /* end set_lte_cc_constants */

Impl_Status
set_cc_lte_constants
(
    Impl_LTE_SRF_Specific_Data    *lte_srf_specific_data,
    SRM_CC_LTE_Specific_Constants *cc_lte_spec
)
{
    memcpy(cc_lte_spec->T,lte_srf_specific_data->T_inv,16*sizeof(SRM_Long_Float));

    return IMPL_VALID;
}

/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: SRM_ChangeLTE_CC
 *
 *----------------------------------------------------------------------------
 */
Impl_Status
SRM_ChangeLTE_CC
(
          void           *constants,
    const SRM_Long_Float  source_generic_coordinate[4],
          SRM_Long_Float  dest_generic_coordinate[4]
)
{
    SRM_LTE_CC_Specific_Constants *ltp_spec = (SRM_LTE_CC_Specific_Constants*)(constants);

    Impl_MultMatrixVector(ltp_spec->T,source_generic_coordinate,dest_generic_coordinate,4);

    return IMPL_VALID;
} /* end SRM_ChangeLTE_CC */


/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: SRM_ChangeCC_LTE
 *
 *----------------------------------------------------------------------------
 */
Impl_Status
SRM_ChangeCC_LTE
(
          void           *constants,
    const SRM_Long_Float  source_generic_coordinate[4],
          SRM_Long_Float  dest_generic_coordinate[4]
)
{
    SRM_CC_LTE_Specific_Constants *ltp_spec = (SRM_CC_LTE_Specific_Constants *)(constants);

    Impl_MultMatrixVector(ltp_spec->T,source_generic_coordinate,dest_generic_coordinate, 4);

    return IMPL_VALID;
} /* end SRM_ChangeCC_LTE */


/* Code pertaining to LTP Generating Function */


/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: Impl_GTRS_NaturalCell
 *
 *----------------------------------------------------------------------------
 */
SRM_Integer
Impl_GTRS_NaturalCell(SRM_Long_Float coordinate[3])
{
    SRM_Integer lat_index, new_cellid;

  /*
   * The GTRS GCS table is indexed by latitude + 90 degrees
   * because to look up latitude in the table with latitude lines numbered 0 is -90 through 179 is 90
   * one must add 90 degrees to an SRM latitude.
   * EX: a latitude of -90 degrees will show up in the table as row 0 while a latitude of plus 90 will show
   * up as row 179
   *
   */

    lat_index = (SRM_Integer) (floor(coordinate[1]*SRM_DEGREES_PER_RADIAN) + 90.0);

    new_cellid = (SRM_Integer)
    (
     gtrs_array[lat_index].minimum_cell_id +
     floor( (coordinate[0]*SRM_DEGREES_PER_RADIAN+180.0) * gtrs_array[lat_index].cell_width_inv)
     );

    return new_cellid;
}


/*
 *----------------------------------------------------------------------------
 *
 * FUNCTION: Impl_GTRS_validcoord
 *
 *----------------------------------------------------------------------------
 */
Impl_Status
Impl_GTRS_validcoord
(
    SRM_Integer    cell,
    SRM_Long_Float v_coord[3]
)
{
    LTP_cell_origin origin;
    Impl_Status status=IMPL_INACTBLE;

    origin=get_GCS_cell_origin(cell, Master_GTRS_Table);

    if ((v_coord[0]>=origin.lon_min_extent)&&
        (v_coord[0]<=origin.lon_max_extent)&&
        (v_coord[1]>=(origin.lat-(0.5*SRM_RADIANS_PER_DEGREE)))&&
        (v_coord[1]<=(origin.lat+(0.5*SRM_RADIANS_PER_DEGREE)))
       )
    {
        status=IMPL_VALID;
    }
    else
    {
        status=IMPL_EXTENDED;
    }
    return status;
} /* end Impl_GTRS_validcoord */
