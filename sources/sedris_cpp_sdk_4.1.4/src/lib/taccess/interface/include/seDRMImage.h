/*
 *  Copyright (c) 2006 Accent Geographic. All rights reserved.
 *  See the license file for licensing information.
 *  Created: Wed Jul 26 23:47:08 2006
 *
 *  DO NOT EDIT THIS FILE! (Autogenerated)
 */

// SEDRIS C++ SDK Release 4.1.4 - July 1, 2011

/*
 *                             NOTICE
 * 
 * This software is provided openly and freely for use in representing and
 * interchanging environmental data & databases.
 * 
 * This software was developed for use by the United States Government with
 * unlimited rights.  The software was developed under contract
 * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.
 * The software is unclassified and is deemed as Distribution A, approved
 * for Public Release.
 * 
 * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND
 * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:
 * 
 *    1. Recipient may make unlimited copies of this software and give
 *       copies to other persons or entities as long as the copies contain
 *       this NOTICE, and as long as the same copyright notices that
 *       appear on, or in, this software remain.
 * 
 *    2. Trademarks. All trademarks belong to their respective trademark
 *       holders.  Third-Party applications/software/information are
 *       copyrighted by their respective owners.
 * 
 *    3. Recipient agrees to forfeit all intellectual property and
 *       ownership rights for any version created from the modification
 *       or adaptation of this software, including versions created from
 *       the translation and/or reverse engineering of the software design.
 * 
 *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense
 *       this software.  Recipient may, however enable another person
 *       or entity the rights to use this software, provided that this
 *       AGREEMENT and NOTICE is furnished along with the software and
 *       /or software system utilizing this software.
 * 
 *       All revisions, modifications, created by the Recipient, to this
 *       software and/or related technical data shall be forwarded by the
 *       Recipient to the Government at the following address:
 * 
 *         SMDC
 *         Attention SEDRIS (TO193) TPOC
 *         P.O. Box 1500
 *         Huntsville, AL  35807-3801
 * 
 *         or via electronic mail to:  se-mgmt@sedris.org
 * 
 *    5. No Warranty. This software is being delivered to you AS IS
 *       and there is no warranty, EXPRESS or IMPLIED, as to its use
 *       or performance.
 * 
 *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING
 *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the
 *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY
 *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS
 *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF
 *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY
 *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE
 *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE
 *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,
 *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS
 *       OR LOST SAVINGS WHATSOEVER.
 */

/** @file seDRMImage.h
@author Warren Macchi (Accent Geographic)
@brief Accessors to the seDRMImage (108) class.
*/

#ifndef _seDRMImage_h
#define _seDRMImage_h

#include "seDRMBase.h"

namespace sedris {

/** seDRMImage wraps the DRM <a href="../drm/classes/Image.htm">&lt;Image&gt;</a> class.
@author Warren Macchi
@version Revision: 1.8
@see seDRMBase
*/
class EXPORT_DLL seDRMImage : public seDRMBase
{
public:

    /// Default constructor
    seDRMImage() {}

    /// Constructor for seDRM... class conversions
    seDRMImage( const seObject &other ) : seDRMBase(other) {}

    /// Get field <a href="../drm/classes/Image.htm#name">name</a>
    const SE_String& get_name()
    {
        DRMBASE_RET_FIELDS(Image, name);
    }

    /// Set field <a href="../drm/classes/Image.htm#name">name</a> by parameter list
    void set_name
    (
        const SE_Character* characters,
        SE_Integer_Unsigned length=0,
        const SE_Locale& locale=SE_LOCALE_DEFAULT
    )
    {
        DRMBASE_ALLOC_FIELDS;
        set_SE_String(DRMBASE_ACC_FIELDS(Image, name), characters, length, locale);
    }

    /// Set field <a href="../drm/classes/Image.htm#name">name</a>
    void set_name( const SE_String& name )
    {
        DRMBASE_ALLOC_FIELDS;
        set_SE_String(DRMBASE_ACC_FIELDS(Image, name), name);
    }

    /// Get field <a href="../drm/classes/Image.htm#colour_model">colour_model</a>
    SE_Colour_Model get_colour_model()
    {
        DRMBASE_RET_FIELDS(Image, colour_model);
    }

    /// Set field <a href="../drm/classes/Image.htm#colour_model">colour_model</a>
    void set_colour_model( SE_Colour_Model colour_model )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, colour_model, colour_model);
    }

    /// Get field <a href="../drm/classes/Image.htm#level_count">level_count</a>
    SE_Short_Integer_Positive get_level_count()
    {
        DRMBASE_RET_FIELDS(Image, level_count);
    }

    /// Set field <a href="../drm/classes/Image.htm#level_count">level_count</a>
    void set_level_count( SE_Short_Integer_Positive level_count )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, level_count, level_count);
    }

    /// Get field <a href="../drm/classes/Image.htm#mip_extents_array">mip_extents_array</a>
    const SE_Image_MIP_Extents* get_mip_extents_array()
    {
        DRMBASE_RET_FIELDS(Image, mip_extents_array);
    }

    /// Set field <a href="../drm/classes/Image.htm#mip_extents_array">mip_extents_array</a>
    void set_mip_extents_array( const SE_Image_MIP_Extents* mip_extents_array, SE_Short_Integer_Positive level_count )
    {
        DRMBASE_ALLOC_FIELDS;
        set_SE_Image_MIP_Extents(DRMBASE_ACC_FIELDS(Image, mip_extents_array), DRMBASE_ACC_FIELDS(Image, level_count), mip_extents_array, level_count);
    }

    /// Get field <a href="../drm/classes/Image.htm#image_signature">image_signature</a>
    SE_Image_Signature get_image_signature()
    {
        DRMBASE_RET_FIELDS(Image, image_signature);
    }

    /// Set field <a href="../drm/classes/Image.htm#image_signature">image_signature</a>
    void set_image_signature( SE_Image_Signature image_signature )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, image_signature, image_signature);
    }

    /// Get field <a href="../drm/classes/Image.htm#scan_direction">scan_direction</a>
    SE_Image_Scan_Direction get_scan_direction()
    {
        DRMBASE_RET_FIELDS(Image, scan_direction);
    }

    /// Set field <a href="../drm/classes/Image.htm#scan_direction">scan_direction</a>
    void set_scan_direction( SE_Image_Scan_Direction scan_direction )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, scan_direction, scan_direction);
    }

    /// Get field <a href="../drm/classes/Image.htm#scan_direction_z">scan_direction_z</a>
    SE_Image_Scan_Direction_Z get_scan_direction_z()
    {
        DRMBASE_RET_FIELDS(Image, scan_direction_z);
    }

    /// Set field <a href="../drm/classes/Image.htm#scan_direction_z">scan_direction_z</a>
    void set_scan_direction_z( SE_Image_Scan_Direction_Z scan_direction_z )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, scan_direction_z, scan_direction_z);
    }

    /// Get field <a href="../drm/classes/Image.htm#component_data_type">component_data_type</a>
    SE_Image_Component_Type get_component_data_type()
    {
        DRMBASE_RET_FIELDS(Image, component_data_type);
    }

    /// Set field <a href="../drm/classes/Image.htm#component_data_type">component_data_type</a>
    void set_component_data_type( SE_Image_Component_Type component_data_type )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, component_data_type, component_data_type);
    }

    /// Get field <a href="../drm/classes/Image.htm#data_is_little_endian">data_is_little_endian</a>
    SE_Boolean get_data_is_little_endian()
    {
        DRMBASE_RET_FIELDS(Image, data_is_little_endian);
    }

    /// Set field <a href="../drm/classes/Image.htm#data_is_little_endian">data_is_little_endian</a>
    void set_data_is_little_endian( SE_Boolean data_is_little_endian )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, data_is_little_endian, data_is_little_endian);
    }

    /// Get field <a href="../drm/classes/Image.htm#data_is_3D">data_is_3D</a>
    SE_Boolean get_data_is_3D()
    {
        DRMBASE_RET_FIELDS(Image, data_is_3D);
    }

    /// Set field <a href="../drm/classes/Image.htm#data_is_3D">data_is_3D</a>
    void set_data_is_3D( SE_Boolean data_is_3D )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, data_is_3D, data_is_3D);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_alpha">bits_of_alpha</a>
    SE_Short_Integer_Unsigned get_bits_of_alpha()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_alpha);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_alpha">bits_of_alpha</a>
    void set_bits_of_alpha( SE_Short_Integer_Unsigned bits_of_alpha )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_alpha, bits_of_alpha);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_luminance">bits_of_luminance</a>
    SE_Short_Integer_Unsigned get_bits_of_luminance()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_luminance);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_luminance">bits_of_luminance</a>
    void set_bits_of_luminance( SE_Short_Integer_Unsigned bits_of_luminance )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_luminance, bits_of_luminance);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_1">bits_of_colour_coordinate_1</a>
    SE_Short_Integer_Unsigned get_bits_of_colour_coordinate_1()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_colour_coordinate_1);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_1">bits_of_colour_coordinate_1</a>
    void set_bits_of_colour_coordinate_1( SE_Short_Integer_Unsigned bits_of_colour_coordinate_1 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_colour_coordinate_1, bits_of_colour_coordinate_1);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_2">bits_of_colour_coordinate_2</a>
    SE_Short_Integer_Unsigned get_bits_of_colour_coordinate_2()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_colour_coordinate_2);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_2">bits_of_colour_coordinate_2</a>
    void set_bits_of_colour_coordinate_2( SE_Short_Integer_Unsigned bits_of_colour_coordinate_2 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_colour_coordinate_2, bits_of_colour_coordinate_2);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_3">bits_of_colour_coordinate_3</a>
    SE_Short_Integer_Unsigned get_bits_of_colour_coordinate_3()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_colour_coordinate_3);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_colour_coordinate_3">bits_of_colour_coordinate_3</a>
    void set_bits_of_colour_coordinate_3( SE_Short_Integer_Unsigned bits_of_colour_coordinate_3 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_colour_coordinate_3, bits_of_colour_coordinate_3);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_bump_map_height">bits_of_bump_map_height</a>
    SE_Short_Integer_Unsigned get_bits_of_bump_map_height()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_bump_map_height);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_bump_map_height">bits_of_bump_map_height</a>
    void set_bits_of_bump_map_height( SE_Short_Integer_Unsigned bits_of_bump_map_height )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_bump_map_height, bits_of_bump_map_height);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_material_1">bits_of_material_1</a>
    SE_Short_Integer_Unsigned get_bits_of_material_1()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_material_1);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_material_1">bits_of_material_1</a>
    void set_bits_of_material_1( SE_Short_Integer_Unsigned bits_of_material_1 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_material_1, bits_of_material_1);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_material_2">bits_of_material_2</a>
    SE_Short_Integer_Unsigned get_bits_of_material_2()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_material_2);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_material_2">bits_of_material_2</a>
    void set_bits_of_material_2( SE_Short_Integer_Unsigned bits_of_material_2 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_material_2, bits_of_material_2);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_material_3">bits_of_material_3</a>
    SE_Short_Integer_Unsigned get_bits_of_material_3()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_material_3);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_material_3">bits_of_material_3</a>
    void set_bits_of_material_3( SE_Short_Integer_Unsigned bits_of_material_3 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_material_3, bits_of_material_3);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_material_2_percentage">bits_of_material_2_percentage</a>
    SE_Short_Integer_Unsigned get_bits_of_material_2_percentage()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_material_2_percentage);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_material_2_percentage">bits_of_material_2_percentage</a>
    void set_bits_of_material_2_percentage( SE_Short_Integer_Unsigned bits_of_material_2_percentage )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_material_2_percentage, bits_of_material_2_percentage);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_material_3_percentage">bits_of_material_3_percentage</a>
    SE_Short_Integer_Unsigned get_bits_of_material_3_percentage()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_material_3_percentage);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_material_3_percentage">bits_of_material_3_percentage</a>
    void set_bits_of_material_3_percentage( SE_Short_Integer_Unsigned bits_of_material_3_percentage )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_material_3_percentage, bits_of_material_3_percentage);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_image_index">bits_of_image_index</a>
    SE_Short_Integer_Unsigned get_bits_of_image_index()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_image_index);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_image_index">bits_of_image_index</a>
    void set_bits_of_image_index( SE_Short_Integer_Unsigned bits_of_image_index )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_image_index, bits_of_image_index);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_bump_map_u">bits_of_bump_map_u</a>
    SE_Short_Integer_Unsigned get_bits_of_bump_map_u()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_bump_map_u);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_bump_map_u">bits_of_bump_map_u</a>
    void set_bits_of_bump_map_u( SE_Short_Integer_Unsigned bits_of_bump_map_u )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_bump_map_u, bits_of_bump_map_u);
    }

    /// Get field <a href="../drm/classes/Image.htm#bits_of_bump_map_v">bits_of_bump_map_v</a>
    SE_Short_Integer_Unsigned get_bits_of_bump_map_v()
    {
        DRMBASE_RET_FIELDS(Image, bits_of_bump_map_v);
    }

    /// Set field <a href="../drm/classes/Image.htm#bits_of_bump_map_v">bits_of_bump_map_v</a>
    void set_bits_of_bump_map_v( SE_Short_Integer_Unsigned bits_of_bump_map_v )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, bits_of_bump_map_v, bits_of_bump_map_v);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_alpha">min_value_of_alpha</a>
    SE_Float get_min_value_of_alpha()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_alpha);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_alpha">min_value_of_alpha</a>
    void set_min_value_of_alpha( SE_Float min_value_of_alpha )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_alpha, min_value_of_alpha);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_alpha">max_value_of_alpha</a>
    SE_Float get_max_value_of_alpha()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_alpha);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_alpha">max_value_of_alpha</a>
    void set_max_value_of_alpha( SE_Float max_value_of_alpha )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_alpha, max_value_of_alpha);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_luminance">min_value_of_luminance</a>
    SE_Float get_min_value_of_luminance()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_luminance);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_luminance">min_value_of_luminance</a>
    void set_min_value_of_luminance( SE_Float min_value_of_luminance )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_luminance, min_value_of_luminance);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_luminance">max_value_of_luminance</a>
    SE_Float get_max_value_of_luminance()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_luminance);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_luminance">max_value_of_luminance</a>
    void set_max_value_of_luminance( SE_Float max_value_of_luminance )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_luminance, max_value_of_luminance);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_1">min_value_of_colour_coordinate_1</a>
    SE_Float get_min_value_of_colour_coordinate_1()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_colour_coordinate_1);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_1">min_value_of_colour_coordinate_1</a>
    void set_min_value_of_colour_coordinate_1( SE_Float min_value_of_colour_coordinate_1 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_colour_coordinate_1, min_value_of_colour_coordinate_1);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_1">max_value_of_colour_coordinate_1</a>
    SE_Float get_max_value_of_colour_coordinate_1()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_colour_coordinate_1);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_1">max_value_of_colour_coordinate_1</a>
    void set_max_value_of_colour_coordinate_1( SE_Float max_value_of_colour_coordinate_1 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_colour_coordinate_1, max_value_of_colour_coordinate_1);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_2">min_value_of_colour_coordinate_2</a>
    SE_Float get_min_value_of_colour_coordinate_2()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_colour_coordinate_2);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_2">min_value_of_colour_coordinate_2</a>
    void set_min_value_of_colour_coordinate_2( SE_Float min_value_of_colour_coordinate_2 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_colour_coordinate_2, min_value_of_colour_coordinate_2);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_2">max_value_of_colour_coordinate_2</a>
    SE_Float get_max_value_of_colour_coordinate_2()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_colour_coordinate_2);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_2">max_value_of_colour_coordinate_2</a>
    void set_max_value_of_colour_coordinate_2( SE_Float max_value_of_colour_coordinate_2 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_colour_coordinate_2, max_value_of_colour_coordinate_2);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_3">min_value_of_colour_coordinate_3</a>
    SE_Float get_min_value_of_colour_coordinate_3()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_colour_coordinate_3);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_colour_coordinate_3">min_value_of_colour_coordinate_3</a>
    void set_min_value_of_colour_coordinate_3( SE_Float min_value_of_colour_coordinate_3 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_colour_coordinate_3, min_value_of_colour_coordinate_3);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_3">max_value_of_colour_coordinate_3</a>
    SE_Float get_max_value_of_colour_coordinate_3()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_colour_coordinate_3);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_colour_coordinate_3">max_value_of_colour_coordinate_3</a>
    void set_max_value_of_colour_coordinate_3( SE_Float max_value_of_colour_coordinate_3 )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_colour_coordinate_3, max_value_of_colour_coordinate_3);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_bump_map_height">min_value_of_bump_map_height</a>
    SE_Float get_min_value_of_bump_map_height()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_bump_map_height);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_bump_map_height">min_value_of_bump_map_height</a>
    void set_min_value_of_bump_map_height( SE_Float min_value_of_bump_map_height )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_bump_map_height, min_value_of_bump_map_height);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_bump_map_height">max_value_of_bump_map_height</a>
    SE_Float get_max_value_of_bump_map_height()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_bump_map_height);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_bump_map_height">max_value_of_bump_map_height</a>
    void set_max_value_of_bump_map_height( SE_Float max_value_of_bump_map_height )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_bump_map_height, max_value_of_bump_map_height);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_bump_map_u">min_value_of_bump_map_u</a>
    SE_Float get_min_value_of_bump_map_u()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_bump_map_u);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_bump_map_u">min_value_of_bump_map_u</a>
    void set_min_value_of_bump_map_u( SE_Float min_value_of_bump_map_u )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_bump_map_u, min_value_of_bump_map_u);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_bump_map_u">max_value_of_bump_map_u</a>
    SE_Float get_max_value_of_bump_map_u()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_bump_map_u);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_bump_map_u">max_value_of_bump_map_u</a>
    void set_max_value_of_bump_map_u( SE_Float max_value_of_bump_map_u )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_bump_map_u, max_value_of_bump_map_u);
    }

    /// Get field <a href="../drm/classes/Image.htm#min_value_of_bump_map_v">min_value_of_bump_map_v</a>
    SE_Float get_min_value_of_bump_map_v()
    {
        DRMBASE_RET_FIELDS(Image, min_value_of_bump_map_v);
    }

    /// Set field <a href="../drm/classes/Image.htm#min_value_of_bump_map_v">min_value_of_bump_map_v</a>
    void set_min_value_of_bump_map_v( SE_Float min_value_of_bump_map_v )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, min_value_of_bump_map_v, min_value_of_bump_map_v);
    }

    /// Get field <a href="../drm/classes/Image.htm#max_value_of_bump_map_v">max_value_of_bump_map_v</a>
    SE_Float get_max_value_of_bump_map_v()
    {
        DRMBASE_RET_FIELDS(Image, max_value_of_bump_map_v);
    }

    /// Set field <a href="../drm/classes/Image.htm#max_value_of_bump_map_v">max_value_of_bump_map_v</a>
    void set_max_value_of_bump_map_v( SE_Float max_value_of_bump_map_v )
    {
        DRMBASE_ALLOC_FIELDS;
        DRMBASE_SET_FIELDS(Image, max_value_of_bump_map_v, max_value_of_bump_map_v);
    }

    /** Sets the image data for an Image's MIP level.
       User provides the image data in @p data, which is a pointer to
       @p byte_count bytes allocated by the user.
       @note @p byte_count MUST match the number of bytes in the MIP level,
           or an exception will occur.
       @note The user is responsible for allocating/deallocating the data memory.
       @see getImageData(), getImageDataSize()
       @param mip_level in: the image MIP level being accessed
       @param byte_count in: the number of bytes in the MIP level
       @param data in: the pointer to the image data
    */
    virtual void putImageData( SE_Short_Integer_Unsigned mip_level,
                        SE_Integer_Unsigned byte_count,
                        const unsigned char *data );

    /** Gets the image data from an Image's MIP level.
       See the seHelperImage class for an easier interface for reading
       image data.

       User retrieves the image data from @p data, which is a pointer to
       @p byte_count bytes allocated by the user.
       Data can only be retrieved from one MIP level at a time.
       @note @p byte_count MUST match the number of bytes in the MIP level,
           or an exception will occur.
       @note The user is responsible for allocating/deallocating the data memory.
       @see getImageDataSize()
       @param mip_level in: the image MIP level being accessed
       @param byte_count in: the number of bytes in the MIP level
       @param data in/out: the pointer to the image data
       @see seHelperImage
    */
    virtual void getImageData( SE_Short_Integer_Unsigned mip_level,
                        SE_Integer_Unsigned byte_count,
                        unsigned char *data );

    /** Returns the number of bytes in an Image's MIP level.
        @param mip_level in: the image MIP level being accessed
        @return number of bytes in MIP level (computed from fields)
        @see seHelperImage
    */
    virtual SE_Integer_Unsigned getImageDataSize( SE_Short_Integer_Unsigned mip_level );

    /** Gets the DRM class type this object can reference (mostly internal use).
        @warning Don't confuse with getDRMClass(), which is dependent on the
            actual type held by this DRM class object reference.
        @return SE_CLS_DRM_IMAGE
    */
    virtual SE_DRM_Class getClassType() const
    {
        return SE_CLS_DRM_IMAGE;
    }

};

} // namespace sedris

#endif // _seDRMImage_h
