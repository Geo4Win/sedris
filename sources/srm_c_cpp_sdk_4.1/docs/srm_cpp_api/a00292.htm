<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>LambertConformalConic.h</h1><a href="a00257.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: LambertConformalConic.h,v 1.19 2009-10-12 15:49:27-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _LambertConformalConic_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _LambertConformalConic_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00181.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_LambertConformalConic: <span class="keyword">public</span> <a class="code" href="a00126.htm">BaseSRF_MapProjection</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_LambertConformalConic* create(      <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00097                                                    <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00098                                              <span class="keyword">const</span> <a class="code" href="a00211.htm">SRM_LCC_Parameters</a> &amp;params);
00099 
00103     <span class="keyword">static</span> SRF_LambertConformalConic* create(
00104                                              <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a> orm,
00105                                              <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>  rt,
00106                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> origin_longitude,
00107                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> origin_latitude,
00108                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> latitude1,
00109                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> latitude2,
00110                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_easting,
00111                                              <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> false_northing
00112                                             );
00113 
<a name="l00117"></a><a class="code" href="a00181.htm#e2">00117</a>     <span class="keyword">static</span> SRF_LambertConformalConic* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00118     {
00119         <span class="keywordflow">return</span> create( srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00120                        srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00121                        srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.lcc_srf_parameters );
00122     }
00123 
00126     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00127                                 SRM_Long_Float coord_comp2,
00128                                 SRM_Long_Float coord_comp3 );
00129 
00132     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00133                                        SRM_Long_Float coord_surf_comp2 );
00134 
00138     <span class="keyword">const</span> <a class="code" href="a00211.htm">SRM_LCC_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00139 
00143     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_origin_longitude() <span class="keyword">const</span>;
00144 
00148     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_origin_latitude() <span class="keyword">const</span>;
00149 
00153     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude1() <span class="keyword">const</span>;
00154 
00158     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_latitude2() <span class="keyword">const</span>;
00159 
00163     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_easting() <span class="keyword">const</span>;
00164 
00168     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_false_northing() <span class="keyword">const</span>;
00169 
00172     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00173 
<a name="l00176"></a><a class="code" href="a00181.htm#a10">00176</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00177 <span class="keyword">    </span>{
00178         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_LCC;
00179     }
00180 
00184     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_LambertConformalConic &amp;srf ) <span class="keyword">const</span>;
00185 
00189     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_LambertConformalConic &amp;rhs ) <span class="keyword">const</span>;
00190 
00191 
00195     SRF_LambertConformalConic* makeCopy() <span class="keyword">const</span>;
00196 
00197 
00201     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00202 
00203 <span class="keyword">protected</span>:
00204     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00205     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_3D;
00206     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_WithEllipsoidalHeight;
<a name="l00207"></a><a class="code" href="a00181.htm#b0">00207</a>     SRF_LambertConformalConic( <span class="keywordtype">void</span> *impl ) : <a class="code" href="a00126.htm">BaseSRF_MapProjection</a>(impl) {} 
<a name="l00208"></a><a class="code" href="a00181.htm#b1">00208</a>     SRF_LambertConformalConic &amp;operator =( <span class="keyword">const</span> SRF_LambertConformalConic &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
<a name="l00209"></a><a class="code" href="a00181.htm#b2">00209</a>     <span class="keyword">virtual</span> ~SRF_LambertConformalConic() {} 
00210 };
00211 
00212 
<a name="l00213"></a><a class="code" href="a00181.htm#a9">00213</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_LambertConformalConic::isA( SRF_ClassType type )<span class="keyword"> const</span>
00214 <span class="keyword"></span>{
00215     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_LCC)
00216         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00217     <span class="keywordflow">else</span>
00218         <span class="keywordflow">return</span> BaseSRF_MapProjection::isA(type);
00219 };
00220 
00221 
00223 <span class="keyword">typedef</span> SRF_LambertConformalConic <a class="code" href="a00181.htm">SRF_LCC</a>;
00224 
00225 
<a name="l00230"></a><a class="code" href="a00143.htm">00230</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_LambertConformalConic: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00231 {
00232 <span class="keyword">public</span>:
<a name="l00235"></a><a class="code" href="a00143.htm#a0">00235</a>     Coord3D_LambertConformalConic(SRF_LambertConformalConic *srf,
00236                                   SRM_Long_Float easting = 0.0,
00237                                   SRM_Long_Float northing = 0.0,
00238                                   SRM_Long_Float ellipsoidal_height = 0.0 )
00239     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00240     {
00241         setComponentValues(easting, northing, ellipsoidal_height);
00242     }
00243 
<a name="l00246"></a><a class="code" href="a00143.htm#a1">00246</a>     Coord3D_LambertConformalConic( <span class="keyword">const</span> Coord3D_LambertConformalConic &amp;coord )
00247     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00248     {
00249         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00250     }
00251 
<a name="l00257"></a><a class="code" href="a00143.htm#a2">00257</a>     <span class="keywordtype">void</span> copyTo( Coord3D_LambertConformalConic &amp;coord )<span class="keyword"> const</span>
00258 <span class="keyword">    </span>{
00259         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00260             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00261 
00262         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00263         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00264         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00265     }
00266 
<a name="l00270"></a><a class="code" href="a00143.htm#a3">00270</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_LambertConformalConic &amp;coord )<span class="keyword"> const</span>
00271 <span class="keyword">    </span>{
00272         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00273                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00274                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00275                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00276     }
00277 
<a name="l00280"></a><a class="code" href="a00143.htm#a4">00280</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing, SRM_Long_Float ellipsoidal_height )
00281     {
00282         _values[0] = easting;
00283         _values[1] = northing;
00284         _values[2] = ellipsoidal_height;
00285     }
00286 
<a name="l00289"></a><a class="code" href="a00143.htm#a5">00289</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00290 <span class="keyword">    </span>{
00291         <span class="keywordflow">return</span> _values[0];
00292     }
00293 
<a name="l00296"></a><a class="code" href="a00143.htm#a6">00296</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00297 <span class="keyword">    </span>{
00298         <span class="keywordflow">return</span> _values[1];
00299     }
00300 
<a name="l00303"></a><a class="code" href="a00143.htm#a7">00303</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_ellipsoidal_height()<span class="keyword"> const</span>
00304 <span class="keyword">    </span>{
00305         <span class="keywordflow">return</span> _values[2];
00306     }
00307 
<a name="l00310"></a><a class="code" href="a00143.htm#a8">00310</a>     <span class="keywordtype">void</span> set_easting(SRM_Long_Float value)
00311     {
00312         _values[0] = value;
00313     }
00314 
<a name="l00317"></a><a class="code" href="a00143.htm#a9">00317</a>     <span class="keywordtype">void</span> set_northing(SRM_Long_Float value)
00318     {
00319         _values[1] = value;
00320     }
00321 
<a name="l00324"></a><a class="code" href="a00143.htm#a10">00324</a>     <span class="keywordtype">void</span> set_ellipsoidal_height(SRM_Long_Float value)
00325     {
00326         _values[2] = value;
00327     }
00328 
00331     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00332 
<a name="l00335"></a><a class="code" href="a00143.htm#a12">00335</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00336 <span class="keyword">    </span>{
00337         <span class="keywordflow">return</span> Coord::COORD_TYP_LCC;
00338     }
00339 
00342     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_LambertConformalConic &amp;rhs ) <span class="keyword">const</span>;
00343 
<a name="l00349"></a><a class="code" href="a00143.htm#a14">00349</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_LambertConformalConic &amp;rhs )<span class="keyword"> const</span>
00350 <span class="keyword">    </span>{
00351         <span class="keywordflow">return</span> ((*(SRF_LambertConformalConic*)(this-&gt;_srf)) == (*(SRF_LambertConformalConic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00352     }
00353 
<a name="l00358"></a><a class="code" href="a00143.htm#a15">00358</a>     Coord3D_LambertConformalConic &amp;operator= ( <span class="keyword">const</span> Coord3D_LambertConformalConic &amp;rhs)
00359     {
00360         <span class="keywordflow">if</span>((*(SRF_LambertConformalConic*)(this-&gt;_srf)) == (*(SRF_LambertConformalConic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00361         {
00362             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00363             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00364             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00365         }
00366         <span class="keywordflow">else</span>
00367             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00368                           <span class="stringliteral">"Coord3D_LambertConformalConic op=: incompatible rhs coordinate"</span>);
00369 
00370         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00371     }
00372 };
00373 
00374 
<a name="l00375"></a><a class="code" href="a00143.htm#a11">00375</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_LambertConformalConic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00376 <span class="keyword"></span>{
00377     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_LCC)
00378         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00379     <span class="keywordflow">else</span>
00380         <span class="keywordflow">return</span> Coord3D::isA(type);
00381 };
00382 
00383 
00385 <span class="keyword">typedef</span> Coord3D_LambertConformalConic <a class="code" href="a00143.htm">Coord3D_LCC</a>;
00386 
00387 
<a name="l00392"></a><a class="code" href="a00161.htm">00392</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_LambertConformalConic: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00393 {
00394 <span class="keyword">public</span>:
<a name="l00397"></a><a class="code" href="a00161.htm#a0">00397</a>     CoordSurf_LambertConformalConic(SRF_LambertConformalConic *srf,
00398                                     SRM_Long_Float easting = 0.0,
00399                                     SRM_Long_Float northing = 0.0 )
00400     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00401     {
00402         setComponentValues(easting, northing);
00403     }
00404 
<a name="l00407"></a><a class="code" href="a00161.htm#a1">00407</a>     CoordSurf_LambertConformalConic( <span class="keyword">const</span> CoordSurf_LambertConformalConic &amp;coord )
00408     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00409     {
00410         setComponentValues( coord._values[0], coord._values[1] );
00411     }
00412 
<a name="l00418"></a><a class="code" href="a00161.htm#a2">00418</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_LambertConformalConic &amp;coord )<span class="keyword"> const</span>
00419 <span class="keyword">    </span>{
00420         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00421             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00422 
00423         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00424         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00425     }
00426 
<a name="l00430"></a><a class="code" href="a00161.htm#a3">00430</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_LambertConformalConic &amp;coord )<span class="keyword"> const</span>
00431 <span class="keyword">    </span>{
00432         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00433                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00434                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00435     }
00436 
<a name="l00439"></a><a class="code" href="a00161.htm#a4">00439</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float easting, SRM_Long_Float northing )
00440     {
00441         _values[0] = easting;
00442         _values[1] = northing;
00443     }
00444 
<a name="l00447"></a><a class="code" href="a00161.htm#a5">00447</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_easting()<span class="keyword"> const</span>
00448 <span class="keyword">    </span>{
00449         <span class="keywordflow">return</span> _values[0];
00450     }
00451 
<a name="l00454"></a><a class="code" href="a00161.htm#a6">00454</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_northing()<span class="keyword"> const</span>
00455 <span class="keyword">    </span>{
00456         <span class="keywordflow">return</span> _values[1];
00457     }
00458 
<a name="l00461"></a><a class="code" href="a00161.htm#a7">00461</a>     <span class="keywordtype">void</span> set_easting(SRM_Long_Float value)
00462     {
00463         _values[0] = value;
00464     }
00465 
<a name="l00468"></a><a class="code" href="a00161.htm#a8">00468</a>     <span class="keywordtype">void</span> set_northing(SRM_Long_Float value)
00469     {
00470         _values[1] = value;
00471     }
00472 
00475     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00476 
00477 
<a name="l00480"></a><a class="code" href="a00161.htm#a10">00480</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00481 <span class="keyword">    </span>{
00482         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_LCC;
00483     }
00484 
00487     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_LambertConformalConic &amp;rhs ) <span class="keyword">const</span>;
00488 
<a name="l00494"></a><a class="code" href="a00161.htm#a12">00494</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_LambertConformalConic &amp;rhs )<span class="keyword"> const</span>
00495 <span class="keyword">    </span>{
00496         <span class="keywordflow">return</span> ((*(SRF_LambertConformalConic*)(this-&gt;_srf)) == (*(SRF_LambertConformalConic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00497     }
00498 
<a name="l00505"></a><a class="code" href="a00161.htm#a13">00505</a>     CoordSurf_LambertConformalConic &amp;operator= ( <span class="keyword">const</span> CoordSurf_LambertConformalConic &amp;rhs)
00506     {
00507         <span class="keywordflow">if</span>((*(SRF_LambertConformalConic*)(this-&gt;_srf)) == (*(SRF_LambertConformalConic*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00508         {
00509             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00510             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00511         }
00512         <span class="keywordflow">else</span>
00513             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00514                             <span class="stringliteral">"CoordSurf_LambertConformalConic op=: incompatible rhs coordinate"</span>);
00515 
00516         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00517     }
00518 };
00519 
00520 
<a name="l00521"></a><a class="code" href="a00161.htm#a9">00521</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_LambertConformalConic::isA( Coord_ClassType type )<span class="keyword"> const</span>
00522 <span class="keyword"></span>{
00523     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_LCC)
00524         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00525     <span class="keywordflow">else</span>
00526         <span class="keywordflow">return</span> CoordSurf::isA(type);
00527 };
00528 
00529 
00531 <span class="keyword">typedef</span> CoordSurf_LambertConformalConic <a class="code" href="a00161.htm">CoordSurf_LCC</a>;
00532 
00533 } <span class="comment">// namespace srm</span>
00534 
00535 <span class="preprocessor">#endif // _LambertConformalConic_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
