<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Spatial Reference Model C++ API</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<!-- SRM C++ SDK -->
<!-- SRM spec. 4.1 -->


<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="main.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Compound&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Compound&nbsp;Members</a> | <a class="qindex" href="globals.htm">File&nbsp;Members</a></div>
<h1>LocalTangentSpaceEuclidean.h</h1><a href="a00264.htm">Go to the documentation of this file.</a><div class="fragment"><pre>00001 
00005 <span class="comment">// SRM SDK Release 4.1.4 - July 1, 2011</span>
00006 
00007 <span class="comment">// - SRM spec. 4.1</span>
00008 
00009 <span class="comment">/*</span>
00010 <span class="comment"> *                             NOTICE</span>
00011 <span class="comment"> * </span>
00012 <span class="comment"> * This software is provided openly and freely for use in representing and</span>
00013 <span class="comment"> * interchanging environmental data &amp; databases.</span>
00014 <span class="comment"> * </span>
00015 <span class="comment"> * This software was developed for use by the United States Government with</span>
00016 <span class="comment"> * unlimited rights.  The software was developed under contract</span>
00017 <span class="comment"> * DASG60-02-D-0006 TO-193 by Science Applications International Corporation.</span>
00018 <span class="comment"> * The software is unclassified and is deemed as Distribution A, approved</span>
00019 <span class="comment"> * for Public Release.</span>
00020 <span class="comment"> * </span>
00021 <span class="comment"> * Use by others is permitted only upon the ACCEPTANCE OF THE TERMS AND</span>
00022 <span class="comment"> * CONDITIONS, AS STIPULATED UNDER THE FOLLOWING PROVISIONS:</span>
00023 <span class="comment"> * </span>
00024 <span class="comment"> *    1. Recipient may make unlimited copies of this software and give</span>
00025 <span class="comment"> *       copies to other persons or entities as long as the copies contain</span>
00026 <span class="comment"> *       this NOTICE, and as long as the same copyright notices that</span>
00027 <span class="comment"> *       appear on, or in, this software remain.</span>
00028 <span class="comment"> * </span>
00029 <span class="comment"> *    2. Trademarks. All trademarks belong to their respective trademark</span>
00030 <span class="comment"> *       holders.  Third-Party applications/software/information are</span>
00031 <span class="comment"> *       copyrighted by their respective owners.</span>
00032 <span class="comment"> * </span>
00033 <span class="comment"> *    3. Recipient agrees to forfeit all intellectual property and</span>
00034 <span class="comment"> *       ownership rights for any version created from the modification</span>
00035 <span class="comment"> *       or adaptation of this software, including versions created from</span>
00036 <span class="comment"> *       the translation and/or reverse engineering of the software design.</span>
00037 <span class="comment"> * </span>
00038 <span class="comment"> *    4. Transfer.  Recipient may not sell, rent, lease, or sublicense</span>
00039 <span class="comment"> *       this software.  Recipient may, however enable another person</span>
00040 <span class="comment"> *       or entity the rights to use this software, provided that this</span>
00041 <span class="comment"> *       AGREEMENT and NOTICE is furnished along with the software and</span>
00042 <span class="comment"> *       /or software system utilizing this software.</span>
00043 <span class="comment"> * </span>
00044 <span class="comment"> *       All revisions, modifications, created by the Recipient, to this</span>
00045 <span class="comment"> *       software and/or related technical data shall be forwarded by the</span>
00046 <span class="comment"> *       Recipient to the Government at the following address:</span>
00047 <span class="comment"> * </span>
00048 <span class="comment"> *         SMDC</span>
00049 <span class="comment"> *         Attention SEDRIS (TO193) TPOC</span>
00050 <span class="comment"> *         P.O. Box 1500</span>
00051 <span class="comment"> *         Huntsville, AL  35807-3801</span>
00052 <span class="comment"> * </span>
00053 <span class="comment"> *         or via electronic mail to:  se-mgmt@sedris.org</span>
00054 <span class="comment"> * </span>
00055 <span class="comment"> *    5. No Warranty. This software is being delivered to you AS IS</span>
00056 <span class="comment"> *       and there is no warranty, EXPRESS or IMPLIED, as to its use</span>
00057 <span class="comment"> *       or performance.</span>
00058 <span class="comment"> * </span>
00059 <span class="comment"> *       The RECIPIENT ASSUMES ALL RISKS, KNOWN AND UNKNOWN, OF USING</span>
00060 <span class="comment"> *       THIS SOFTWARE.  The DEVELOPER EXPRESSLY DISCLAIMS, and the</span>
00061 <span class="comment"> *       RECIPIENT WAIVES, ANY and ALL PERFORMANCE OR RESULTS YOU MAY</span>
00062 <span class="comment"> *       OBTAIN BY USING THIS SOFTWARE OR DOCUMENTATION.  THERE IS</span>
00063 <span class="comment"> *       NO WARRANTY, EXPRESS OR, IMPLIED, AS TO NON-INFRINGEMENT OF</span>
00064 <span class="comment"> *       THIRD PARTY RIGHTS, MERCHANTABILITY, OR FITNESS FOR ANY</span>
00065 <span class="comment"> *       PARTICULAR PURPOSE.  IN NO EVENT WILL THE DEVELOPER, THE</span>
00066 <span class="comment"> *       UNITED STATES GOVERNMENT OR ANYONE ELSE ASSOCIATED WITH THE</span>
00067 <span class="comment"> *       DEVELOPMENT OF THIS SOFTWARE BE HELD LIABLE FOR ANY CONSEQUENTIAL,</span>
00068 <span class="comment"> *       INCIDENTAL OR SPECIAL DAMAGES, INCLUDING ANY LOST PROFITS</span>
00069 <span class="comment"> *       OR LOST SAVINGS WHATSOEVER.</span>
00070 <span class="comment"> */</span>
00071 
00072 
00073 <span class="comment">// $Id: LocalTangentSpaceEuclidean.h,v 1.17 2009-10-12 15:30:35-04 worleym Exp $</span>
00074 
00075 <span class="preprocessor">#ifndef _LocalTangentSpaceEuclidean_h</span>
00076 <span class="preprocessor"></span><span class="preprocessor">#define _LocalTangentSpaceEuclidean_h</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#include "<a class="code" href="a00245.htm">BaseSRF.h</a>"</span>
00079 <span class="preprocessor">#include "<a class="code" href="a00249.htm">Coord.h</a>"</span>
00080 <span class="preprocessor">#include "<a class="code" href="a00253.htm">Exception.h</a>"</span>
00081 
00082 <span class="keyword">namespace </span>srm
00083 {
<a name="l00090"></a><a class="code" href="a00188.htm">00090</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL SRF_LocalTangentSpaceEuclidean: <span class="keyword">public</span> <a class="code" href="a00128.htm">BaseSRF_WithTangentPlaneSurface</a>
00091 {
00092 <span class="keyword">public</span>:
00096     <span class="keyword">static</span> SRF_LocalTangentSpaceEuclidean* create
00097     (
00098               <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a>         orm,
00099               <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>          rt,
00100         <span class="keyword">const</span> <a class="code" href="a00223.htm">SRM_LTSE_Parameters</a> &amp;params
00101     );
00102 
00106     <span class="keyword">static</span> SRF_LocalTangentSpaceEuclidean* create(
00107                                                   <a class="code" href="a00277.htm#a1085">SRM_ORM_Code</a>   orm,
00108                                                   <a class="code" href="a00277.htm#a1088">SRM_RT_Code</a>    rt,
00109                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> geodetic_longitude,
00110                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> geodetic_latitude,
00111                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> azimuth,
00112                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> x_false_origin,
00113                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> y_false_origin,
00114                                                   <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> height_offset
00115                                                   );
00116 
<a name="l00120"></a><a class="code" href="a00188.htm#e2">00120</a>     <span class="keyword">static</span> SRF_LocalTangentSpaceEuclidean* create( <a class="code" href="a00235.htm">SRM_SRF_Parameters_Info</a> srf_params )
00121     {
00122         <span class="keywordflow">return</span> create(srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.orm_code,
00123                       srf_params.<a class="code" href="a00235.htm#o1">rt_code</a>,
00124                       srf_params.<a class="code" href="a00235.htm#o2">value</a>.srf_template.parameters.ltse_srf_parameters );
00125     }
00126 
00129     Coord3D* createCoordinate3D(SRM_Long_Float coord_comp1,
00130                                 SRM_Long_Float coord_comp2,
00131                                 SRM_Long_Float coord_comp3 );
00132 
00135     CoordSurf* createSurfaceCoordinate(SRM_Long_Float coord_surf_comp1,
00136                                        SRM_Long_Float coord_surf_comp2 );
00137 
00141     <span class="keyword">const</span> <a class="code" href="a00223.htm">SRM_LTSE_Parameters</a> &amp;getSRFParameters() <span class="keyword">const</span>;
00142 
00146     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_geodetic_longitude() <span class="keyword">const</span>;
00147 
00151     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_geodetic_latitude() <span class="keyword">const</span>;
00152 
00156     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_azimuth() <span class="keyword">const</span>;
00157 
00161     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_x_false_origin() <span class="keyword">const</span>;
00162 
00166     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_y_false_origin() <span class="keyword">const</span>;
00167 
00171     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_height_offset() <span class="keyword">const</span>;
00172 
00175     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( SRF_ClassType type ) <span class="keyword">const</span>;
00176 
<a name="l00179"></a><a class="code" href="a00188.htm#a10">00179</a>     <span class="keyword">virtual</span> SRF_ClassType getClassType()<span class="keyword"> const</span>
00180 <span class="keyword">    </span>{
00181         <span class="keywordflow">return</span> BaseSRF::SRF_TYP_LTSE;
00182     }
00183 
00187     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> SRF_LocalTangentSpaceEuclidean &amp;srf ) <span class="keyword">const</span>;
00188 
00192     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> SRF_LocalTangentSpaceEuclidean &amp;rhs ) <span class="keyword">const</span>;
00193 
00197     SRF_LocalTangentSpaceEuclidean* makeCopy() <span class="keyword">const</span>;
00198 
00206     <span class="keyword">virtual</span> <a class="code" href="a00277.htm#a1122">SRM_Coordinate_Valid_Region</a> changeCoordinate3DSRF(<span class="keyword">const</span> Coord3D &amp;src_coord,
00207                                                                     Coord3D &amp;des_coord );
00208 
00212     <span class="keyword">const</span> <span class="keywordtype">char</span>* toString();
00213 
00214 <span class="keyword">protected</span>:
00215     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF;
00216     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_3D;
00217     <span class="keyword">friend</span> <span class="keyword">class </span>BaseSRF_WithEllipsoidalHeight;
00218     SRF_LocalTangentSpaceEuclidean( <span class="keywordtype">void</span> *impl ); 
<a name="l00219"></a><a class="code" href="a00188.htm#b1">00219</a>     SRF_LocalTangentSpaceEuclidean &amp;operator =( <span class="keyword">const</span> SRF_LocalTangentSpaceEuclidean &amp; ) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } 
00220     <span class="keyword">virtual</span> ~SRF_LocalTangentSpaceEuclidean(); 
00221 };
00222 
00223 
<a name="l00224"></a><a class="code" href="a00188.htm#a9">00224</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> SRF_LocalTangentSpaceEuclidean::isA( SRF_ClassType type )<span class="keyword"> const</span>
00225 <span class="keyword"></span>{
00226     <span class="keywordflow">if</span> (type == BaseSRF::SRF_TYP_LTSE)
00227         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00228     <span class="keywordflow">else</span>
00229         <span class="keywordflow">return</span> BaseSRF_WithTangentPlaneSurface::isA(type);
00230 };
00231 
00232 
00234 <span class="keyword">typedef</span> SRF_LocalTangentSpaceEuclidean <a class="code" href="a00188.htm">SRF_LTSE</a>;
00235 
00236 
<a name="l00241"></a><a class="code" href="a00147.htm">00241</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL Coord3D_LocalTangentSpaceEuclidean: <span class="keyword">public</span> <a class="code" href="a00134.htm">Coord3D</a>
00242 {
00243 <span class="keyword">public</span>:
<a name="l00246"></a><a class="code" href="a00147.htm#a0">00246</a>     Coord3D_LocalTangentSpaceEuclidean(SRF_LocalTangentSpaceEuclidean *srf,
00247                                        SRM_Long_Float x = 0.0,
00248                                        SRM_Long_Float y = 0.0,
00249                                        SRM_Long_Float height = 0.0 )
00250     : <a class="code" href="a00134.htm">Coord3D</a>(srf)
00251     {
00252         setComponentValues(x, y, height);
00253     }
00254 
<a name="l00257"></a><a class="code" href="a00147.htm#a1">00257</a>     Coord3D_LocalTangentSpaceEuclidean( <span class="keyword">const</span> Coord3D_LocalTangentSpaceEuclidean &amp;coord )
00258     : <a class="code" href="a00134.htm">Coord3D</a>(coord._srf)
00259     {
00260         setComponentValues( coord._values[0], coord._values[1], coord._values[2] );
00261     }
00262 
<a name="l00268"></a><a class="code" href="a00147.htm#a2">00268</a>     <span class="keywordtype">void</span> copyTo( Coord3D_LocalTangentSpaceEuclidean &amp;coord )<span class="keyword"> const</span>
00269 <span class="keyword">    </span>{
00270         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00271             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00272 
00273         coord.<a class="code" href="a00134.htm#p0">_values</a>[0] = _values[0];
00274         coord.<a class="code" href="a00134.htm#p0">_values</a>[1] = _values[1];
00275         coord.<a class="code" href="a00134.htm#p0">_values</a>[2] = _values[2];
00276     }
00277 
<a name="l00281"></a><a class="code" href="a00147.htm#a3">00281</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> Coord3D_LocalTangentSpaceEuclidean &amp;coord )<span class="keyword"> const</span>
00282 <span class="keyword">    </span>{
00283         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00284                 _values[0] == coord.<a class="code" href="a00134.htm#p0">_values</a>[0] &amp;&amp;
00285                 _values[1] == coord.<a class="code" href="a00134.htm#p0">_values</a>[1] &amp;&amp;
00286                 _values[2] == coord.<a class="code" href="a00134.htm#p0">_values</a>[2] );
00287     }
00288 
<a name="l00291"></a><a class="code" href="a00147.htm#a4">00291</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float x, SRM_Long_Float y, SRM_Long_Float height )
00292     {
00293         _values[0] = x;
00294         _values[1] = y;
00295         _values[2] = height;
00296     }
00297 
<a name="l00300"></a><a class="code" href="a00147.htm#a5">00300</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_x()<span class="keyword"> const</span>
00301 <span class="keyword">    </span>{
00302         <span class="keywordflow">return</span> _values[0];
00303     }
00304 
<a name="l00307"></a><a class="code" href="a00147.htm#a6">00307</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_y()<span class="keyword"> const</span>
00308 <span class="keyword">    </span>{
00309         <span class="keywordflow">return</span> _values[1];
00310     }
00311 
<a name="l00314"></a><a class="code" href="a00147.htm#a7">00314</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_height()<span class="keyword"> const</span>
00315 <span class="keyword">    </span>{
00316         <span class="keywordflow">return</span> _values[2];
00317     }
00318 
<a name="l00321"></a><a class="code" href="a00147.htm#a8">00321</a>     <span class="keywordtype">void</span> set_x( SRM_Long_Float value )
00322     {
00323         _values[0] = value;
00324     }
00325 
<a name="l00328"></a><a class="code" href="a00147.htm#a9">00328</a>     <span class="keywordtype">void</span> set_y( SRM_Long_Float value )
00329     {
00330         _values[1] = value;
00331     }
00332 
<a name="l00335"></a><a class="code" href="a00147.htm#a10">00335</a>     <span class="keywordtype">void</span> set_height( SRM_Long_Float value )
00336     {
00337         _values[2] = value;
00338     }
00339 
00342     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00343 
<a name="l00346"></a><a class="code" href="a00147.htm#a12">00346</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00347 <span class="keyword">    </span>{
00348         <span class="keywordflow">return</span> Coord::COORD_TYP_LTSE;
00349     }
00350 
00353     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> Coord3D_LocalTangentSpaceEuclidean &amp;rhs ) <span class="keyword">const</span>;
00354 
<a name="l00360"></a><a class="code" href="a00147.htm#a14">00360</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> Coord3D_LocalTangentSpaceEuclidean &amp;rhs )<span class="keyword"> const</span>
00361 <span class="keyword">    </span>{
00362         <span class="keywordflow">return</span> ((*(SRF_LocalTangentSpaceEuclidean*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceEuclidean*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00363     }
00364 
<a name="l00369"></a><a class="code" href="a00147.htm#a15">00369</a>     Coord3D_LocalTangentSpaceEuclidean &amp;operator= ( <span class="keyword">const</span> Coord3D_LocalTangentSpaceEuclidean &amp;rhs )
00370     {
00371         <span class="keywordflow">if</span>((*(SRF_LocalTangentSpaceEuclidean*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceEuclidean*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00372         {
00373             _values[0] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[0];
00374             _values[1] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[1];
00375             _values[2] = rhs.<a class="code" href="a00134.htm#p0">_values</a>[2];
00376         }
00377         <span class="keywordflow">else</span>
00378             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00379                             <span class="stringliteral">"Coord3D_LocalTangentSpaceEuclidean op=: incompatible rhs coordinate"</span>);
00380 
00381         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00382     }
00383 };
00384 
00385 
<a name="l00386"></a><a class="code" href="a00147.htm#a11">00386</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> Coord3D_LocalTangentSpaceEuclidean::isA( Coord_ClassType type )<span class="keyword"> const</span>
00387 <span class="keyword"></span>{
00388     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_LTSE)
00389         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00390     <span class="keywordflow">else</span>
00391         <span class="keywordflow">return</span> Coord3D::isA(type);
00392 };
00393 
00394 
00396 <span class="keyword">typedef</span> Coord3D_LocalTangentSpaceEuclidean <a class="code" href="a00147.htm">Coord3D_LTSE</a>;
00397 
00398 
<a name="l00403"></a><a class="code" href="a00164.htm">00403</a> <span class="keyword">class </span>EXPORT_SRM_CPP_DLL CoordSurf_LocalTangentSpaceEuclidean: <span class="keyword">public</span> <a class="code" href="a00158.htm">CoordSurf</a>
00404 {
00405 <span class="keyword">public</span>:
<a name="l00408"></a><a class="code" href="a00164.htm#a0">00408</a>     CoordSurf_LocalTangentSpaceEuclidean(SRF_LocalTangentSpaceEuclidean *srf,
00409                                          SRM_Long_Float x = 0.0,
00410                                          SRM_Long_Float y = 0.0 )
00411     : <a class="code" href="a00158.htm">CoordSurf</a>(srf)
00412     {
00413         setComponentValues(x, y);
00414     }
00415 
<a name="l00418"></a><a class="code" href="a00164.htm#a1">00418</a>     CoordSurf_LocalTangentSpaceEuclidean( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceEuclidean &amp;coord )
00419     : <a class="code" href="a00158.htm">CoordSurf</a>(coord._srf)
00420     {
00421         setComponentValues( coord._values[0], coord._values[1] );
00422     }
00423 
<a name="l00429"></a><a class="code" href="a00164.htm#a2">00429</a>     <span class="keywordtype">void</span> copyTo( CoordSurf_LocalTangentSpaceEuclidean &amp;coord )<span class="keyword"> const</span>
00430 <span class="keyword">    </span>{
00431         <span class="keywordflow">if</span> (coord.<a class="code" href="a00129.htm#p0">_srf</a> != _srf)
00432             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>( <a class="code" href="a00277.htm#a1056">SRM_STATCOD_INVALID_SOURCE_COORDINATE</a>, <span class="stringliteral">"copyTo: Coordinate associated with a difference SRF"</span> );
00433 
00434         coord.<a class="code" href="a00158.htm#p0">_values</a>[0] = _values[0];
00435         coord.<a class="code" href="a00158.htm#p0">_values</a>[1] = _values[1];
00436     }
00437 
<a name="l00441"></a><a class="code" href="a00164.htm#a3">00441</a>     <span class="keywordtype">bool</span> isEqual( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceEuclidean &amp;coord )<span class="keyword"> const</span>
00442 <span class="keyword">    </span>{
00443         <span class="keywordflow">return</span> (_srf == coord.<a class="code" href="a00129.htm#p0">_srf</a> &amp;&amp;
00444                 _values[0] == coord.<a class="code" href="a00158.htm#p0">_values</a>[0] &amp;&amp;
00445                 _values[1] == coord.<a class="code" href="a00158.htm#p0">_values</a>[1] );
00446     }
00447 
<a name="l00450"></a><a class="code" href="a00164.htm#a4">00450</a>     <span class="keywordtype">void</span> setComponentValues( SRM_Long_Float x, SRM_Long_Float y )
00451     {
00452         _values[0] = x;
00453         _values[1] = y;
00454     }
00455 
<a name="l00458"></a><a class="code" href="a00164.htm#a5">00458</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_x()<span class="keyword"> const</span>
00459 <span class="keyword">    </span>{
00460         <span class="keywordflow">return</span> _values[0];
00461     }
00462 
<a name="l00465"></a><a class="code" href="a00164.htm#a6">00465</a>     <a class="code" href="a00276.htm#a17">SRM_Long_Float</a> get_y()<span class="keyword"> const</span>
00466 <span class="keyword">    </span>{
00467         <span class="keywordflow">return</span> _values[1];
00468     }
00469 
<a name="l00472"></a><a class="code" href="a00164.htm#a7">00472</a>     <span class="keywordtype">void</span> set_x( SRM_Long_Float value )
00473     {
00474         _values[0] = value;
00475     }
00476 
<a name="l00479"></a><a class="code" href="a00164.htm#a8">00479</a>     <span class="keywordtype">void</span> set_y( SRM_Long_Float value )
00480     {
00481         _values[1] = value;
00482     }
00483 
00486     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> isA( Coord_ClassType type ) <span class="keyword">const</span>;
00487 
<a name="l00490"></a><a class="code" href="a00164.htm#a10">00490</a>     <span class="keyword">virtual</span> Coord_ClassType getClassType()<span class="keyword"> const</span>
00491 <span class="keyword">    </span>{
00492         <span class="keywordflow">return</span> Coord::COORD_TYP_SURF_LTSE;
00493     }
00494 
00497     <span class="keywordtype">bool</span> operator==( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceEuclidean &amp;rhs ) <span class="keyword">const</span>;
00498 
<a name="l00504"></a><a class="code" href="a00164.htm#a12">00504</a>     <span class="keywordtype">bool</span> isCompatibleWith( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceEuclidean &amp;rhs )<span class="keyword"> const</span>
00505 <span class="keyword">    </span>{
00506         <span class="keywordflow">return</span> ((*(SRF_LocalTangentSpaceEuclidean*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceEuclidean*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)));
00507     }
00508 
<a name="l00514"></a><a class="code" href="a00164.htm#a13">00514</a>     CoordSurf_LocalTangentSpaceEuclidean &amp;operator= ( <span class="keyword">const</span> CoordSurf_LocalTangentSpaceEuclidean &amp;rhs )
00515     {
00516         <span class="keywordflow">if</span>((*(SRF_LocalTangentSpaceEuclidean*)(this-&gt;_srf)) == (*(SRF_LocalTangentSpaceEuclidean*)(rhs.<a class="code" href="a00129.htm#p0">_srf</a>)))
00517         {
00518             _values[0] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[0];
00519             _values[1] = rhs.<a class="code" href="a00158.htm#p0">_values</a>[1];
00520         }
00521         <span class="keywordflow">else</span>
00522             <span class="keywordflow">throw</span> <a class="code" href="a00171.htm">Exception</a>(<a class="code" href="a00277.htm#a1057">SRM_STATCOD_INVALID_TARGET_COORDINATE</a>,
00523                             <span class="stringliteral">"CoordSurf_LocalTangentSpaceEuclidean op=: incompatible rhs coordinate"</span>);
00524 
00525         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00526     }
00527 };
00528 
00529 
<a name="l00530"></a><a class="code" href="a00164.htm#a9">00530</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> CoordSurf_LocalTangentSpaceEuclidean::isA( Coord_ClassType type )<span class="keyword"> const</span>
00531 <span class="keyword"></span>{
00532     <span class="keywordflow">if</span> (type == Coord::COORD_TYP_SURF_LTSE)
00533         <span class="keywordflow">return</span> <span class="keyword">true</span>;
00534     <span class="keywordflow">else</span>
00535         <span class="keywordflow">return</span> CoordSurf::isA(type);
00536 };
00537 
00538 
00540 <span class="keyword">typedef</span> CoordSurf_LocalTangentSpaceEuclidean <a class="code" href="a00164.htm">CoordSurf_LTSE</a>;
00541 
00542 } <span class="comment">// namespace srm</span>
00543 
00544 <span class="preprocessor">#endif // _LocalTangentSpaceEuclidean_h</span>
</pre></div><hr size="1">
<table width="100%">
<tr valign="middle">
<td align="left"><strong>Spatial Reference Model C++ API</strong></td>
<td align="right"><strong>
Version 4.1.4 - July 1, 2011
</strong></td>
</tr>
<tr valign="middle">
<td align="left">Copyright &copy; 2011 <a href="http://www.sedris.org">SEDRIS</a>&#153;</td>
<td align="right">Docs by <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.3.2</td>
</tr>
</table>
</body>
</html>
